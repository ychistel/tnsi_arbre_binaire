%!PS-Adobe-2.0
%%Creator: dvips(k) 2022.1 (MiKTeX22.10)  Copyright 2021 Radical Eye Software
%%Title: ExArbreBinaire.dvi
%%CreationDate: Mon Dec 12 18:56:29 2022
%%Pages: 2
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: CMR10
%%DocumentPaperSizes: a4
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -Pdownload35 -o ExArbreBinaire.ps
%+ ExArbreBinaire.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2022.12.12:1956
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 615 2022-09-22 08:39:26Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.41, 2021/11/16
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
revision 952 gt 
{
    systemdict /.setopacityalpha known not 
      { 
         (\n\n%%%% WARNING: Transparency operations ignored - need to use -dALLOWPSTRANSPARENCY\n\n) print flush
         /.setopacityalpha { pop } bind def 
         /.setshapealpha { pop } bind def 
         /.setfillconstantalpha { pop } bind def 
         /.setstrokeconstantalpha { pop } bind def 
      }
      {
        /.setopacityalpha /.setfillconstantalpha load def 
%        /.setblendmode { pop } def   %% works again    hv 20210825
        /.setshapealpha {dup .setfillconstantalpha .setstrokeconstantalpha true .setalphaisshape } def  
      } ifelse
}
{
  systemdict /.setopacityalpha known not 
  { 
    (\n\n%%%% WARNING: Transparency operations ignored - need to use -dNOSAFER\n\n) print flush
    /.setopacityalpha { pop } bind def 
    /.setshapealpha { pop } bind def 
  } if
} ifelse
%
%%<bool> .setalphaisshape -
%%    If true, the values set by setstrokeconstantalpha and setfillconstantalpha are interpreted as shape values. The initial value of the AIS flag is false. 
%
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/fill@Dict 30 dict def				% the fill dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/Power { %  a^b   latest ghostscript don't allow -4^-3.1
  2 dict begin	% hold all local
  /b ED
  /a ED
  a 0 lt % prevent something like (-4)^(-3.1)=> 1/(-4)^3
    { b 0 lt 
      { a b cvi exp }
      { a b exp } ifelse 
    }
    { a 0 eq { 0 }{ a b exp } ifelse
    } ifelse
  end
} def
%
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/addCoors { 
  3 -1 roll 		% xA xB yB yA
  add			% xA xB yB+yA
  3 1 roll 		% yB+yA xA xB
  add			% yB+yA xA+xB
  exch                  % xA+xB yA+yB
} def
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (original)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
%
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  10 dict begin
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
  end
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  40 dict begin
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
    { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
  end % userdict
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  50 dict begin
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
  end % userdict
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  20 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave 
%  gsave w neg h lineto CLW 0.5 add setlinewidth  % test für border beim Pfeil
%  1 setgray 0 setlinejoin closepath stroke 
%  grestore  
  fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/ArrowT { % like tikz
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
  w 2 mul /w exch def
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
%  w neg Inset neg rlineto % move to x=0 and inset
%  CLW SLW
%  1 0 0 setrgbcolor
  2 setlinejoin
  stroke
  0 0 moveto
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
%  5 dict begin
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
%  end
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { %  on  stack \psk@dimen
  CLW mul /a ED % save radius
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid {
  40 dict begin 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul         %	\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  dup % run loop two times: lines and labels
  { i dx mul dup xGridOffset add y0 moveto % draw the lines
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  /i x1 def 
  GridDX div ceiling cvi 
  { i dx mul GridDX mul dup xGridOffset add y0 moveto % plot the labels
    b 0 gt 
      { gsave c i GridDX mul a cvs dup stringwidth pop /z2 ED  
        w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse exch GridDX div z2 2 div sub exch 
        rmoveto show grestore } if 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  dup % run loop two times: lines and labels
  { newpath i dy mul dup yGridOffset add x0 exch moveto 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  /i y1 def 
  GridDY div ceiling cvi
  { newpath i dy mul GridDY mul dup yGridOffset add x0 exch moveto 
    b 0 gt { gsave c i GridDY mul a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse GridDY div b 2 div sub
      rmoveto show grestore } if 
    /i i h add def 
  } repeat 
  grestore 
  end
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /RotAngle ED 
  RotAngle Rot /RAngle [ RAngle dup RotAngle add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 4 2020-06-09 08:32:19Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 249 2021-09-14 10:22:55Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
  4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
  end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  1 dict begin
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
  end
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 601 2022-09-08 19:21:27Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2021/10/01
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
12 dict dup begin
/FontType 1 def
/FontName /PSTricksDotFont def
/FontInfo 9 dict dup begin
/version (001.000) def
/Notice (Timothy Van Zandt <tvz@Princeton.EDU>

This program can be redistributed and/or modified under the terms
of the LaTeX Project Public License Distributed from CTAN archives
in directory macros/latex/base/lppl.txt.

Modified by Etienne Riga  - Dec. 16, 1999
Modified by Etienne Riga  - 2005/01/01 (er) to add /Diamond, /SolidDiamond and /BoldDiamond
Modified by Herbert Voss (hv) - 2008/04/17 
Converted to OpenType by Marcel Krueger 2021
) def
/FullName (PSTricks Dots) def
/FamilyName (PSTricksDotFont) def
/Weight (Regular) def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put } for
dup 65 /BoldAdd put
dup 67 /BoldCircle put	% 67
dup 68 /BoldDiamond put
dup 69 /SolidOtimes put
dup 70 /BoldOctogon put
dup 71 /SolidHexagon put
dup 72 /BoldHexagon put
dup 73 /BoldBar put
dup 74 /SolidAsterisk put
dup 75 /BoldAsterisk put
dup 77 /BOplus put
dup 78 /BOtimes put
dup 80 /BoldPentagon put
dup 83 /BoldSquare put
dup 84 /BoldTriangle put
dup 88 /BoldMul put
dup 97 /Add put
dup 98 /Bullet put
dup 99 /Circle put
dup 100 /Diamond put
dup 101 /SolidOplus put
dup 102 /Octogon put
dup 103 /SolidOctogon put
dup 104 /Hexagon put
dup 105 /Bar put
dup 107 /Asterisk put
dup 108 /SolidDiamond put
dup 109 /Oplus put
dup 110 /Otimes put
dup 112 /Pentagon put
dup 113 /SolidPentagon put
dup 114 /SolidSquare put
dup 115 /Square put
dup 116 /Triangle put
dup 117 /SolidTriangle put
dup 120 /Mul put
readonly def
/FontBBox {-572 -743 572 743} def
end
currentfile eexec BAB431EA06BB0A1031E1AA11919E714AC69FC5B91315E2
3949B468EA8965C09E14B93FD8F0A9A9B4A0240775693C371C9F5E8CFB4752C5
B8C3907EB8B475C65DEE88EC0510BC599D0660C41C842A3CCA793376ECDB36BF
799EB8631B5A08846013BAF4256252AF16B24E3BEE4C45F8AE9AEC40351B49C3
CC0B1DFA717674CDC7A3BEA5CE689121348DBBD82720A92C2D68DB27F03F105D
87587E74605E01EDE24B0539FAACD5311070E7BE0BDC57182DA408ED060B7B6B
964AE3EED6C8F348F298B28987B635D1332B77CC33F0B6BF682193B93CE93416
64F638070894F299603700A95B876A3FE5CEFD5BD19928E5DB60E0FB25969A26
05A6651F04B60470D0CE8E37C50EF9350CE0A4EA9F5251F0E9A1B7ACEAE4DFF7
40578E61DA30D0C9067954E23DA81539D0601CCB3FB78040200CE8A1B1E2B4BE
E6BA8FC9121F04EB916D5F9D98C77AE10A51F451B440230C23077251E29FC6E4
2844FC17F11EE282266DEC3A15C96832E595773ADA1A48330AEE455DC4A2805A
C7C7CA085D16113F30AF3EFCFFE079C45CB512DBF81EBD6137314545CA6CE891
19B42A3518E28989CA7DB1DB6F28ED3CB0E9F227A023660A46D14CF05E197E23
3015D9046635F59924C00F5EBC3561132B94C23E91D3AA1EB997B9F486C8793C
E2B8B9224C2C13AEE4AF9AA6E2FF96FFE84223ED1A902C38AD739E0C863A3A37
0482E2F28EB620257113D8EFBE63FCCD181158CC92CFA474170798746B73808F
8D4CB2A16B5BED0ACE4673AACD1484A8CF1F437F58D478A2CFBDA394851AE87F
E8E488302B346131EE903FFF22B882624BD2EF1381761C1FE4BAD1E701CA9C4F
F34AC1E9F9EC27E673FA78703FFB2432FDCD62AE52DE02D55580636F347297C4
A74D04EB5FF11D31D3D04EB580E6C54F88A817049249B0749FAEBF78C4A3CE4A
3F375E7C57D35D8CCA7810BFC7C0F4D4F14F8A29EF000D2BA97AAB26D48D50D7
CFA8E3586105575D14DD80F3D2022373F802C98A78E465F7688C9952848876D4
D7BECAD0FAFBA4674944BEAFA75ED8A87873439FDA03B482FF60B84007FCA6C0
1A04B7C8BF346E30BB6D838EA08FAFF3A3D331527459C665264B9E07A7262419
E0AF9F0AB9897891BF0CB656FE222587FC8890C3FF9D848ED557732CBD2865E0
F4838A6C6E5D794F7781359855ABBD8B2BA63EF2190D930D20C74E9088BBB9BA
62865A174D03BF90A0959079C28DA220598AD0A960C66697A49513D3F152C306
0A9E3133F750EFCDD43E34492A65321EE3B08F904968BB642D3E46DFAF2697CF
52589695642631DEAC79C3B4DD9DE61885901D9465B538643F60FC1B46D83DC4
2D6AB7AEF088D43531C4CB5957A74FCEA04E4BB05B5AF68BCF316C62F7A26CB7
88C6CCFC7859DB9915626FEE3C95F6FA3777B3F6ACE5271BF3309B0A41AF9853
5866F4EBABF5CBFA2D3F411BFB2C3B66962102B183B281FABFF17CBE2A744CE6
A8CB6E1B3D624A68104A7E43F20483622B9C93D8803D71C5ABD930DA44DD6177
F6F411619A130954C54D3BDC24E66A4EE2B3F6C7EA40167FF6E21CA13DF3E903
3E88F8F46C5CDB75E816EA0235669625A772779079CABC8DA76AFBBBC1C15EF3
5695EB0FD46E34C3FE121CC29F7FDA3384B0F1292087CBCB9CBD7B2377AC0F76
5BE0CD3485F2FCD3C6C0012125C273B48900E5200008B21F6DB9F4D4E8027E7B
34265E1FFBC9666A2678CEBA46AE908BDADA630B135683D4F66934702F939912
EDFF3EE524B38F25A0E12239EA471DC4A90814D38747EEF125FA30BBA9998119
A1499E6E6BC26ED39814B64D04D500C2E14A062125A7E4AE9985BEDB6C4A800B
D37D8F13274B28F86D73600A165214E1A8F0F787C92B3ACFC274A34EE064732B
BAB298F0DD452B3DA4E230624FA5296C7ED8A464C5E7D31E0A9C88FD767D4C6F
E2348CE16CAAE803DBA21AF5B8A44ED8B92ADB9C07D422878C63EA6163DFFA5B
FD8AD97240D760FB6667DF08A0F16FB66B2934E64A39C0D82535FC1ABC3C28F6
DD83851928AE495312AFE7F0B7C3D0990D7725B54B0D8644C01CF2BD29340E92
FDCC5D221298669CBD1F842A1BF45D59D4BCC425E3D7FECB69AEF5FF54E86B80
A6011AA0ACD1D286F7BD2CC6F995355E214BEA9DA0696F3D436BAB29C2328173
4661158DBB87A777A8C0FECA5B1DEC07197BADE6B65EBC7152E119BD58204353
4C4793FA4566107EFFF912A0E03255C11824CD079923F7296DB156A8C9134BF4
E573795C7C720A3CDBFF693602A141D436B2F7495B01F6FBA43ED1CB444AEAD2
400638034AA4D95EF5849E61EF2068A4848A27FA16EC8931456000E61E1181BF
545AD271F9D10C60C6AE8616B12998B08270B9E29464DE2725F61EC431C7023D
FB012FFB2DB2EAA1C61C06519BCD8114331FF644B79E9E96E21720B38098D513
59BF4CA62716A9289C555C1B5C05D68F762B5B2E0B9BE7F67D9EFB20B8A0A898
4DE73C07853DAD10A8805E5844A36027E2AECF4F10CA66BFAFEC17DD1CC93373
547071168AF5018B0B6A40E606207ECFE146DE6F8881F969E06207A973DF290D
29E325B6D59F363A5F4105AFDDF24CD4FABAE1B5E784638F3EB2E67C88879F69
00101C3F6DF95D7F81E6E3FE732DCC175F1FEE41D87120F52AB5EA54FD2E1666
CFA5D665F9B97531D74B56CEB8A9E1417A58C1790ABEB68F2F1B49EEB34D24B2
855294A892EC5C92D090BB460AD8844E85E25094B7CE117F343A856F27CEEB36
1CC7AC29D4048E6ACC5947AE7FB937807AC29E65353D20A57E461AC33EEBC75C
24068278B586B33A5E534B1A9ABAAFF492250074EA4CF3EF0818D8F0BA0C7428
40BF46DFCC9711A0420413D0667C7361C8ED428BC510616C34AB28BCC9ABA6F2
43F08A2FCCFC5D1BAA77AE90BF0E296E2C3A99268D7906AE12CDCEA5CE8B5FC9
5A75526CC0B72C7E122C2ED67153BC9AE380DF04FE51E7B0C5AE4363D95DC730
AD0EF34542C179668A9D5807AA22256ADED921E8711E673C67CB5086D7563C98
2A6C681813E07A8E7440FE562EEF08661E1D9CB5761595B515DEC347F0DC84AA
1B3C272792F2D9B4B11C5EA50F7584C7D931BF5BA1A39F635C87CEC31BD22D64
10F7855D66EC86193FFA19ADD7880BCE5588D2322071D443F47D6B4F3F66CE68
4B87D99A5A0D375535D153353DA6E154FF78F458A671CBE1E7136C16435BF244
6E60705C79C82EB5D40934AD496FB08999EFC6E52E56C0106E39603F25D3B946
A7850B4A4EF56B1E5CA32021F191236EA0FB315DC37D708115765F85B668D051
D49167E374DFA9078D128E745F1583EF885F6614D0D1CE1F3F27571B5C68451F
38BDD4758A54A3C6F8ADB3DC20CE95DA5B22C77227CD8EA53C51A643250FA288
4DA7B6F3D93EA1C82B6639B6090352F6E4ACD6A478701D88F8591F71ECB15CEC
FE6FA0C4C049FE9F04612DEB944271F1EA167B2103D69C11E5B6C66CB8C859FE
8DBF7D2E4B26FDE68CFE085B61212906AB7B4E4DC2FB44E8B035DC6938B09632
5C2AFE3B1742756E1DDE8E2D16D957B07713C650928ABFD08BB5BA216086D699
797884E3D06F0096BDE68F929F9FCC4E5819320BF62AA75686A8EF7A11B33281
2477A82B9B0D3B71E8AD3CD41388A69C33B7A4482BF2345419DA669BB7544636
CEF7C14F8C55620724B05B7EDA33584D9CA46B697EFE6CF01B6152DAF28F42CD
DFABA3788B04D5A3AF493625E3387AFCAFE7EFDC62F4A31CA69E7563ECC5F919
91763C850EE7F7B6A979DB2955BA8E4BCA4039D2F083DB3B256F68BB34624CDE
2A745010D76C85300691A0DABBE33109721FAFF7C9BF7D9B2E0F1F9CF5C76676
02A9C95488976ED8956EC9C1B9A9F3CE3B0F7E2DF387DF831C855D9E21908376
BCEFB52FFBA0AD0F9B56CE4043643BC582750110B16399281C79183A8D693AD8
A961C6DE94A882D27A0D9806A5D0ACFC29180CC21E375BA98DAA4C6043EC4532
937C4870CB65365D2CF81C66A72841E189EE4BC12F8882AF0652D0EE3DA63D1F
010248A498F3809036D1FBB712F2D78CE71E0C9AA2BB3A55094E4FAAB574A474
5B153A3D4AD4ED347819033CD288FAD39E440D2FA03630F9529E50BF1E6A51CB
309A34CCCEAEE87C8B3DFDFB81A9B3F0D36DCA6AC69588F51F29BB83015E3244
5C666CC22DC85F7A86FD1D0311A8D8D1F399F87B2859E66C9432E8C14E04585C
A01642BEEAAA975AE4D7977D40FBC85D4B8F40646721A9F38E916C226EB2C045
04EEB6027C835EC0F0F8091EA0250404BE75563D44B40A5D67C1A122E9E9DF7A
5692F8902FDAEED37EB2C430AD36E021CF56CA560B77137710090D8685624CAD
9E6BFDF5BB2FF6147A65F164ED0490E1126D67FE1A93D5E77275FA925CE8666B
E8FF666F97E3101881467A955FDC9864C9B85E943918D4C22F84391D35DBBD14
2EE39F130DB83BA304C931113287A3F7CA042128135D9AF672319B1C3C1FBD59
80BE72F051D6A6FC34174C461A77F000F446E594CE046052A571505F0E4922EF
04A8185830D6D47E006F893973CE8740FC82F77CCD5B2CEF7DBAA9D2A0EFBFA3
2B0A73412A362977B01FCDC95FC8E0B920D884FF7E40FE9AFDB683776B95487B
F096B4BBBA2BED724ECE2CD766C8D83E28FD65924942AA4A3064AC3D5A322D86
3A4D41DBC2F5C6E21C2184CEECE1101A10F8290CBF0D4116EA1C1DB8988785FF
E50B066A4C21E99AA660872A5EEAC307C7794B303EE066C57594AE2389DBEA5E
85CDD9D314CF686811C2022E8E0EBBA0B699EB0405FD2426EA4D698CB4757B6C
53E65BB5D42C65C7A9DA515DA23CB3834C89F769154447BE2D92229016235658
4F40E982A14EB4E6BACC81313C8E0A74A19FD184B1364CA275FC6A62A8709428
BA35305F02331212B45B9268D582A8B638B430BD0A51C607D4C4FD862F0E591C
1A1273650BBE5DA16CE10C98F5209A7C998877BE8F57DEB4D9AA46CC2EF71588
0EDBD79F25594D516AD74C54762FD393D4810EBC8AAF10F821DCFE8D503B37D5
6AF14F0FA57DA3A3365EF38470C1F0BCD693378BA20DF34D263165841DF96F90
32FCB81A44BAF77D3C294697CC8CC971B555F94E768A275A154D63E71A1D6C67
CFDC729E86FB9315B9234D2AB1D6529BFD0D4C852C5438D368B350D8420DCD34
4A164EAC0AE99AC9A2D07A1F77D2E68255EC3F7448F10DABF969653D21590661
2B1DE5DF11BEFA41CECFB00C9A6A7AE3808009E41E2B933C6AA50E1E9BC8AE00
651C8AEFC9FCE6E647FB5D6032000CF87663510D97C12386227E58DD71FD4228
A070BE013F86155C46C8F96D3CF1DE07D60DA3D0E05C3B4A6B5FBAD168B06A50
30738754199245C8AF782F76C58A8F638A2D85CC51309C866729297E3CFC075D
6F9ABB484C5D1D307E06D6ADEFC769E5F51E389520288843F373B71B233E8B96
E59A7053D1D7E17972EDFCBD700A001EBE7759818EECC03353EB0B990EE6DA34
8C65B5092EF565AE325B00DFA892FF2E7217990F6020AEB57974D38E31F97183
FFB436B7DD8C18A80EB7D43D1EFB9A8D3EA99E77F65AD1443AB10857C44B7AB8
2EB0BE22CE0CDDE525B9DE03251E192A3B436C3907AC59EA40BBB63A5A7DC56B
DF08035260ADE398AD7ED78F895AE0CE0ADC74F4BCF4FD9ABEEBE132A537D788
B884084A69BEAD6791D7458A0BC58635A1576F368FA8D2D99DCB6C31BE97F432
5FF313DDA4B7411296716D32049D31F8E85C7D4B4DAE656AEFF8B7B8C1053A57
F13B93F29800E250C98BA58B6061AE740762F9202122F156852A326C13F3675A
4FE680CB4FD1B94C875840A97F2D14D6C1EFD4D4C37F39752572225377072C53
6854A002922441AF733B6F90EFF39E37E1605AC5A3F4B45F66DFC2357B57CF40
263D66A21EE0F0C1D1A0E4BA12454F9A252CAF55B46F5A907DF9D94650DA1D5C
4CBE7E65DE6BC996F52CEC6A02D4D987D99F7B66A1C786E9463A5628A50F5163
02A7F1CDDA1FB3337774AD640B02D504018E7C11267BEB7F51B8AC2FB3326EB5
1EF125B3AA855B3AF7891595077B9FD5960896A022BC3CB4F97F4CC175F09B81
128452C576CB26479E769DE0B75150360EF0C2AD3530A8A3B0C61005BD13EBB8
4F6A707A8D1565529BC1ABE78FBFBEBAB170ECD6908CCD31FA33368E485DCBF5
24DAC34619A38FBDA43C886FC6B4D58C7349C6D577D3AB8DF830F3DC3E06BE4F
8D1283533AE54551513735E278DC928869953AE85693870179055B8D953A8062
0339D4FC9D3DCE68C408FBDE261FAC68438ACFFC7E0F12168B91ECF56ADEEF93
FF6A2D2AE5D35CB0B49BCDED51EF5B16B6A7364D38592BE0EC092C66309F6D0E
E9E73D7AC69A9F9F8C83B5D7352E92D27751D149F552DF5ED5825A79507C5C8A
725E19E744631C96C74EC15829092BE11AB890C9AFBFF608B4F3B5FB42B29F1B
DA5436480A26657A2EBA297FD9933FC6B0071E62551C1A6398F82B097726E06F
4EAC8ECD5C4B316AF63B64A131F3EDFC50F1141E56EE81CB44A03B0CE8B6CC4C
B9E6DF9F47E957E47D4C5C51508C0825537EADCE33E9C3432AA0C0E7890FCFAA
54E1D95E922165EAECC89E7E18A7E36A269D68D918B4E64246066C88F009D478
D17DEAD4CE93F288531DA3CDD4F0B040CC82544B95E6EA26F002357CCF6E3D7D
F52FF5C84DB56CAE8F64D9DE498A54C28558E34F2EBCB8CD3F3F2AB2531D3D74
6A1DC97F93E312DC04158ABA06E9E55BE5A8DE5E0F3D8087188C8055B4C6B7F1
AC373AB1563F756E269BF3D90BDFB9EF3E62E610906E1928A4FF14665EC4DF2F
1703DEDC813E3BD7EFC9CDAD47E0DAF19D2C0701F2C027AE2986BE7715E0B0F4
15D4501FC252AB0608A9BF79FC085AE7F9340C073817296A900E1AB7033D4FD5
21AB67D4AD5E29DC4F20283A7864A4D6CA60908CE2D544E7C3C894A5635FDB42
989443A0DB0AC9281BA74DD27B1B573911DF90AE01984A865A3DB95125594779
C77DFFEB5699712598DD86F94CD032D14E0B71A92890D3EDE1443A3E30968AC6
33A004ACE18A56520853F64A4244C7B479530A8C5D18E47B38D67BB508A58710
6B5753081BF59EDC0793542987F1BC26553DC19CFC6EF456DA872DEAA95884C5
D4D8E503E6BFCF252AA8E144F2A24F21A08CBD05C4F65C9A9636B102ED4ED535
2A3C0A4FF4A039C3ED2C9E00C3E680C4A8FCFFBD90E871E5075FEB7661340E96
44DDBD719F2D4DD690457568802749D1E6A1EB15F64A85414B1680BCE311E8AC
1C08758B6453DD440D8A9816EDEA14E09224144E91276B842280E04A0BBA4E68
CEC5A9603A7F56551C2B11DADF1F4810C734BDEAE930B5DE4556DA67981B820B
CD2BC5A0FB8D8790D2666E0AE5558B1D2200534E83F7851F3D9482A2E8908F92
3BA87358A66968605B3D53DA4AB1D93389BB689B0822526D9F240952001DD054
09B9BE40559FA3FA4F216F022D50C408ACB34021AAE5F2B257DEF13A25F02701
234CA72E44287FA9D88D7EF4F768C35A65CDA6B411323A501BF3848AFE448DAC
2240C6CDB5208EB259D89A8F1BE43B39F911F55D88B5822E443C898E7ABC7EF5
B3953C2EC6DDAF174DCED0BF9353A2713774A8DF9A9091AA553D30361C9EA580
56F4993B29EDF2D3F3F1D6DBDB31728A84CB10019CE7407FE4201FC9A9D70F9E
8FF56B5CE83D2810A507AE941431A5D9B513A6F55FDD452D6309492C76D9C5C6
DD9D8F6CCD27BD71AFFF7FCE5D34DC355A066BCC3C9282EC971521260CF0E12E
936517B05ED0108AC13A671654A2EFD5FB71109B16B3B4274BCE4EBD624F288D
9E90D28D18D27FE4628444E76D3EEA619AE9476D181B4AC774AA62BC6D8AE5F0
84F90982D5EE1D24AFB37703671B2493AFFA4C51245086BE865627AE7D0E7759
179D509827104F840BD2C720F35D46D9C8338C0F8C03ECAC14E9BF044A04A96E
177D1C5CE74D34AFF22F3937F05A1B54F46CE9C5F2D60907DB971F5B2F8E5B9D
3ABA4ABA144209E6845B85A64F3A97CDC9B6AA5BD9E68F726F511255CDD9394C
0A0332C27139192F0C5D79668CA0CC0CBBB14E4CDD707F11F048CD6E0756D90A
F2EFCD882A296CF97148364A31FE8D7B5250C8BBC7E9F39EFC55B4662EC31535
416F2F90DDAC955FBB297FD4829BB73079FA91012386544B98E65BABA975C754
36B64848E3903D03C59BE0DB94E12E600E82A72EDCDEB4AB2260EE95F46568EB
D0A7002D21C9BAE538CF8A347A2751868343EE4FB3730984335FB2B5B88DFEE9
66A8062C26E4B834F568CA6164D6FE9AEB126502B943DD390A50B93D1CDABCD3
C96FACE03115D56C6BE19F06CF7DDC375238E238B448D27D64FA49ADCC0A5B24
AEF014B5D48F6CC493AD69E74DF47FEA376C6EF4B14C2FB71ED0F42E09F1651C
EAEE97341F26A6591B83FE723C448AA04AE504D6C34BCAECD27DE4B247678C7E
C51DBF53850EE7E615C7A01BC705F714B7B0C80B7AB79C42C24C036C6718E5A3
6E1475F07D9F7035866A73B4D0A67807A03FB61352F73A349AFFE3CCF566F457
6A62FA32004F3FE6A15E7B25C6E9AB2D1DBC9964E6903AEB408F09A0427933F3
4E92753419A9FE79513A2E39FAA295A92292D521E3A95FBBB77AD659D4E03D2B
39EE02738A10059514A8B51A35D3302C25891B90F74EBDB362E1017C676F0A0A
9CB67C9794A27FC7F0ACD189AE59C8A75A5E9BED84A5FB6EE5DC1F74A620E559
51D8C5CDDC4B37CAE2AF70C48B6C306BE826EBE8D22DF714D1F2FCA10369A266
F5DA86D65F730262B0035E5FF68817C93CE0FBBC201B593D955E40C99E235D45
7F70F497A8A11748AAA70FEA09AD8F5BD1A01E06D56BB6059DBEF8AC8AC5FB0C
59B5CA3C447022EA6AE6F928DA7C9A6A1F322C5D53CE905829C41408CF7449C2
69FF41A9B83869D7F230C78871C22933C991EAE40EBC97D8DB082B20E4895E49
6D6EE9D22FD9B395CA79073C08C0053E3C26124538544D9C68717076746A8D72
7DC34AE353D29983338A2D1998A0D62BFC296E433A8E48CA90B999B298609587
1164C2A65BC00D0F124A8EACCCCDA7A7F65D5AA4DBF70A273B6CB918B00F6ECC
0131BA9461BFC53357E09E0A3C615E79A26261D83F71B944DAAAE74A4B7484AB
D22B4BB40D4E9038E721EFB5F672796A3C961C298B29ED896A27E389D134C21E
7BED9DBB0FBB3AE2ED4A661992BCC8E4976F842785431AAD804360FBE8A134E4
3CA9D26F8571E18D0F27F70ECAF659A99FB7955E0F4D8690447CA37F42A05D15
E1D6559A1C95CA424A643DD58D0416A374091D94CD7A48859EEB4A461A6A436F
D07DD5A94E7D5B033D2AD99FDA4E7373A1D6CFD11DE94DF6537F25F5CFA1428F
9A126E21D819AE1A044510186FC8A9D51C20D922F3279A85E31C1F34B6B240C3
000775B140120C6E697D7BC14AE22F87EC6885C3CA40E718BAD7688C8A0B3E9F
49652FE7D0DE406B2EB70F039AA8B10C7601C4929B2971A9A3CF98F52F9FE122
CCD2D944BE6F68EF6F4F8EBEF51AEB1DFAC87C164F94B36511BF120D126D6824
01736A019ABF0BA4355854251D381828F2D5C8460F3B066EEA447009C01DB22E
33764CBBFDC5C74CB881098E7586725777144FC38DCBAB71413A26068EE3EC6E
53300BA5BEDBE53E5FD61E6D2E390C7E1D82454093264E8A2013AA0C91058031
B52A08D996CF2C82993DE9497AF91D4AF8C99E68577589F98564AB36FA448901
E671920A8DEC9535AFA9038AA1D528C4B31ECC27A505A5B83E4ACA119C6D3BF7
1AD9B21318030B2F1F69F132E3DBC5264A4AD516AD4736CED6E8CA4C3352C78B
2B836CA994A67BD63576593FAE07433051723DE3A67FEAEDA3CF10F66F7DB936
D96BD0A813A5C40B144EE897A5CC701B0297E190B6999EE9808A54F86AE2C05B
0FC4056944066CDBADCE78A0524D6F190B155120749CA84957FEBF447B748BC6
27B3AEE460D4D5FCF042B7CCF4A4DC92110AC09B16669CBFA4CDA713606FC086
97E8EF90EF2BFC8BF6C811FBEA5163C68B95C0B65EA87B9D12942EA0DE78FCCE
9DD86341497DF3F0CD388BB386658FB6D774A46E9857E0091F3B2C6E016BC24D
037FADA56418D223E672609C891E32E96BAEB77C7C568F26FE03B720F5F2D875
9F1C5BF185C4B1DB2E6BBA48F4BD5F6457D92B701E7DCDF0ABE154A9CDE3BC17
8F1F1CF521081036019C20E3A8AA6958D08C3EA3275CCE2F96F0FDACCB50ACB9
37204C55EC41CEDA3AF577FB778E606C7C2EE814E8D3E1C250DE4D3E587AFDFF
A1266218FC1D9A386D00BE86EB2433531F5A978031775862254994315B01C937
CCAF1C5DD69F96F5D64DD288087639B02BDD29F9B96C5B4F525DDABE245371DD
4717AC198F6477E1A2E6CA5CC2AC20FC94314212F5146721FF639C6CEB6936DA
A7ABE5348153D0DBEC6F96F61B6B7E53DD82107EB85F5D2FD094D82F4F446CEE
B64340FCE74AD83B2082952ECA69C53ED64B6F03FE3F54695FEEB8EE1D61C6DF
87F7214F97C165F4962E5B78500E7F4E684AD4F4F575F06FB275D449BAB97B06
BBC205D8FFE660C682A8CED9E1F7907214AB2E6BC7C830885EA32605B069ACE8
66EBFA95DA16774EDDCA73685D1B145770BABEBCFB3989284B27B7E698E12064
147A2EF3F2883F85C9C0E927DAFFBC9450E1B6E918726DD37B5CDA55E6D0D8A5
C3B5ED376F4772DF45D45C4CF18BEB4811CF1B9B3D920BA4A98A80F8DABC91BA
362EA6A74FA33DDF518B09564FED9F04D4312CD988EBA55DFD3145438A223943
488699B3D16846B51F2BB650790EB63BB9ABB2B3EE27C62B1B01FBA662B70542
DBB61743DC569337082176ECBAD417354A5F900EA0BB5479162ED7ECCCD71AE8
3B3EE296F3D14D289B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%/PSTricksDotFont exch definefont
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 438 2022-01-31 17:45:26Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2018/12/16 $
% Version         : 0.65 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 216 2021-09-10 12:28:13Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def

/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: l3backend-dvips.pro 0 0
%%
%% This is file `l3backend-dvips.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% l3backend-header.dtx  (with options: `header,dvips')
%% 
%% Copyright (C) 2019-2022 The LaTeX Project
%% 
%% It may be distributed and/or modified under the conditions of
%% the LaTeX Project Public License (LPPL), either version 1.3c of
%% this license or (at your option) any later version.  The latest
%% version of this license is in the file:
%% 
%%    https://www.latex-project.org/lppl.txt
%% 
%% This file is part of the "l3backend bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%% 
%% File: l3backend-header.dtx
/color.sc { } def
TeXDict begin
/TeXcolorseparation { setcolor } def
end
true setglobal
/pdf.globaldict 4 dict def
false setglobal
/pdf.cvs { 65534 string cvs } def
/pdf.dvi.pt { 72.27 mul Resolution div } def
/pdf.pt.dvi { 72.27 div Resolution mul } def
/pdf.rect.ht { dup 1 get neg exch 3 get add } def
/pdf.linkmargin { 1 pdf.pt.dvi } def
/pdf.linkdp.pad { 0 } def
/pdf.linkht.pad { 0 } def
/pdf.rect
  { /Rect [ pdf.llx pdf.lly pdf.urx pdf.ury ] } def
/pdf.save.ll
  {
    currentpoint
    /pdf.lly exch def
    /pdf.llx exch def
  }
    def
/pdf.save.ur
  {
    currentpoint
    /pdf.ury exch def
    /pdf.urx exch def
  }
    def
/pdf.save.linkll
  {
    currentpoint
    pdf.linkmargin add
    pdf.linkdp.pad add
    /pdf.lly exch def
    pdf.linkmargin sub
    /pdf.llx exch def
  }
    def
/pdf.save.linkur
  {
    currentpoint
    pdf.linkmargin sub
    pdf.linkht.pad sub
    /pdf.ury exch def
    pdf.linkmargin add
    /pdf.urx exch def
  }
    def
/pdf.dest.anchor
  {
    currentpoint exch
    pdf.dvi.pt 72 add
    /pdf.dest.x exch def
    pdf.dvi.pt
    vsize 72 sub exch sub
    /pdf.dest.y exch def
  }
    def
/pdf.dest.point
  { pdf.dest.x pdf.dest.y } def
/pdf.dest2device
  {
    /pdf.dest.y exch def
    /pdf.dest.x exch def
    matrix currentmatrix
    matrix defaultmatrix
    matrix invertmatrix
    matrix concatmatrix
    cvx exec
    /pdf.dev.y exch def
    /pdf.dev.x exch def
    /pdf.tmpd exch def
    /pdf.tmpc exch def
    /pdf.tmpb exch def
    /pdf.tmpa exch def
    pdf.dest.x pdf.tmpa mul
      pdf.dest.y pdf.tmpc mul add
      pdf.dev.x add
    pdf.dest.x pdf.tmpb mul
     pdf.dest.y pdf.tmpd mul add
     pdf.dev.y add
  }
    def
/pdf.bordertracking false def
/pdf.bordertracking.begin
  {
    SDict /pdf.bordertracking true put
    SDict /pdf.leftboundary undef
    SDict /pdf.rightboundary undef
    /a where
      {
        /a
          {
            currentpoint pop
            SDict /pdf.rightboundary known dup
              {
                SDict /pdf.rightboundary get 2 index lt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.rightboundary exch put }
            ifelse
            moveto
            currentpoint pop
            SDict /pdf.leftboundary known dup
              {
                SDict /pdf.leftboundary get 2 index gt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.leftboundary exch put }
            ifelse
          }
        put
      }
    if
  }
    def
/pdf.bordertracking.end
  {
    /a where { /a { moveto } put } if
    /x where { /x { 0 exch rmoveto } put } if
    SDict /pdf.leftboundary known
      { pdf.outerbox 0 pdf.leftboundary put }
    if
    SDict /pdf.rightboundary known
      { pdf.outerbox 2 pdf.rightboundary put }
    if
    SDict /pdf.bordertracking false put
  }
    def
  /pdf.bordertracking.endpage
{
  pdf.bordertracking
    {
      pdf.bordertracking.end
      true setglobal
      pdf.globaldict
        /pdf.brokenlink.rect [ pdf.outerbox aload pop ] put
      pdf.globaldict
        /pdf.brokenlink.skip pdf.baselineskip put
      pdf.globaldict
        /pdf.brokenlink.dict
          pdf.link.dict pdf.cvs put
      false setglobal
      mark pdf.link.dict cvx exec /Rect
        [
          pdf.llx
          pdf.lly
          pdf.outerbox 2 get pdf.linkmargin add
          currentpoint exch pop
          pdf.outerbox pdf.rect.ht sub pdf.linkmargin sub
        ]
      /ANN pdf.pdfmark
    }
  if
}
  def
/pdf.bordertracking.continue
  {
    /pdf.link.dict pdf.globaldict
      /pdf.brokenlink.dict get def
    /pdf.outerbox pdf.globaldict
      /pdf.brokenlink.rect get def
    /pdf.baselineskip pdf.globaldict
      /pdf.brokenlink.skip get def
    pdf.globaldict dup dup
    /pdf.brokenlink.dict undef
    /pdf.brokenlink.skip undef
    /pdf.brokenlink.rect undef
    currentpoint
    /pdf.originy exch def
    /pdf.originx exch def
    /a where
      {
        /a
          {
            moveto
            SDict
            begin
            currentpoint pdf.originy ne exch
              pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
    /x where
      {
        /x
          {
            0 exch rmoveto
            SDict
            begin
            currentpoint
            pdf.originy ne exch pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
  }
    def
/pdf.breaklink
  {
    pop
    counttomark 2 mod 0 eq
      {
        counttomark /pdf.count exch def
          {
           pdf.count 0 eq { exit } if
           counttomark 2 roll
           1 index /Rect eq
             {
               dup 4 array copy
               dup dup
                 1 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add sub
                 3 exch put
               dup
                 pdf.outerbox 2 get
                 pdf.linkmargin add
                 2 exch put
               dup dup
                 3 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add add
                 1 exch put
               /pdf.currentrect exch  def
               pdf.breaklink.write
                 {
                   pdf.currentrect
                   dup
                     pdf.outerbox 0 get
                     pdf.linkmargin sub
                     0 exch put
                   dup
                     pdf.outerbox 2 get
                     pdf.linkmargin add
                     2 exch put
                   dup dup
                     1 get
                     pdf.baselineskip add
                     1 exch put
                   dup dup
                     3 get
                     pdf.baselineskip add
                     3 exch put
                   /pdf.currentrect exch def
                   pdf.breaklink.write
                  }
                1 index 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                2 index 1 get sub
                pdf.baselineskip div round cvi 1 sub
                exch
              repeat
              pdf.currentrect
              dup
                pdf.outerbox 0 get
                pdf.linkmargin sub
                0 exch put
              dup dup
                1 get
                pdf.baselineskip add
                1 exch put
              dup dup
                3 get
                pdf.baselineskip add
                3 exch put
              dup 2 index 2 get  2 exch put
              /pdf.currentrect exch def
              pdf.breaklink.write
              SDict /pdf.pdfmark.good false put
              exit
            }
            { pdf.count 2 sub /pdf.count exch def }
          ifelse
        }
      loop
    }
  if
  /ANN
}
  def
/pdf.breaklink.write
  {
    counttomark 1 sub
    index /_objdef eq
      {
        counttomark -2 roll
        dup wcheck
          {
            readonly
            counttomark 2 roll
          }
          { pop pop }
        ifelse
      }
    if
    counttomark 1 add copy
    pop pdf.currentrect
    /ANN pdfmark
  }
    def
/pdf.pdfmark
  {
    SDict /pdf.pdfmark.good true put
    dup /ANN eq
      {
        pdf.pdfmark.store
        pdf.pdfmark.dict
          begin
            Subtype /Link eq
            currentdict /Rect known and
            SDict /pdf.outerbox known and
            SDict /pdf.baselineskip known and
              {
                Rect 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                Rect 1 get sub
                pdf.baselineskip div round cvi 0 gt
                  { pdf.breaklink }
                if
              }
            if
          end
        SDict /pdf.outerbox undef
        SDict /pdf.baselineskip undef
        currentdict /pdf.pdfmark.dict undef
      }
    if
    pdf.pdfmark.good
      { pdfmark }
      { cleartomark }
    ifelse
  }
    def
/pdf.pdfmark.store
  {
    /pdf.pdfmark.dict 65534 dict def
    counttomark 1 add copy
    pop
      {
        dup mark eq
          {
            pop
            exit
          }
          {
            pdf.pdfmark.dict
            begin def end
          }
        ifelse
      }
    loop
}
  def
%% 
%%
%% End of file `l3backend-dvips.pro'.

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% $Id: pst-text.pro 891 2018-12-29 19:42:20Z herbert $
%
% PostScript header file pst-text.pro
% Version 1.02, 2018-12-28 (hv)
% For distribution, see pstricks.tex.
%
/tx@TextPathDict 45 dict def
tx@TextPathDict begin
%
% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def
%
/movetoproc { continue { @movetoproc } { pop pop } ifelse } def
%
/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def
%
/linetoproc { continue { @linetoproc } { pop pop } ifelse } def
%
/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def
%
/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def
%
% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def
%
/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def
%
/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def
%
%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint
    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
/warp {
    1 index
    1.4 mul
    cos 2 add
    mul
} def
/warpmove{
    2 index {
        newpath
    } if
    warp moveto
    pop false
} def
/warpline { warp lineto } def
/warpcurve {
    6 2 roll warp
    6 2 roll warp
    6 2 roll warp
    curveto
} def
/warpit {
    true
    { warpmove } { warpline } { warpcurve } { closepath } pathforall
    pop
} def
%
/circle {
    exch neg
    % .5 mul
    90 add
    dup cos 2 index mul
    3 1 roll
    sin mul
} bind def

/circmove{
    2 index { newpath } if
    circle moveto
    pop false
} bind def

/circline { circle lineto } bind def

/circcurve {
    6 2 roll circle
    6 2 roll circle
    6 2 roll circle
    curveto
} bind def

/circit { true { circmove } { circline } { circcurve } { closepath } pathforall pop } bind def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: pst-blur.pro 0 0
%%
%% This is file `pst-blur.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% pst-blur.dtx  (with options: `prolog')
%% 
%% IMPORTANT NOTICE:
%% 
%% For the copyright see the source file.
%% 
%% Any modified versions of this file must be renamed
%% with new filenames distinct from pst-blur.pro.
%% 
%% For distribution of the original source see the terms
%% for copying and modification in the file pst-blur.dtx.
%% 
%% This generated file may be distributed as long as the
%% original source files, as listed above, are part of the
%% same distribution. (The sources need not necessarily be
%% in the same archive or directory.)
%% $Id: pst-blur.dtx,v 2.0 2005/09/08 09:48:33 giese Exp $
%%
%% Copyright 1998-2007 Martin Giese, mgiese@risc.uni-linz.ac.at
%%                     Herbert Voss, voss@pstricks.de
%%
%% This file is under the LaTeX Project Public License
%% See CTAN archives in directory macros/latex/base/lppl.txt.
%%
%% DESCRIPTION:
%%   `pst-blur' is a PSTricks package for blurred shadows
%%
/tx@PstBlurDict 60 dict def
tx@PstBlurDict begin
/Iterate {
  /SegLines ED
  /ThisB ED /ThisG ED /ThisR ED
  /NextB ED /NextG ED /NextR ED
  /W 2.0 BlurRadius mul def
  /WDec W SegLines div def
  /RInc NextR ThisR sub SegLines div def
  /GInc NextG ThisG sub SegLines div def
  /BInc NextB ThisB sub SegLines div def
  /R ThisR def
  /G ThisG def
  /B ThisB def
  SegLines {
    R G B
    sqrt 3 1 roll sqrt 3 1 roll sqrt 3 1 roll
    setrgbcolor
    gsave W setlinewidth
    stroke grestore
    /W W WDec sub def
    /R R RInc add def
    /G G GInc add def
    /B B BInc add def
  } bind repeat
} def
/BlurShadow {
  Shadow
  /BlurSteps ED
  /BlurRadius ED
  dup mul /BEnd ED dup mul /GEnd ED dup mul /REnd ED
  dup mul /BBeg ED dup mul /GBeg ED dup mul /RBeg ED
  RBeg REnd add 0.5 mul /RMid ED
  GBeg GEnd add 0.5 mul /GMid ED
  BBeg BEnd add 0.5 mul /BMid ED
  /OuterSteps BlurSteps 2 div cvi def
  /InnerSteps BlurSteps OuterSteps sub def
  1 setlinejoin
  RMid GMid BMid REnd GEnd BEnd OuterSteps Iterate
  gsave RBeg sqrt GBeg sqrt BBeg sqrt setrgbcolor fill grestore
  clip
  0 setlinejoin
  RMid GMid BMid RBeg GBeg BBeg InnerSteps Iterate
} def
end

%%EndProcSet
%%BeginProcSet: pst-func.pro 0 0
%% $Id: pst-func.pro 861 2018-12-13 20:40:06Z herbert $
%%
%% This is file `pst-func.pro',
%%
%% IMPORTANT NOTICE:
%%
%% Package `pst-func'
%%
%% Herbert Voss <hvoss@tug.org>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% DESCRIPTION:
%%   `pst-func' is a PSTricks package to plot special math functions
%%
%%
%% version 0.17 / 2018-12-13  Herbert Voss
%
/tx@FuncDict 100 dict def
tx@FuncDict begin
%
/eps1 1.0e-05 def
/eps2 1.0e-04 def
/eps5 1.0e-05 def
/eps8 1.0e-08 def
%
/PiHalf 1.57079632679489661925640 def
/CEuler 0.5772156649 def % Euler-Mascheroni constant
%
/factorial { % n on stack, returns n! 
  dup 32 gt { pop 1e32 } {
    dup 0 eq { 1 }{ 
      dup 1 gt { dup 1 sub factorial mul } if }
    ifelse } ifelse 
} def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/Pascal [
  [                   1                   ] % 0
  [                 1   1                 ] % 1
  [               1   2   1               ] % 2
  [             1   3   3   1             ] % 3
  [           1   4   6   4   1           ] % 4
  [         1   5  10  10   5   1         ] % 5
  [       1   6  15  20  15   6   1       ] % 6
  [     1   7  21  35  35  21   7   1     ] % 7
  [   1   8  28  56  70  56  28  8    1   ] % 8
  [ 1   9  36  84 126 126  84  36  9    1 ] % 9
] def
%
/GetBezierCoor { 				% t on stack
  10 dict begin					% hold all local
  /t ED
  /t1 1 t sub def				% t1=1-t
  /Coeff Pascal BezierType get def		% get the coefficients
    0 0						% initial values for x y
    BezierType -1 0 {				% BezierType,...,2,1,0
      /I ED					% I=BezierType,...,2,1,0
      /J BezierType I sub def			% J=0,1,2,...,BezierType
      /T t I exp Coeff J get mul def		% coeff(J)*t^I
      /T1 t1 J exp def				% t1^J  
      Points I dup add 1 add get		% y(2*I+1)
      T mul T1 mul add				% the y coordinate
      exch					% y x	
      Points I dup add get			% x(2*I)
      T mul T1 mul add				% the x coordinate
      exch					% x y	
    } for					% x y on stack
  end
} def

/BezierCurve { % on stack [ coors psk@plotpoints BezierType
%  10 dict begin
  /BezierType ED                        % 2,3,4,5,6,...
  1 exch div /epsilon ED                % step for Bezier =1/plotpoints
  ]                                     % [ yi xi ... y3 x3 y2 x2 y1 x1 y0 x0]
  ps@ReverseOrderOfPoints               % [y0 x0 y1 x1 ... yi xi]
  /Points ED 				% save Points array
  epsilon GetBezierCoor 		% next Bezier point
  Points 0 get Points 1 get 		% starting point
  ArrowA lineto 
  epsilon epsilon 1 epsilon sub { % on stack is the loop variable
    GetBezierCoor lineto 
  } for 
  1 epsilon sub GetBezierCoor  
  1 GetBezierCoor  
  ArrowB lineto moveto
%  end
} def

/Bernstein { % on stack tStart tEnd plotpoints i n
  12 dict begin				% hold all local
  /envelope ED				% plot envelope?
  /n ED 
  /i ED
  /ni n i sub def  
  /epsilon ED				% step=1/plotpoints
  /tEnd ED
  /tStart ED
%
% B_{i,n}(t)=\binom{n}{i}t^i(1-t)^{n-i}      (Bernstein)
% f_n(x)=\frac{1}{\sqrt{\pi n\cdot x(1-x)}}  (envelope)
%
  n i MoverN /noveri ED			% \binom{n}{i}
  [					% for the array of points
  tStart epsilon tEnd {
    dup dup /t ED			% leave one on stack
    neg 1 add /t1 ED			% t1=1-t
    envelope 
      { t t1 mul 4 mul PiHalf mul n mul sqrt 1 exch Div }	% envelope
      { noveri t i exp mul t1 ni exp mul } ifelse 	% t f(t)
    ScreenCoor				% convert to screen coor
  } for
  end
  false /Lineto /lineto load def Line
} def
%%
/Si { % integral sin from 0 to x (arg on stack)
  10 dict begin				% hold all local
  dup 0 eq 
  { pop 0 } 
  { 
    /arg exch def  % x
    /arg2 arg dup mul def
    /Sum arg def   %
    /sign -1 def   
    /I 3 def
    /Frac arg2 arg mul 6 div def
    { %  a sequence of x - x^3/(3*3!) + x^5/(5*5!) -...+...
      Frac I div sign mul
      dup abs eps5 lt { pop exit } if
      Sum add /Sum exch def
      /sign sign neg def
      /I I 2 add def
      Frac arg2 mul I 1 sub I mul div /Frac ED
%    arg I Power dup abs 1e30 gt { pop exit } if
%    I factorial div I div sign mul 
%    dup abs eps8 lt { pop exit } if 
%    Sum add /Sum exch def
%    /sign sign neg def
%    /I I 2 add def
   } loop
   Sum
  } ifelse
  end
} def
%
/si { % integral sin from x to infty -> si(x)=Si(x)-pi/2
  Si PiHalf sub
} def
%
/Ci { % integral cosin from x to infty (arg on stack)
  10 dict begin				% hold all local
  abs /arg exch def
  arg 0 eq { 0 } { 
    /arg2 arg dup mul def 
    /Sum CEuler arg ln add def
    /sign -1 def
    /I 2 def
    /Frac arg2 2 div def % first fraction
    { Frac I div sign mul
      dup abs eps5 lt { pop exit } if
      Sum add /Sum exch def
     /sign sign neg def
     /I I 2 add def
     Frac arg2 mul I 1 sub I mul div /Frac ED
    } loop
    Sum
  } ifelse
  end
} def
%
/ci { % integral cosin from x to infty -> ci(x)=-Ci(x)+ln(x)+CEuler
  dup Ci neg exch abs ln add CEuler add
} def
%
/MaxIter 255 def
/func { coeff Derivation FuncValue } def
/func' { coeff Derivation 1 add FuncValue } def
/func'' { coeff Derivation 2 add FuncValue } def
%
/NewtonMehrfach {% the start value must be on top of the stack
  /Nx exch def 
  /Iter 0 def
  {
    /Iter Iter 1 add def
    Nx func /F exch def % f(Nx)
    F abs eps2 lt { exit } if
    Nx func' /FS exch def % f'(Nx) 
    FS 0 eq { /FS 1.0e-06 def } if
    Nx func'' /F2S exch def % f''(Nx)
    1.0 1.0 F F2S mul FS dup mul div sub div /J exch def
    J F mul FS div /Diff exch def 
    /Nx Nx Diff sub def
    Diff abs eps1 lt Iter MaxIter gt or { exit } if 
  } loop 
  Nx % the returned value ist the zero point
} def

/Steffensen {% the start value must be on top of the stack
  /y0 exch def % the start value
  /Iter 0 def   /MaxIter 200 def
  { pstack
    y0 func /F exch def
    F abs eps2 lt { exit } if
    y0 F sub /Phi exch def
    Phi func /F2 exch def
    F2 abs eps2 le { exit }{
      Phi y0 sub dup mul Phi F2 sub 2 Phi mul sub y0 add Div /Diff exch def
      y0 Diff sub /y0 exch def
      Diff abs eps1 le { exit } if
    } ifelse
    /Iter Iter 1 add def
    Iter MaxIter gt { exit } if
  } loop
  y0 28 mul % the returned value ist the zero point
  0  
  3 0 360 arc gsave 0 0 1 setrgbcolor fill grestore 1 setlinewidth stroke
} def 
%
/Horner {% x [coeff] must be on top of the stack
  aload length
  dup 2 add -1 roll
  exch 1 sub {
    dup 4 1 roll
    mul add exch
  } repeat
  pop % the y value is on top of the stack
} def
%
/FuncValue {% x [coeff] Derivation must be on top of the stack
  {
    aload 			% a0 a1 a2 ... a(n-1) [array]
    length                      % a0 a1 a2 ... a(n-1) n
    1 sub /grad exch def        % a0 a1 a2 ... a(n-1) 
    grad -1 1 {                 % for n=grad step -1 until 1
      /n exch def               % Laufvariable speichern
      n                         % a0 a1 a2 ... a(n-1) n
      mul                       % a0 a1 a2 ... a(n-1)*n 
      grad 1 add                % a0 a1 a2 ... a(n-1)*n grad+1 
      1 roll                    % an*na0 a1 a2 ... a(n-2)
    } for
    pop                         % loesche a0
    grad array astore           % [ a1 a2 ... a(n-2)]
  } repeat
  Horner
} def
%
/FindZeros { % dxN dxZ must be on top of the stack (x0..x1 the intervall) => []
  12 dict begin 
  /dxZ exch def /dxN exch def
  /pstZeros [] def 
  x0 dxZ x1 { % suche Nullstellen
    /xWert exch def
    xWert NewtonMehrfach 
    %xWert Steffensen 
    /xNull exch def 
    pstZeros aload length /Laenge exch def % now test if value is a new one
    Laenge 0 eq 
      { xNull 1 }
      { /newZero true def
        Laenge {
	  xNull sub abs dxN lt { /newZero false def } if
        } repeat
	pstZeros aload pop
        newZero { xNull Laenge 1 add } { Laenge } ifelse } ifelse
    array astore 
    /pstZeros exch def
  } for
  pstZeros  % the end array is now on the stack
  end
} def
%
/Simpson { % on stack must be a b M useXVal   --- simple version ---
% /SFunc must be defined 
  /useX ED  % for algebraic functions which uses f(x)
  /M ED /b ED /a ED
  /h b a sub M 2 mul div def
  /s1 0 def
  /s2 0 def
  1 1 M {
    /k exch def
    /xVal k 2 mul 1 sub h mul a add def
    /s1 s1 xVal useX { /x exch def } if SFunc add def
  } for
  1 1 M 1 sub {
    /k exch def
    /xVal k 2 mul h mul a add def
    /s2 s2 xVal useX { /x exch def } if SFunc add def
  } for
  /I a useX { /x exch def } if SFunc b useX { /x exch def } if SFunc add s1 4 mul add s2 2 mul add 3 div h mul def
} def
%
%
/LogGamma { 5 dict begin	% z on stack
  /z ED
  /sum 0 def
  /k 1 def
  {
    z k div dup 1 add ln sub dup
    abs eps8 lt { pop exit } if
    sum add /sum exch def
    /k k 1 add def
  } loop
  sum z ln sub CEuler z mul sub
  end 
} def
%
/ChebyshevT { 
  5 dict begin	% z on stack
  /xtmp exch def
  /n exch def
  0 0 1 n .5 mul floor {
     /k exch def
     xtmp xtmp mul 1 sub k exp
     xtmp n 2 k mul sub exp mul
     n 2 k mul MoverN mul
     add
  } for
  end
} def
%
/ChebyshevU {
  5 dict begin	% z on stack
  /xtmp exch def
  /n exch def
  0 0 1 n .5 mul floor {
    /k exch def
    xtmp xtmp mul 1 sub k exp
    xtmp n 2 k mul sub exp mul
    n 1 add 2 k mul 1 add MoverN mul
    add
  } for
  end
} def
%
/vasicek{           %density=sqrt((1-R2)/R2)*exp(1/2*(norminv(x)2 - (1/sqrt(R2)*((sqrt(1-R2)*norminv(x)-norminv(pd)))2))
  2 dict begin
  /pd where { pop }{ /pd 0.22 def } ifelse    % element of (0,1) probability of default of portfolio  
  /R2 where { pop }{ /R2 0.11 def } ifelse    % element of (0,1) R_Squared of portfolio
  dup                 % x   x
  norminv             % x   norminv(x)
  dup mul             % x   norminv(x)^2
  exch                % norminv(x)2   x
  norminv             % norminv(x)2   norminv(x)
  1 R2 sub sqrt mul   % norminv(x)2   sqrt(1-R2)*norminv(x)
  pd norminv sub      % norminv(x)2   sqrt(1-R2)*norminv(x)-norminv(pd)
  R2 sqrt div         % norminv(x)2   1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd))
  dup mul             % norminv(x)2  (1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2
  sub                 % norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2
  2 div               % 1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)
  ENeperian exch exp  % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)
  1 R2 sub            % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)   1-R2
  R2 div              % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)   (1-R2)/R2
  sqrt                % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)   sqrt((1-R2)/R2)
  mul                 % sqrt((1-R2)/R2)*exp(1/2*(norminv(x)2 - (1/sqrt(R2)*((sqrt(1-R2)*norminv(x)-norminv(pd)))2))
  end
} def
%end{vasicek density}
%
end 
%
/arraySum { % on stack the array
  5 dict begin
  dup length 0 eq 
    {} 
    { /xArray exch def
      /xSum 0 def
      /i 0 def
      xArray length {
        /xSum xSum xArray i get add def
        /i i 1 add def
      } repeat
    } ifelse     
  xSum
  end
} def
%
/arrayProd { % on stack the array
  5 dict begin
  dup length 0 eq 
    {} 
    { /xArray exch def
      /xProd 1 def
      /i 0 def
      xArray length {
        /xProd xProd xArray i get mul def
        /i i 1 add def
      } repeat
    } ifelse     
  xProd
  end
} def
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%% Global defined
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def
%
% cxexp   z^k with k as a natural number
/cxexp { % z k
  3 dict begin
  dup 0 eq { pop pop [1 0] }{
    /k ED
    /z ED
    /sol [1 0] def
    k { sol z cxmul /sol ED } repeat  
    sol } ifelse
  end
} def
%

%%EndProcSet
%%BeginProcSet: pst-grad.pro 0 0
%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfHrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def}
bind def

 /pgfVrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto }
bind def} bind def

 /pgfArgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1
add def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff
div 2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index
14 index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke
4 -1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1rgb{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRrgb} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2rgb{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfRrgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1
add def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def
/pgfcircy pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
8 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index
6 index sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff {
3 index 3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360
arc closepath stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll 4 index add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add
def /pgfcircy pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark
exch pop }bind def

 /pgfHcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 moveto dup 6 index lineto } bind def}
bind def

 /pgfVcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 exch moveto dup 6 index exch lineto
} bind def} bind def

 /pgfAcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 2 mul
1 add def 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff
div 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div
pgfheight 12 index 12 index 12 index 12 index 18 index pgfdiff { 4
index 4 index 4 index 4 index setcmykcolor pgfdir stroke 5 -1 roll
9 index add 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6
index add 5 -1 roll .5 sub } repeat mark 19 1 roll cleartomark exch
pop }bind def

 /pgfR1cmyk{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRcmyk} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2cmyk{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setcmykcolor
fill pop}bind def

 /pgfRcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 11 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 11 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 10 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
10 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 3 index
8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 11 index 11
index 11 index 11 index 17 index pgfdiff { 4 index 4 index 4 index
4 index setcmykcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6 index
add 5 -1 roll 5 index add 5 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep
add def /pgfcircy pgfcircy pgfystep add def } repeat mark 18 1 roll
cleartomark exch pop }bind def

 /pgfHgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 moveto dup 3 index lineto } bind def}
bind def

 /pgfVgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 exch moveto dup 3 index exch lineto
} bind def} bind def

 /pgfAgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 2 mul
1 add def dup 2 index sub pgfdiff div pgfheight 3 index 6 index pgfdiff
{ 1 index setgray pgfdir stroke exch 3 index add exch .5 sub } repeat
mark 7 1 roll cleartomark exch pop }bind def

 /pgfR1gray{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRgray} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2gray{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setgray
fill pop}bind def

 /pgfRgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 5 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 5 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 4 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
4 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
dup 2 index sub pgfdiff div 2 index 5 index pgfdiff { 1 index setgray
pgfcircx pgfcircy 2 index 0 360 arc closepath stroke exch 2 index add
exch .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy pgfcircy
pgfystep add def } repeat mark 6 1 roll cleartomark exch pop }bind
def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setblendmode where {pop} {/.setblendmode{pop}def} ifelse /.setfillconstantalpha
where {pop /.setopacityalpha {.setfillconstantalpha} def} {/.setopacityalpha
where {pop} {/.setopacityalpha {pop} def} ifelse} ifelse /.pgfsetfillopacityalpha{/pgffoa
exch def /.setfillconstantalpha where {pop pgffoa .setfillconstantalpha}
{/pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath
fill grestore newpath}bind def /pgfeofill{gsave pgffoa .setopacityalpha
eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}
ifelse} bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def /.setstrokeconstantalpha
where {pop pgfsoa .setstrokeconstantalpha} {/pgfstr{gsave pgfsoa .setopacityalpha
stroke grestore newpath}bind def} ifelse}bind def /pgffoa 1 def /pgfsoa
1 def /.pushpdf14devicefilter where {pop [userdict /bop-hook known
{userdict /bop-hook get aload pop} if {0 .pushpdf14devicefilter} aload
pop] cvx userdict exch /bop-hook exch put [userdict /eop-hook known
{userdict /eop-hook get aload pop} if {.poppdf14devicefilter} aload
pop] cvx userdict exch /eop-hook exch put} if systemdict /pdfmark known
not {userdict /pdfmark systemdict /cleartomark get put} if end

  /pgfwritesamplecmyk { 4 index 0 5 index pgfcheckcolorrange 255 mul
round cvi put 4 index 1 4 index pgfcheckcolorrange 255 mul round cvi
put 4 index 2 3 index pgfcheckcolorrange 255 mul round cvi put 4 index
3 2 index pgfcheckcolorrange 255 mul round cvi put pop pop pop pop
} bind def /pgfwritesamplergb { 3 index 0 4 index pgfcheckcolorrange
255 mul round cvi put 3 index 1 3 index pgfcheckcolorrange 255 mul
round cvi put 3 index 2 2 index pgfcheckcolorrange 255 mul round cvi
put pop pop pop } bind def /pgfwritesamplegray { pgfcheckcolorrange
16777215 mul round cvi 1 index 0 2 index -16 bitshift put 1 index 1
2 index 65535 and -8 bitshift put 1 index 2 2 index 255 and put pop
} bind def /pgfcheckcolorrange { dup 0.0 lt {pop 0.0} if dup 1.0 gt
{pop 1.0} if } bind def /pgfchanneldepthcmyk 8 def /pgfchanneldepthrgb
8 def /pgfchanneldepthgray 24 def /pgfcolorsamplecmyk 4 string def
/pgfcolorsamplergb 3 string def /pgfcolorsamplegray 3 string def /pgfrangecmyk
[0 1 0 1 0 1 0 1] def /pgfrangergb [0 1 0 1 0 1] def /pgfrangegray
[0 1] def

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 48 /zero put
dup 49 /one put
dup 50 /two put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E6544A8E490800362539DECEFDA209FBE1774B790CB6222E100903033A4CA73E
F0F4EB1F66741F359B651D485B87864B83A2FCCAFDCC861D7E34DD6D3E6AE7CD
6EA69488607C212ED00D993F9C24F612A61AD8C13C202E9DA91CDD15846EB4F5
FE15650CF4487A938A117EE85ACC8102EB37397718D4F17E60D3CEE08BE4BC5C
C93E8677D3A0A807DA8C72ECC71B26B24CD315BC351E053081BEADE92D2E498E
8A4CDB963B1104272310678F74491DA1572344FA5B2B920DC304A252193F1D93
5ED5268A6AC194D21A19DB87C73771A6CED0715EFF43475A0FD680DDAE896369
D59A6B8297CC9EFE00FCB9EFCA2D26256C58D6809FA22A0DC3112E7888A49945
0162B7373CCF7BB457EA8FCE8009D30DFEB19A02D18CA44689E5D8C34CC8F267
CDDA36431BC83D98704404C2E77DE570C7704166CD3DD128179D772063505904
9FC2FE5183581C921EC9198BC03CE04A0F0B2113C7B19A19D7E1DCF6AD566401
52A5010D25C836FAD8B8569DAEAE65CEF1295FF2EC1D6F82BC0428A071213C63
F9E6981B7A7D02A567FB66A67AB2E9556E6C9AE40D3CE74A353A702BB017E760
AD9AA7BD2198D8808551147686B2ACDAE4BF534FC07180E277C771BBC84A3007
94A6EA81739C1FE770576F4593A1DD7ACF15A1E166892EF94CCC6BFED98F0D54
D93AB3AE38D3F24C63EFD772D35A49E34D4359CD47A000608F799114BE5D3635
9D09FD6D5B025A7B766FFA65AEA58C77DC4ED68C27DD847573EBAD6AFB646F54
CEC76AC98678B54E6E3A103EBC0F25C44B4AE7D581455520DA75F0AA2AD71C12
CA19CC7AE1B8F62F15899242621F17260A5F8DB1B789A7340EC576E93E5592C5
03E4DA37DA7FABD00C06BE3B854DFA815E1F376539ADACED2F63269293495687
A19CF128855B9566EB6AA1B52455A825369304D7A2D66EFCE4E4562017EFC2DD
684583B0D0CD2E1831C300F8AC7AADFBB9DBA625CFDD64C5E6E8A5C32FAA5EB2
B115732959E1FFEC3BCB00D657A87A8F0942CB9F1C2197BCFA057213611FA533
7286573D3F141C3F5E963CB4FC747699F1917A3435FA211EFCE2043D08B6B076
08C74EBACDAF32FA1801421B0F00EF5DDE31A694EED5B6B961D5A23114D33CFE
A14C953C19EF5C4FBE6AC2F986408096D73CA8FBDEE431A1DD4101434BEA5BEB
C10E06EB57546AB4B3FA362598358799191BB8400B7346AEA78BC696C1A5618F
76F761BCE1EF0EBE19AF926DB2180AE9352398906FE9E4CF7C06CE164E0D2CCA
E50A521AFDC4F5F9C96EF48D0D43FC9967981DD4E909ED010BE4669C8AB7363D
EF56D2E21B65A3173E0264770BF6A85FE6C82840A2AB624E8B032C66B577EE0A
DDA1A003771C5F2FBD65251D86DEF6CFABBABEA43FA59429420E5F4A27576C8A
9815CBF81A07035F4925BC3B3BB680C79325345BEC5A6571459436C28F1D0EDA
77B08184D56DEFCA72133470272BD1012EDA3C5747E4F55704828317774AB750
1F2938F877998293A75CD135D757C8DA5B16F2018B6EB2F2B5172728BED16191
03B099422B8A884A33E396BD03E5DF53115CB367CD3B27BBB0C2CAABAEC51793
086C21BCABA312818370DAA13083067B58DBD0DBED4C1F4D2C800EB7C5308833
4B5BBCB7C1484C003F5EE31758B464D3645658EEADFEAFBE3A42232B3192C0FE
B008C5E268C4023A198639F8585B6B9CC5180E5010B67C80E4CB1580C6681DB1
B5D7099808B3452239DB5BA412EF86D4BB22C04E02572D308118B9
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 600 600 (ExArbreBinaire.dvi)
@start /Fa 205[45 45 45 48[{}3 90.9091 /CMR10 rf
%DVIPSBitmapFont: Fb ecrm1095 10.95 67
[/grave/acute/circumflex/tilde/dieresis/hungarumlaut/ring/caron/breve/macron
/dotaccent/cedilla/ogonek/quotesinglbase/guilsinglleft/guilsinglright
/quotedblleft/quotedblright/quotedblbase/guillemotleft/guillemotright/endash
/emdash/afii61664/perthousandzero/dotlessi/dotlessj/ff/fi/fl/ffi/ffl/uni2423
/exclam/quotedbl/numbersign/dollar/percent/ampersand/quoteright/parenleft
/parenright/asterisk/plus/comma/hyphen/period/slash/zero/one/two/three/four
/five/six/seven/eight/nine/colon/semicolon/less/equal/greater/question/at/A
/B/C/D/E/F/G/H/I/J/K/L/M/N/O/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash
/bracketright/asciicircum/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o
/p/q/r/s/t/u/v/w/x/y/z/braceleft/bar/braceright/asciitilde/hyphen.alt/Abreve
/Aogonek/Cacute/Ccaron/Dcaron/Ecaron/Eogonek/Gbreve/Lacute/Lcaron/Lslash
/Nacute/Ncaron/Eng/Ohungarumlaut/Racute/Rcaron/Sacute/Scaron/Scedilla/Tcaron
/Tcommaaccent/Uhungarumlaut/Uring/Ydieresis/Zacute/Zcaron/Zdotaccent/IJ
/Idotaccent/dcroat/section/abreve/aogonek/cacute/ccaron/dcaron/ecaron
/eogonek/gbreve/lacute/lcaron/lslash/nacute/ncaron/eng/ohungarumlaut/racute
/rcaron/sacute/scaron/scedilla/tcaron/tcommaaccent/uhungarumlaut/uring
/ydieresis/zacute/zcaron/zdotaccent/ij/exclamdown/questiondown/sterling
/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute
/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis/Eth/Ntilde/Ograve
/Oacute/Ocircumflex/Otilde/Odieresis/OE/Oslash/Ugrave/Uacute/Ucircumflex
/Udieresis/Yacute/Thorn/SS/agrave/aacute/acircumflex/atilde/adieresis/aring
/ae/ccedilla/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex
/idieresis/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/oe/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/germandbls]
A/EN0 X IEn S/IEn X FBB FMat/FMat[0.0109589 0 0 -0.0109589
0 0]N/FBB[-5 -25 96 85]N
/Fb 67 234 df<FFFFFFFFFFFFFFFFFFFFFF80FFFFFFFFFFFFFFFFFFFFFF80590280985A
>22 D<000003FE000000001FFFC0000000FE01E0000001F80078000007E0001C00000FC0
007C00001F8000FE00003F0001FE00007F0001FE00007E0001FE0000FE0001FE0000FC00
00FC0000FC0000780000FC0000000000FC0000000000FC0000000000FC0000000000FC00
00000000FC0000000000FC0000000000FC0000000000FC0000000000FC0000000000FC00
00000000FC00007E00FFFFFFFFFE00FFFFFFFFFE00FFFFFFFFFE0000FC0001FE0000FC00
00FE0000FC00007E0000FC00007E0000FC00007E0000FC00007E0000FC00007E0000FC00
007E0000FC00007E0000FC00007E0000FC00007E0000FC00007E0000FC00007E0000FC00
007E0000FC00007E0000FC00007E0000FC00007E0000FC00007E0000FC00007E0000FC00
007E0000FC00007E0000FC00007E0000FC00007E0000FC00007E0000FC00007E0000FC00
007E0000FC00007E0000FC00007E0000FC00007E0000FC00007E0000FC00007E0000FC00
007E0001FE0000FF007FFFF83FFFFC7FFFF83FFFFC7FFFF83FFFFC2E407FBF32>28
D<000003FE0001FF000000001FFF800FFFE0000000FE01E07F00F0000001F80078FC003C
000007E0001BF0000E00000FC0007FE0003E00001F8001FFC0007F00003F0001FF8000FF
00007F0001FF8000FF00007E0001FF0000FF0000FE0001FF0000FF0000FC0001FE00007E
0000FC00007E00003C0000FC00007E0000000000FC00007E0000000000FC00007E000000
0000FC00007E0000000000FC00007E0000000000FC00007E0000000000FC00007E000000
0000FC00007E0000000000FC00007E0000000000FC00007E0000000000FC00007E000000
0000FC00007E00003F00FFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFF
0000FC00007E0000FF0000FC00007E00007F0000FC00007E00003F0000FC00007E00003F
0000FC00007E00003F0000FC00007E00003F0000FC00007E00003F0000FC00007E00003F
0000FC00007E00003F0000FC00007E00003F0000FC00007E00003F0000FC00007E00003F
0000FC00007E00003F0000FC00007E00003F0000FC00007E00003F0000FC00007E00003F
0000FC00007E00003F0000FC00007E00003F0000FC00007E00003F0000FC00007E00003F
0000FC00007E00003F0000FC00007E00003F0000FC00007E00003F0000FC00007E00003F
0000FC00007E00003F0000FC00007E00003F0000FC00007E00003F0000FC00007E00003F
0000FC00007E00003F0000FC00007E00003F0000FC00007E00003F0000FC00007E00003F
0001FE0000FF00007F807FFFF83FFFFC1FFFFE7FFFF83FFFFC1FFFFE7FFFF83FFFFC1FFF
FE47407FBF4B>30 D<1C007F00FF80FF80FFC0FFC0FFC07FC01CC000C000C000C000C000
C001C00180018003800300070006000E000C001C003800700060000A1B78BE19>39
D<0000300000700000E00001C0000380000700000F00001E00003C00003C0000780000F0
0000F00001E00001E00003C00003C00007C0000780000F80000F80000F00001F00001F00
001E00003E00003E00003E00003C00007C00007C00007C00007C00007C00007C00007800
00F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F80000F800
00F80000F80000F80000F80000F80000F800007800007C00007C00007C00007C00007C00
007C00003C00003E00003E00003E00001E00001F00001F00000F00000F80000F80000780
0007C00003C00003C00001E00001E00000F00000F000007800003C00003C00001E00000F
000007000003800001C00000E0000070000030145A77C323>I<C00000E0000070000038
00001C00000E00000F000007800003C00003C00001E00000F00000F00000780000780000
3C00003C00003E00001E00001F00001F00000F00000F80000F800007800007C00007C000
07C00003C00003E00003E00003E00003E00003E00003E00001E00001F00001F00001F000
01F00001F00001F00001F00001F00001F00001F00001F00001F00001F00001F00001F000
01F00001F00001F00001E00003E00003E00003E00003E00003E00003E00003C00007C000
07C00007C0000780000F80000F80000F00001F00001F00001E00003E00003C00003C0000
780000780000F00000F00001E00003C00003C0000780000F00000E00001C000038000070
0000E00000C00000145A7BC323>I<000000060000000000000006000000000000000600
000000000000060000000000000006000000000000000600000000000000060000000000
000006000000000000000600000000000000060000000000000006000000000000000600
000000000000060000000000000006000000000000000600000000000000060000000000
000006000000000000000600000000000000060000000000000006000000000000000600
000000000000060000000000000006000000000000000600000000000000060000000000
00000600000000000000060000000000000006000000000000000600000000FFFFFFFFFF
FFFFE0FFFFFFFFFFFFFFE000000006000000000000000600000000000000060000000000
000006000000000000000600000000000000060000000000000006000000000000000600
000000000000060000000000000006000000000000000600000000000000060000000000
000006000000000000000600000000000000060000000000000006000000000000000600
000000000000060000000000000006000000000000000600000000000000060000000000
000006000000000000000600000000000000060000000000000006000000000000000600
0000000000000600000000000000060000000000000006000000003B3C7BB446>43
D<1C007F00FF80FF80FFC0FFC0FFC07FC01CC000C000C000C000C000C001C00180018003
800300070006000E000C001C003800700060000A1B788819>I<FFFFFEFFFFFEFFFFFEFF
FFFEFFFFFE17057F951E>I<1C007F00FF80FF80FF80FF80FF807F001C000909788819>I<
0003FC0000001FFF8000003E07C00000F801F00001F000F80003E0007C0003C0003C0007
C0003E000F80001F000F80001F001F00000F801F00000F803F00000FC03F00000FC03F00
000FC03F00000FC07E000007E07E000007E07E000007E07E000007E07E000007E0FE0000
07F0FE000007F0FE000007F0FE000007F0FE000007F0FE000007F0FE000007F0FE000007
F0FE000007F0FE000007F0FE000007F0FE000007F0FE000007F0FE000007F0FE000007F0
FE000007F0FE000007F0FE000007F0FE000007F0FE000007F0FE000007F07E000007E07E
000007E07E000007E07E000007E07F00000FE03F00000FC03F00000FC03F00000FC03F00
000FC01F00000F801F80001F800F80001F000F80001F0007C0003E0007C0003E0003E000
7C0001F000F80000F801F000003E07C000001FFF80000003FC0000243F7CBC2D>48
D<0000C0000003C0000007C000001FC000007FC00007FFC000FFFFC000FF9FC000F81FC0
00001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC0
00001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC0
00001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC0
00001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC0
00001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC000001FC0
00001FC000001FC000001FC000007FF000FFFFFFF8FFFFFFF8FFFFFFF81D3D78BC2D>I<
0007FC0000003FFF800000FFFFE00001F00FF800078003FC000F0001FE000E0000FF001C
00007F803800003FC03000003FC07000001FE06000001FE06000001FE0FE00000FF0FF00
000FF0FF80000FF0FF80000FF0FF80000FF0FF80000FF0FF80000FF07F00000FF01C0000
0FF00000000FE00000001FE00000001FE00000001FC00000003FC00000003F800000007F
800000007F00000000FE00000001FC00000001FC00000003F800000007F00000000FE000
00000FC00000001F800000003E000000007C00000000F800000001F000000003E0000000
03C000000007800000000F000030001E000030003C000030007800003000F000006001E0
00006003C0000060078000006007000000E00FFFFFFFE01FFFFFFFE03FFFFFFFE07FFFFF
FFC0FFFFFFFFC0FFFFFFFFC0FFFFFFFFC0243D7CBC2D>I<0007FC0000003FFF800000FF
FFE00001F807F80007C003FC000F0001FE000E0000FF001C00007F801F80007F803FC000
3FC03FE0003FC03FE0003FC03FE0003FC03FE0003FC03FE0003FC01FC0003FC00700003F
C00000003F800000007F800000007F800000007F00000000FF00000000FE00000001FC00
000003F800000003F00000000FC00000003F0000001FFC0000001FFF800000000FE00000
0003F800000001FC00000000FE000000007F000000007F800000003FC00000003FC00000
003FE00000003FE00000001FE00000001FF00000001FF00C00001FF03F00001FF07F8000
1FF0FFC0001FF0FFC0001FF0FFC0001FF0FFC0001FF0FFC0003FE0FF80003FE07F00003F
C07000003FC07000007F803800007F801C0000FF000F0001FE0007C003FC0003F80FF000
00FFFFE000003FFF80000007FC0000243F7CBC2D>I<0000000E000000000E000000001E
000000003E000000003E000000007E00000000FE00000000FE00000001FE00000003FE00
000003FE00000006FE0000000EFE0000000CFE00000018FE00000038FE00000030FE0000
0060FE000000E0FE000000C0FE00000180FE00000380FE00000300FE00000600FE00000E
00FE00000C00FE00001800FE00003800FE00003000FE00006000FE0000E000FE0000C000
FE00018000FE00038000FE00030000FE00060000FE000E0000FE000C0000FE00180000FE
00380000FE00300000FE00600000FE00E00000FE00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE0000
0000FE00000000FE00000000FE00000000FE00000000FE00000001FF000001FFFFFF0001
FFFFFF0001FFFFFF283E7EBD2D>I<060000030007C0000F0007F800FE0007FFFFFC0007
FFFFFC0007FFFFF00007FFFFE00007FFFFC00007FFFF0000063FF8000006000000000600
000000060000000006000000000600000000060000000006000000000600000000060000
000006000000000600000000060000000006000000000601FE0000060FFF8000063E03E0
00067001F80006E000FC0007C0007E000780003F000700003F800600001F800000001FC0
0000001FC00000001FE00000000FE00000000FE00000000FE00000000FF00000000FF000
00000FF00000000FF03E00000FF07F00000FF0FF80000FF0FF80000FF0FF80000FF0FF80
000FF0FF00000FE0FE00001FE0E000001FE06000001FC07000001FC03000003F80380000
3F801C00007F001E0000FE000F0001FC0007C003F80003F00FE00000FFFFC000003FFF00
000007F80000243F7CBC2D>I<00001FE0000000FFF8000003FFFE00000FF01F00001F80
0780003F000380007E000FC000FC001FC001F8003FC003F0003FC003F0003FC007E0003F
C00FE0001F800FC0000F001FC00000001FC00000001F800000003F800000003F80000000
3F800000007F800000007F000000007F01FE00007F07FF8000FF0E03E000FF1C01F000FF
3800FC00FF70007E00FF60003E00FFE0003F00FFC0001F80FFC0001FC0FF80001FC0FF80
001FE0FF80000FE0FF80000FE0FF00000FF0FF00000FF0FF00000FF0FF00000FF0FF0000
0FF0FF00000FF07F00000FF07F00000FF07F00000FF07F00000FF07F00000FF03F80000F
F03F80000FE03F80000FE01F80000FE01F80001FC01FC0001FC00FC0001F800FC0003F80
07E0003F0003F0007E0001F800FC0000FC01F800007E07F000003FFFE000000FFF800000
03FC0000243F7CBC2D>I<300000000038000000003E000000003FFFFFFFFC3FFFFFFFFC
3FFFFFFFFC3FFFFFFFF87FFFFFFFF87FFFFFFFF07FFFFFFFE070000000E060000001C060
0000038060000003006000000700C000000E00C000000C00C000001C00C0000038000000
0030000000007000000000E000000001C000000001800000000380000000070000000007
000000000E000000000E000000001C000000001C000000003C0000000038000000007800
0000007800000000F800000000F000000001F000000001F000000001F000000003F00000
0003F000000003F000000007F000000007E000000007E000000007E00000000FE0000000
0FE00000000FE00000000FE00000000FE00000001FE00000001FE00000001FE00000001F
E00000001FE00000001FE00000001FE00000001FE00000001FE00000001FE00000000FC0
0000000780000026407BBD2D>I<0003FC0000001FFF8000007FFFE00000FC03F80001E0
00FC0003C0003E000780001F000F00000F000E00000F801E000007801C000007C03C0000
03C03C000003C03C000003C03E000003C03E000003C03F000003C03F000007C03F800007
801FE0000F801FF0000F001FFC001E000FFE003C000FFF80780007FFC0F00003FFF1E000
01FFFF800000FFFF0000003FFF0000001FFFC000000FFFE000001FFFF8000078FFFC0001
F07FFE0003C01FFF0007800FFF800F0003FFC01F0001FFC01E00007FE03C00003FE07C00
000FE078000007F078000003F0F8000003F0F0000001F0F0000001F0F0000000F0F00000
00F0F0000000F0F0000000F0F8000000E078000001E078000001E07C000001C03E000003
C01E000007801F00000F000FC0001E0007E0007C0001FC03F80000FFFFE000001FFF8000
0003FC0000243F7CBC2D>I<0003FC0000001FFF0000003FFFC00000FE07F00001F801F8
0003F000FC0007E0007C000FE0007E001FC0003F001F80003F003F80001F803F80001F80
7F80001F807F00001FC07F00001FC0FF00001FC0FF00000FE0FF00000FE0FF00000FE0FF
00000FE0FF00000FE0FF00000FF0FF00000FF0FF00000FF0FF00000FF0FF00000FF0FF00
000FF07F00001FF07F00001FF07F80001FF03F80001FF03F80003FF01F80003FF00FC000
7FF007C0006FF007E000EFF003F001CFF000F8038FF0007C070FF0001FFE0FE00007F80F
E00000000FE00000001FE00000001FE00000001FC00000001FC00000001FC00000003F80
0000003F800F00003F001F80007F003FC0007E003FC0007E003FC000FC003FC001F8003F
8001F8003F0003F0001C0007E0001E001FC0000FC07F000003FFFE000001FFF80000003F
C00000243F7CBC2D>I<1C007F00FF80FF80FF80FF80FF807F001C000000000000000000
000000000000000000000000000000000000000000000000000000000000000000001C00
7F00FF80FF80FF80FF80FF807F001C00092778A619>I<003FF80000FFFF0003C01FC00F
0007F01C0001F8380001FC700000FE600000FE7C00007FFE00007FFF00007FFF00007FFF
00007FFF00007F7E00007F3C0000FF000000FE000000FE000001FC000003F8000007F000
000FE000000F8000001F0000003E0000003C00000078000000F8000000F0000000E00000
01E0000001C0000001800000038000000380000003000000030000000300000003000000
030000000300000003000000030000000300000003000000030000000000000000000000
00000000000000000000000000000000000000000000000000000000070000001FC00000
3FE000003FE000003FE000003FE000003FE000001FC0000007000020407BBF2B>63
D<0000000700000000000000070000000000000007000000000000000F80000000000000
0F800000000000001FC00000000000001FC00000000000001FC00000000000003FE00000
000000003FE00000000000003FE00000000000007FF00000000000006FF0000000000000
6FF0000000000000CFF8000000000000C7F8000000000000C7F800000000000187FC0000
0000000183FC00000000000183FC00000000000301FE00000000000301FE000000000003
01FE00000000000600FF00000000000600FF00000000000E00FF80000000000C007F8000
0000000C007F80000000001C007FC00000000018003FC00000000018003FC00000000030
003FE00000000030001FE00000000030001FE00000000060001FF00000000060000FF000
00000060000FF000000000C00007F800000000C00007F800000000C00007F80000000180
0003FC00000001FFFFFFFC00000003FFFFFFFE00000003FFFFFFFE00000003000001FE00
000007000001FF00000006000000FF00000006000000FF0000000C000000FF8000000C00
00007F8000000C0000007F800000180000007FC00000180000003FC00000180000003FC0
0000300000001FE00000300000001FE00000700000001FE00000700000000FF00000F000
00000FF00001F00000000FF80003F80000000FF8000FFE0000003FFE00FFFFC00007FFFF
F8FFFFC00007FFFFF8FFFFC00007FFFFF83D417DC044>65 D<0000003FF0000C000003FF
FE001C00001FFFFF801C00007FE00FC03C0000FF0001F07C0003FC0000787C0007F00000
3CFC001FE000000FFC003FC0000007FC007F80000003FC00FF00000003FC01FE00000001
FC01FC00000000FC03FC00000000FC07F8000000007C07F8000000007C0FF0000000003C
0FF0000000003C1FE0000000001C1FE0000000001C3FE0000000001C3FC0000000001C3F
C0000000000C7FC0000000000C7FC0000000000C7FC0000000000C7F800000000000FF80
0000000000FF800000000000FF800000000000FF800000000000FF800000000000FF8000
00000000FF800000000000FF800000000000FF800000000000FF800000000000FF800000
000000FF8000000000007F8000000000007FC000000000007FC0000000000C7FC0000000
000C3FC0000000000C3FC0000000000C3FE0000000000C1FE0000000001C1FE000000000
180FF000000000180FF0000000001807F8000000003807F8000000003003FC0000000070
01FC000000006001FE00000000E000FF00000001C0007F8000000380003FC00000078000
1FE000000F000007F000001E000003FC00003C000000FF0000F00000007FE007E0000000
1FFFFF8000000003FFFE00000000003FF0000036427BBF41>67 D<FFFFFFFFFC000000FF
FFFFFFFF800000FFFFFFFFFFE0000000FFC0001FF80000007F800003FE0000007F800000
FF0000007F8000003F8000007F8000001FC000007F8000000FE000007F80000007F00000
7F80000003F800007F80000001FC00007F80000001FC00007F80000000FE00007F800000
00FF00007F800000007F00007F800000007F80007F800000003F80007F800000003FC000
7F800000003FC0007F800000003FC0007F800000003FE0007F800000001FE0007F800000
001FE0007F800000001FE0007F800000001FE0007F800000001FF0007F800000001FF000
7F800000001FF0007F800000001FF0007F800000001FF0007F800000001FF0007F800000
001FF0007F800000001FF0007F800000001FF0007F800000001FF0007F800000001FF000
7F800000001FE0007F800000001FE0007F800000001FE0007F800000001FE0007F800000
003FE0007F800000003FC0007F800000003FC0007F800000003F80007F800000007F8000
7F800000007F80007F800000007F00007F80000000FE00007F80000000FE00007F800000
01FC00007F80000003F800007F80000007F800007F8000000FF000007F8000001FE00000
7F8000003FC000007F800000FF0000007F800003FE000000FFC0001FF80000FFFFFFFFFF
F00000FFFFFFFFFF800000FFFFFFFFFC0000003C3E7DBD45>I<FFFFFFFFFFFFC0FFFFFF
FFFFFFC0FFFFFFFFFFFFC000FFC00001FFC0007F8000001FC0007F8000000FE0007F8000
0003E0007F80000003E0007F80000001E0007F80000000E0007F80000000E0007F800000
00E0007F8000000060007F8000000060007F8000000060007F8000000060007F80000000
30007F8000300030007F8000300030007F8000300030007F8000300030007F8000300000
007F8000300000007F8000700000007F8000700000007F8000F00000007F8001F0000000
7F8007F00000007FFFFFF00000007FFFFFF00000007FFFFFF00000007F8007F00000007F
8001F00000007F8000F00000007F8000700000007F8000700000007F8000300000007F80
00300000007F8000300006007F8000300006007F8000300006007F800030000C007F8000
00000C007F800000000C007F800000000C007F800000000C007F800000001C007F800000
0018007F8000000018007F8000000038007F8000000038007F8000000078007F80000000
78007F80000000F0007F80000001F0007F80000003F0007F80000007F0007F8000001FF0
00FFC00001FFF0FFFFFFFFFFFFE0FFFFFFFFFFFFE0FFFFFFFFFFFFE0373E7DBD3D>I<FF
FFFFC0FFFFFFC0FFFFFFC001FFE000007F8000007F8000007F8000007F8000007F800000
7F8000007F8000007F8000007F8000007F8000007F8000007F8000007F8000007F800000
7F8000007F8000007F8000007F8000007F8000007F8000007F8000007F8000007F800000
7F8000007F8000007F8000007F8000007F8000007F8000007F8000007F8000007F800000
7F8000007F8000007F8000007F8000007F8000007F8000007F8000007F8000007F800000
7F8000007F8000007F8000007F8000007F8000007F8000007F8000007F8000007F800000
7F8000007F8000007F8000007F800001FFE000FFFFFFC0FFFFFFC0FFFFFFC01A3E7DBD21
>73 D<000FFFFFF8000FFFFFF8000FFFFFF8000007FF00000001FE00000001FE00000001
FE00000001FE00000001FE00000001FE00000001FE00000001FE00000001FE00000001FE
00000001FE00000001FE00000001FE00000001FE00000001FE00000001FE00000001FE00
000001FE00000001FE00000001FE00000001FE00000001FE00000001FE00000001FE0000
0001FE00000001FE00000001FE00000001FE00000001FE00000001FE00000001FE000000
01FE00000001FE00000001FE00000001FE00000001FE00000001FE00000001FE00000001
FE00000001FE00000001FE00000001FE00000001FE003F0001FE007F8001FE00FFC001FE
00FFC001FE00FFC001FE00FFC001FE00FFC003FC00FF8003FC007F0003F8006C0007F800
700007F00038000FE0001C001FC0000F003F800003C07E000000FFF80000003FC0000025
407DBD2E>I<FFFFFFF00000FFFFFFF00000FFFFFFF0000000FFE0000000007F80000000
007F80000000007F80000000007F80000000007F80000000007F80000000007F80000000
007F80000000007F80000000007F80000000007F80000000007F80000000007F80000000
007F80000000007F80000000007F80000000007F80000000007F80000000007F80000000
007F80000000007F80000000007F80000000007F80000000007F80000000007F80000000
007F80000000007F80000000007F80000000007F80000000007F80000000007F80000000
007F80000000007F80000000007F80000000007F80000003007F80000003007F80000003
007F80000003007F80000003007F80000007007F80000006007F80000006007F80000006
007F80000006007F8000000E007F8000000E007F8000000E007F8000001E007F8000001E
007F8000003E007F8000007E007F800000FE007F800001FC007F800007FC00FFC0003FFC
FFFFFFFFFFFCFFFFFFFFFFFCFFFFFFFFFFFC303E7DBD38>76 D<FFFF8000007FFFF8FFFF
C000007FFFF8FFFFE000007FFFF8007FE0000003FF00007FF0000000FC00006FF8000000
7800006FFC00000030000067FC00000030000063FE00000030000063FF00000030000061
FF00000030000060FF800000300000607FC00000300000607FC00000300000603FE00000
300000601FF00000300000601FF00000300000600FF800003000006007FC000030000060
07FC00003000006003FE00003000006001FF00003000006001FF00003000006000FF8000
30000060007FC00030000060007FE00030000060003FE00030000060001FF00030000060
001FF80030000060000FF800300000600007FC00300000600007FE00300000600003FE00
300000600001FF00300000600000FF80300000600000FF803000006000007FC030000060
00003FE03000006000003FE03000006000001FF03000006000000FF83000006000000FF8
30000060000007FC30000060000003FE30000060000003FE30000060000001FF30000060
000000FFB0000060000000FFF00000600000007FF00000600000003FF00000600000003F
F00000600000001FF00000600000000FF000006000000007F000006000000007F0000060
00000003F00000F000000001F00001F800000001F00007FE00000000F000FFFFF0000000
7000FFFFF00000007000FFFFF000000030003D3E7DBD44>78 D<000000FFE00000000000
07FFFC00000000003FC07F8000000000FE000FE000000001F80003F000000007E00000FC
0000000FC000007E0000001F8000003F0000003F0000001F8000007E0000000FC00000FE
0000000FE00001FC00000007F00003F800000003F80003F800000003F80007F000000001
FC0007F000000001FC000FE000000000FE001FE000000000FF001FE000000000FF001FC0
000000007F003FC0000000007F803FC0000000007F803FC0000000007F807FC000000000
7FC07F80000000003FC07F80000000003FC07F80000000003FC0FF80000000003FE0FF80
000000003FE0FF80000000003FE0FF80000000003FE0FF80000000003FE0FF8000000000
3FE0FF80000000003FE0FF80000000003FE0FF80000000003FE0FF80000000003FE0FF80
000000003FE0FF80000000003FE07F80000000003FC07FC0000000007FC07FC000000000
7FC07FC0000000007FC07FC0000000007FC03FC0000000007F803FE000000000FF801FE0
00000000FF001FE000000000FF001FE000000000FF000FF000000001FE000FF000000001
FE0007F800000003FC0003F800000003F80003FC00000007F80001FC00000007F00000FE
0000000FE000007F0000001FC000003F8000003F8000001F8000003F0000000FE00000FE
00000007F00001FC00000001F80003F000000000FE000FE0000000003FC07F8000000000
07FFFC000000000000FFE00000003B427BBF46>I<FFFFFFFFF00000FFFFFFFFFF0000FF
FFFFFFFFC00000FFC0003FF000007F800007F800007F800001FE00007F800000FF00007F
8000007F00007F8000007F80007F8000003FC0007F8000003FC0007F8000001FE0007F80
00001FE0007F8000001FF0007F8000001FF0007F8000001FF0007F8000001FF0007F8000
001FF0007F8000001FF0007F8000001FF0007F8000001FF0007F8000001FE0007F800000
1FE0007F8000003FC0007F8000003FC0007F8000007F80007F8000007F00007F800000FE
00007F800003FC00007F800007F800007F80003FE000007FFFFFFF8000007FFFFFFC0000
007F8000000000007F8000000000007F8000000000007F8000000000007F800000000000
7F8000000000007F8000000000007F8000000000007F8000000000007F8000000000007F
8000000000007F8000000000007F8000000000007F8000000000007F8000000000007F80
00000000007F8000000000007F8000000000007F8000000000007F8000000000007F8000
000000007F8000000000007F8000000000007F8000000000007F800000000000FFC00000
0000FFFFFFC0000000FFFFFFC0000000FFFFFFC0000000343E7DBD3D>I<000000FFE000
0000000007FFFC00000000003FC07F8000000000FE000FE000000001F80003F000000007
F00001FC0000000FC000007E0000001F8000003F0000003F0000001F8000007F0000001F
C00000FE0000000FE00001FC00000007F00003FC00000007F80003F800000003F80007F8
00000003FC0007F000000001FC000FF000000001FE001FE000000000FF001FE000000000
FF001FE000000000FF003FC0000000007F803FC0000000007F803FC0000000007F807FC0
000000007FC07FC0000000007FC07F80000000003FC07F80000000003FC0FF8000000000
3FE0FF80000000003FE0FF80000000003FE0FF80000000003FE0FF80000000003FE0FF80
000000003FE0FF80000000003FE0FF80000000003FE0FF80000000003FE0FF8000000000
3FE0FF80000000003FE0FF80000000003FE07F80000000003FC07F80000000003FC07FC0
000000007FC07FC0000000007FC07FC0000000007FC03FC0000000007F803FC000000000
7F801FE000000000FF001FE000000000FF001FE000000000FF000FF000000001FE000FF0
00000001FE0007F0001F0001FC0003F8007FC003F80003F800E07003F80001FC01C03807
F00000FE0380180FE000007E03001C0FC000003F03000C1F8000001F83000E3F0000000F
C300067E00000007F30007FC00000001FB8007F000000000FFC00FE0000000003FE07F80
0060000007FFFF800060000000FFE38000600000000003C000600000000003C000E00000
000003E000E00000000003E001E00000000001F003E00000000001F807C00000000001FC
0FC00000000001FFFFC00000000001FFFFC00000000000FFFF800000000000FFFF800000
0000007FFF0000000000007FFE0000000000003FFE0000000000001FF800000000000007
E0003B527BBF46>I<0007FC0018003FFF803800FFFFE03801FC03F87803F0007C7807C0
001EF80F80000FF81F000007F83F000003F83E000001F87E000000F87E000000F87C0000
0078FC00000078FC00000078FC00000038FC00000038FC00000038FE00000018FE000000
18FF00000018FF000000187F800000007FC00000007FE00000003FF80000003FFF000000
1FFFF000000FFFFF00000FFFFFF00007FFFFFC0001FFFFFE0000FFFFFF80003FFFFFC000
07FFFFE000007FFFE0000007FFF00000007FF80000001FF80000000FFC00000007FC0000
0003FC00000001FE00000001FEC0000000FEC0000000FEC0000000FEC00000007EC00000
007EE00000007EE00000007EE00000007EE00000007CF00000007CF0000000FCF8000000
F8FC000001F8FE000001F0FF000003F0FF800007E0FBE0000FC0F1F8001F80F07F007F00
E01FFFFC00E007FFF000C0007FC00027427BBF32>83 D<3FFFFFFFFFFFFF003FFFFFFFFF
FFFF003FFFFFFFFFFFFF003FE000FFC001FF003F00007F80003F007E00007F80001F807C
00007F80000F807800007F800007807000007F800003807000007F800003807000007F80
0003806000007F800001806000007F800001806000007F800001806000007F8000018060
00007F80000180C000007F800000C0C000007F800000C0C000007F800000C0C000007F80
0000C0C000007F800000C00000007F800000000000007F800000000000007F8000000000
00007F800000000000007F800000000000007F800000000000007F800000000000007F80
0000000000007F800000000000007F800000000000007F800000000000007F8000000000
00007F800000000000007F800000000000007F800000000000007F800000000000007F80
0000000000007F800000000000007F800000000000007F800000000000007F8000000000
00007F800000000000007F800000000000007F800000000000007F800000000000007F80
0000000000007F800000000000007F800000000000007F800000000000007F8000000000
00007F800000000000007F800000000000007F800000000000007F800000000000007F80
0000000000007F80000000000000FFC0000000000001FFE00000000007FFFFFFF8000000
07FFFFFFF800000007FFFFFFF800003A3E7DBD41>I<FFFFFFC0007FFFF8FFFFFFC0007F
FFF8FFFFFFC0007FFFF800FFC0000003FF00007F80000000FC00007F800000007800007F
800000003000007F800000003000007F800000003000007F800000003000007F80000000
3000007F800000003000007F800000003000007F800000003000007F800000003000007F
800000003000007F800000003000007F800000003000007F800000003000007F80000000
3000007F800000003000007F800000003000007F800000003000007F800000003000007F
800000003000007F800000003000007F800000003000007F800000003000007F80000000
3000007F800000003000007F800000003000007F800000003000007F800000003000007F
800000003000007F800000003000007F800000003000007F800000003000007F80000000
3000007F800000003000007F800000003000007F800000003000007F800000003000007F
800000003000007F800000003000007F800000003000007F800000003000003F80000000
7000003FC00000006000003FC00000006000003FC0000000E000001FC0000000C000001F
E0000001C000000FE0000001C000000FF000000380000007F000000700000003F800000F
00000001FC00000E00000000FE00003C000000007F000078000000003FC001F000000000
0FF00FE00000000003FFFF800000000000FFFE0000000000001FF00000003D407DBD44>
I<FFFFFE000003FFFEFFFFFE000003FFFEFFFFFE000003FFFE03FFC00000007FE001FF80
0000001F8000FF000000001F0000FF800000000E00007F800000000C00007F800000000C
00007FC00000001C00003FC00000001800003FE00000001800001FE00000003000001FE0
0000003000001FF00000007000000FF00000006000000FF000000060000007F8000000C0
000007F8000000C0000007FC000000C0000003FC00000180000003FC00000180000003FE
00000380000001FE00000300000001FF00000300000000FF00000600000000FF00000600
000000FF80000E000000007F80000C000000007F80000C000000003FC00018000000003F
C00018000000003FE00018000000001FE00030000000001FE00030000000001FF0007000
0000000FF00060000000000FF800600000000007F800C00000000007F800C00000000007
FC01C00000000003FC01800000000003FC01800000000001FE03000000000001FE030000
00000001FF03000000000000FF06000000000000FF06000000000000FF8E000000000000
7F8C0000000000007FCC0000000000003FD80000000000003FD80000000000003FF80000
000000001FF00000000000001FF00000000000000FE00000000000000FE0000000000000
0FE000000000000007C000000000000007C000000000000007C000000000000003800000
0000000003800000003F407EBD44>I<7FFFFFFFFFFFFCFFFFFFFFFFFFFEFFFFFFFFFFFF
FE7FFFFFFFFFFFFC3704796E46>95 D<001FF0000000FFFC000003E03F00000F000FC000
1C0007E0001F0003F0003F8001F8003FC000FC003FC000FC003FC000FC003FC0007E001F
80007E000F00007E000000007E000000007E000000007E000000007E0000001FFE000003
FFFE00001FF87E00007F807E0001FC007E0007F0007E000FE0007E001FC0007E003F8000
7E007F80007E007F00007E007F00007E03FE00007E03FE00007E03FE00007E03FE0000FE
03FE0000FE03FE0001FE037F0001BE037F0003BE033F80071F061FC00E1F8E0FF03C0FFC
03FFF007F8003FC003E0282A7CA82D>97 D<01F800000000FFF800000000FFF800000000
FFF80000000007F80000000003F80000000001F80000000001F80000000001F800000000
01F80000000001F80000000001F80000000001F80000000001F80000000001F800000000
01F80000000001F80000000001F80000000001F80000000001F80000000001F800000000
01F80000000001F80000000001F807F8000001F81FFF000001F8780FC00001F9E003F000
01FB8001F80001FF0000FC0001FE00007E0001FC00003F0001FC00001F8001F800001F80
01F800001FC001F800000FC001F800000FE001F800000FE001F8000007E001F8000007F0
01F8000007F001F8000007F001F8000007F001F8000007F001F8000007F001F8000007F0
01F8000007F001F8000007F001F8000007F001F8000007E001F800000FE001F800000FE0
01F800000FE001F800000FC001F800001FC001F800001F8001FC00003F0001FE00003F00
01F600007E0001F70000FC0001E38001F80001C1C003E00001C0F81F800001803FFE0000
000007F000002C407EBE32>I<0001FF0000000FFFE000003F00F800007C001E0001F800
070003F0001F0007E0003F800FC0007F800FC0007F801F80007F801F80007F803F00003F
003F00001E007F000000007F000000007E00000000FE00000000FE00000000FE00000000
FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE00000000FE
000000007F000000007F000000007F000000003F000000C03F800000C01F800001C01FC0
0001800FC000038007E000070003F000060001F8001E0000FC003800003F01F000000FFF
C0000001FE0000222A7DA828>I<00000001F800000000FFF800000000FFF800000000FF
F80000000007F80000000003F80000000001F80000000001F80000000001F80000000001
F80000000001F80000000001F80000000001F80000000001F80000000001F80000000001
F80000000001F80000000001F80000000001F80000000001F80000000001F80000000001
F80000000001F8000000FF01F8000007FFC1F800001F80F1F800007C0039F80001F8001D
F80003F0000FF80007E00007F8000FC00003F8000FC00003F8001F800001F8003F800001
F8003F000001F8007F000001F8007F000001F8007F000001F8007E000001F800FE000001
F800FE000001F800FE000001F800FE000001F800FE000001F800FE000001F800FE000001
F800FE000001F800FE000001F800FE000001F8007E000001F8007F000001F8007F000001
F8003F000001F8003F800001F8001F800003F8001F800003F8000FC00007F80007E0000F
F80003F0000DFC0001F8003DFE0000FC0071FFF0003F01E1FFF0000FFF81FFF00001FE01
F8002C407DBE32>I<0003FC0000001FFF8000007E07E00000F801F00001F000F80003E0
007C0007C0003E000FC0003F001F80001F001F80001F803F00001F803F00000F807F0000
0F807F00000FC07E00000FC07E00000FC0FE00000FC0FE00000FC0FFFFFFFFC0FFFFFFFF
C0FE00000000FE00000000FE00000000FE00000000FE00000000FE000000007E00000000
7F000000007F000000007F000000003F000000C03F800000C01F800001C00FC00001800F
C000038007E000070003F0000E0001F8001C0000FC003800003F01F000000FFFC0000001
FE0000222A7DA828>I<00001FC00000FFF00003F0380007C0FC000F81FE001F81FE003F
01FE003E01FE007E01FE007E00FC00FC000000FC000000FC000000FC000000FC000000FC
000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC
0000FFFFFF00FFFFFF00FFFFFF0000FC000000FC000000FC000000FC000000FC000000FC
000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC
000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC
000000FC000000FC000000FC000000FC000000FC000000FC000000FC000000FC000001FE
00007FFFFE007FFFFE007FFFFE001F407FBF1C>I<000000007E000003FC01FF00000FFF
078780003E07CE0F8000FC03FC0F8001F801F80F8003F000FC070003E0007C000007E000
7E000007E0007E00000FC0003F00000FC0003F00000FC0003F00000FC0003F00000FC000
3F00000FC0003F00000FC0003F00000FC0003F000007E0007E000007E0007E000003E000
7C000003F000FC000001F801F8000001FC03F0000001BE07C00000038FFF0000000303FC
000000070000000000070000000000070000000000070000000000078000000000078000
00000007C00000000003E00000000003FFFFF0000001FFFFFE000001FFFFFF8000007FFF
FFE00001FFFFFFF80007C0001FF8001F800003FC003F000000FE003E0000007E007C0000
003E007C0000003F00F80000001F00F80000001F00F80000001F00F80000001F00F80000
001F00FC0000003F007C0000003E007E0000007E003F000000FC001F800001F8000FC000
03F00003F0000FC00000FE007F0000003FFFFC00000003FFC00000293D7EA82D>I<01F8
00000000FFF800000000FFF800000000FFF80000000007F80000000003F80000000001F8
0000000001F80000000001F80000000001F80000000001F80000000001F80000000001F8
0000000001F80000000001F80000000001F80000000001F80000000001F80000000001F8
0000000001F80000000001F80000000001F80000000001F80000000001F803FC000001F8
0FFF800001F83C0FC00001F8F003E00001F9C003F00001FB8001F80001FB0001F80001FF
0000FC0001FE0000FC0001FE0000FC0001FC0000FC0001FC0000FC0001F80000FC0001F8
0000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F8
0000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F8
0000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F8
0000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0003FC0001FE00FFFF
F07FFFF8FFFFF07FFFF8FFFFF07FFFF82D3F7EBE32>I<01C00007F0000FF8000FF8000F
F8000FF8000FF80007F00001C00000000000000000000000000000000000000000000000
000000000000000000000000000001F8007FF8007FF8007FF80007F80003F80001F80001
F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001
F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001
F80001F80001F80001F80001F80003FC00FFFFE0FFFFE0FFFFE0133D7EBC19>I<000070
0001FC0003FE0003FE0003FE0003FE0003FE0001FC000070000000000000000000000000
0000000000000000000000000000000000000000000000000000FE003FFE003FFE003FFE
0001FE0000FE00007E00007E00007E00007E00007E00007E00007E00007E00007E00007E
00007E00007E00007E00007E00007E00007E00007E00007E00007E00007E00007E00007E
00007E00007E00007E00007E00007E00007E00007E00007E00007E00007E00007E00007E
00007E00007E00007E00007E00007E00007E00007E00007E3C007E7E007CFF00FCFF00FC
FF00F8FF01F8FE01F07803E03E07C00FFF0001FC00175084BC1C>I<01F800000000FFF8
00000000FFF800000000FFF80000000007F80000000003F80000000001F80000000001F8
0000000001F80000000001F80000000001F80000000001F80000000001F80000000001F8
0000000001F80000000001F80000000001F80000000001F80000000001F80000000001F8
0000000001F80000000001F80000000001F80000000001F80000000001F8007FFF8001F8
007FFF8001F8007FFF8001F8001FFC0001F8000FE00001F8000F800001F8001F000001F8
001C000001F80038000001F80070000001F800E0000001F803C0000001F80700000001F8
0E00000001F81E00000001F83E00000001F87F00000001F9FF80000001FB9FC0000001FF
0FC0000001FE07E0000001FC07F0000001F803F0000001F801F8000001F801FC000001F8
00FE000001F8007E000001F8003F000001F8003F800001F8001F800001F8000FC00001F8
000FE00001F80007F00001F80007F00001F80007F80003FC0007FE00FFFFF03FFFE0FFFF
F03FFFE0FFFFF03FFFE02B3F7EBE30>I<01F800FFF800FFF800FFF80007F80003F80001
F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001
F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001
F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001
F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001F80001
F80001F80001F80001F80001F80003FC00FFFFF0FFFFF0FFFFF0143F7EBE19>I<01F803
FC0001FE0000FFF80FFF8007FFC000FFF83C0FC01E07E000FFF8F003E07801F00007F9C0
03F0E001F80003FB8001F9C000FC0001FB0001F98000FC0001FF0000FF80007E0001FE00
00FF00007E0001FE0000FF00007E0001FC0000FE00007E0001FC0000FE00007E0001F800
00FC00007E0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E0001F800
00FC00007E0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E0001F800
00FC00007E0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E0001F800
00FC00007E0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E0001F800
00FC00007E0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E0001F800
00FC00007E0001F80000FC00007E0001F80000FC00007E0001F80000FC00007E0003FC00
01FE0000FF00FFFFF07FFFF83FFFFCFFFFF07FFFF83FFFFCFFFFF07FFFF83FFFFC46287E
A74B>I<01F803FC0000FFF80FFF8000FFF83C0FC000FFF8F003E00007F9C003F00003FB
8001F80001FB0001F80001FF0000FC0001FE0000FC0001FE0000FC0001FC0000FC0001FC
0000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F8
0000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F8
0000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F8
0000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F8
0000FC0003FC0001FE00FFFFF07FFFF8FFFFF07FFFF8FFFFF07FFFF82D287EA732>I<00
01FE0000000FFFC000003F03F000007C00F80001F0003E0003E0001F0007C0000F8007C0
000F800F800007C01F800007E01F000003E03F000003F03F000003F07E000001F87E0000
01F87E000001F87E000001F8FE000001FCFE000001FCFE000001FCFE000001FCFE000001
FCFE000001FCFE000001FCFE000001FCFE000001FC7E000001F87E000001F87E000001F8
7F000003F83F000003F03F000003F01F800007E00F800007C00FC0000FC007C0000F8003
E0001F0001F0003E0000FC00FC00003F03F000000FFFC0000001FE0000262A7DA82D>I<
01F807F80000FFF81FFF0000FFF8780FC000FFF9E003F00003FB8001F80001FF0000FC00
01FE00007E0001FC00007F0001FC00003F8001F800001F8001F800001FC001F800001FC0
01F800000FE001F800000FE001F800000FE001F800000FF001F8000007F001F8000007F0
01F8000007F001F8000007F001F8000007F001F8000007F001F8000007F001F8000007F0
01F8000007F001F800000FE001F800000FE001F800000FE001F800000FE001F800001FC0
01F800001FC001F800003F8001FC00003F0001FE00007F0001FE0000FE0001FF0001FC00
01FB8003F80001F9C007E00001F8F81F800001F83FFE000001F807F0000001F800000000
01F80000000001F80000000001F80000000001F80000000001F80000000001F800000000
01F80000000001F80000000001F80000000001F80000000001F80000000001F800000000
03FC00000000FFFFF0000000FFFFF0000000FFFFF00000002C3A7EA732>I<0000FF000C
000007FFC01C00001F80F01C00007E00381C0000FC001C3C0003F8000E3C0007F000077C
0007E000037C000FC00003FC001FC00001FC003F800001FC003F800000FC007F000000FC
007F000000FC007F000000FC007F000000FC00FE000000FC00FE000000FC00FE000000FC
00FE000000FC00FE000000FC00FE000000FC00FE000000FC00FE000000FC00FE000000FC
00FF000000FC007F000000FC007F000000FC007F000000FC003F800000FC003F800001FC
001FC00001FC000FC00003FC000FE00003FC0007E00007FC0003F0000EFC0001F8001CFC
00007E0078FC00003F01E0FC00000FFFC0FC000001FE00FC0000000000FC0000000000FC
0000000000FC0000000000FC0000000000FC0000000000FC0000000000FC0000000000FC
0000000000FC0000000000FC0000000000FC0000000000FC0000000000FC0000000001FE
000000007FFFF80000007FFFF80000007FFFF82D3A7DA730>I<03F00FC0FFF03FF0FFF0
F0F8FFF1C3FC07F183FC03F383FC01F703FC01F603FC01F601F801FE006001FC000001FC
000001FC000001FC000001F8000001F8000001F8000001F8000001F8000001F8000001F8
000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8
000001F8000001F8000001F8000001F8000001F8000001F8000003FC0000FFFFF800FFFF
F800FFFFF8001E287EA723>I<007FC06003FFF8E007C03DE01E000FE03C0003E0780001
E0780001E0700000E0F00000E0F0000060F0000060F8000060F8000060FC000060FF0000
007FC000007FFE00003FFFE0001FFFFC0007FFFE0003FFFF80007FFFC00007FFE000003F
E000000FF0C00003F0C00001F8C00000F8E00000F8E0000078E0000078F0000078F00000
78F8000078F80000F0FC0000F0FC0001E0FE0001C0F7800780F1E01F00E0FFFC00C01FE0
001D2A7DA824>I<00180000001800000018000000180000001800000018000000380000
003800000038000000380000007800000078000000F8000000F8000001F8000003F80000
07F800001FFFFFC0FFFFFFC0FFFFFFC001F8000001F8000001F8000001F8000001F80000
01F8000001F8000001F8000001F8000001F8000001F8000001F8000001F8000001F80000
01F8000001F8000001F8000001F8000001F8000001F8000001F8006001F8006001F80060
01F8006001F8006001F8006001F8006001F8006001F8006000FC00E000FC00C000FC00C0
007E01C0003F0380001F87000007FE000001F8001B397EB723>I<01F80000FC00FFF800
7FFC00FFF8007FFC00FFF8007FFC0007F80003FC0003F80001FC0001F80000FC0001F800
00FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F800
00FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F800
00FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F80000FC0001F800
00FC0001F80000FC0001F80000FC0001F80000FC0001F80001FC0001F80001FC0001F800
01FC0001F80003FC0000F80003FC0000FC0007FC0000FC000EFE00007C001CFF00003E00
38FFF8001F80F0FFF80007FFE0FFF80000FF00FC002D297EA732>I<FFFFC007FFE0FFFF
C007FFE0FFFFC007FFE007FC0001FF0003F800007C0003F80000780001F80000700001FC
0000700000FC0000600000FC00006000007E0000C000007E0000C000007F0001C000003F
00018000003F00018000001F80030000001F80030000001FC0070000000FC0060000000F
C00600000007E00C00000007E00C00000007F01C00000003F01800000003F01800000001
F83000000001F83000000001FC7000000000FC6000000000FC60000000007EC000000000
7EC0000000007FC0000000003F80000000003F80000000001F00000000001F0000000000
1F00000000000E00000000000E0000002B287EA630>I<7FFFC00FFFE07FFFC00FFFE07F
FFC00FFFE003FF0007FE0000FF0003F800007F0003E000003F0003C000003F8003800000
1FC0070000000FC00E00000007E00C00000007F01800000003F83800000001F870000000
00FCE000000000FEC0000000007F80000000003F80000000001F80000000000FC0000000
000FE0000000001FE0000000003BF00000000071F800000000E1FC00000000C0FE000000
01807E00000003803F00000007003F8000000E001FC000000C000FC000001C0007E00000
380007F00000F80003F80001F80003FC000FFC0007FE00FFFF001FFFF8FFFF001FFFF8FF
FF001FFFF82D277FA630>120 D<FFFFC007FFE0FFFFC007FFE0FFFFC007FFE007FC0001
FF0003F800007C0001F80000780001F80000700001FC0000700000FC0000600000FE0000
6000007E0000C000007E0000C000003F00018000003F00018000003F80038000001F8003
0000001F80030000000FC0060000000FC0060000000FE00E00000007E00C00000007E00C
00000003F01800000003F01800000003F83800000001F83000000001FC3000000000FC60
00000000FC60000000007EC0000000007EC0000000007FC0000000003F80000000003F80
000000001F00000000001F00000000001F00000000000E00000000000E00000000000C00
000000000C00000000001C00000000001800000000001800000000003000000000003000
00000000600000003800600000007C00E0000000FE00C0000000FE01C0000000FE018000
0000FE03000000007C0700000000700E00000000383C000000001FF80000000007E00000
00002B3A7EA630>I<1FFFFFFF801FFFFFFF801FE0007F801F00007F001E0000FE001C00
01FC001C0003FC00180003F800380007F00038000FE00030001FE00030001FC00030003F
800030007F000030007F00000000FE00000001FC00000003FC00000003F800000007F000
00000FE00000001FE00000001FC00180003F800180007F000180007F00018000FE000180
01FC00018003FC00038003F800038007F00003000FE00003001FE00007001FC0000F003F
80000F007F00003F00FF0001FF00FFFFFFFF00FFFFFFFF0021277EA628>I<0000000007
0000000000001F8000000000003F800000000000FF800000000001FF800000000007FF00
000000000FFC00000000003FE00000000000FF000000000000F8000000000000C0000000
0000000000000000000000000000000000000000000000000000000000000000000000FF
FFFFFFFFFFC0FFFFFFFFFFFFC0FFFFFFFFFFFFC000FFC00001FFC0007F8000001FC0007F
8000000FE0007F80000003E0007F80000003E0007F80000001E0007F80000000E0007F80
000000E0007F80000000E0007F8000000060007F8000000060007F8000000060007F8000
000060007F8000000030007F8000300030007F8000300030007F8000300030007F800030
0030007F8000300000007F8000300000007F8000700000007F8000700000007F8000F000
00007F8001F00000007F8007F00000007FFFFFF00000007FFFFFF00000007FFFFFF00000
007F8007F00000007F8001F00000007F8000F00000007F8000700000007F800070000000
7F8000300000007F8000300000007F8000300006007F8000300006007F8000300006007F
800030000C007F800000000C007F800000000C007F800000000C007F800000000C007F80
0000001C007F8000000018007F8000000018007F8000000038007F8000000038007F8000
000078007F8000000078007F80000000F0007F80000001F0007F80000003F0007F800000
07F0007F8000001FF000FFC00001FFF0FFFFFFFFFFFFE0FFFFFFFFFFFFE0FFFFFFFFFFFF
E0374E7DCD3D>201 D<001C000000003E000000003F000000003F800000003FC0000000
1FE00000000FF000000003F800000000FC000000007E000000001F000000000780000000
0380000000008000000000000000000000000000000000001FF0000000FFFC000003E03F
00000F000FC0001C0007E0001F0003F0003F8001F8003FC000FC003FC000FC003FC000FC
003FC0007E001F80007E000F00007E000000007E000000007E000000007E000000007E00
00001FFE000003FFFE00001FF87E00007F807E0001FC007E0007F0007E000FE0007E001F
C0007E003F80007E007F80007E007F00007E007F00007E03FE00007E03FE00007E03FE00
007E03FE0000FE03FE0000FE03FE0001FE037F0001BE037F0003BE033F80071F061FC00E
1F8E0FF03C0FFC03FFF007F8003FC003E0283B7CB92D>224 D<000E000000001F000000
001F800000001FC00000001FE00000000FF000000007F800000001FC000000007E000000
003F000000000F8000000003C000000001C0000000004000000000000000000000000000
0000000003FC0000001FFF8000007E07E00000F801F00001F000F80003E0007C0007C000
3E000FC0003F001F80001F001F80001F803F00001F803F00000F807F00000F807F00000F
C07E00000FC07E00000FC0FE00000FC0FE00000FC0FFFFFFFFC0FFFFFFFFC0FE00000000
FE00000000FE00000000FE00000000FE00000000FE000000007E000000007F000000007F
000000007F000000003F000000C03F800000C01F800001C00FC00001800FC000038007E0
00070003F0000E0001F8001C0000FC003800003F01F000000FFFC0000001FE0000223B7D
B928>232 D<00000E000000001F000000003F000000007F00000000FF00000001FE0000
0003FC00000007F00000000FC00000001F800000003E0000000078000000007000000000
400000000000000000000000000000000000000003FC0000001FFF8000007E07E00000F8
01F00001F000F80003E0007C0007C0003E000FC0003F001F80001F001F80001F803F0000
1F803F00000F807F00000F807F00000FC07E00000FC07E00000FC0FE00000FC0FE00000F
C0FFFFFFFFC0FFFFFFFFC0FE00000000FE00000000FE00000000FE00000000FE00000000
FE000000007E000000007F000000007F000000007F000000003F000000C03F800000C01F
800001C00FC00001800FC000038007E000070003F0000E0001F8001C0000FC003800003F
01F000000FFFC0000001FE0000223B7DB928>I E
/Fb load 0 Fb currentfont 91.25 scalefont put/FMat X/FBB
X/IEn X
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fc ecbx1095 10.95 25
/EN0 load IEn S/IEn X FBB FMat/FMat[0.0109589 0 0 -0.0109589
0 0]N/FBB[-6 -31 109 85]N
/Fc 25 119 df<0000007FF00003FFC0000000000FFFFE007FFFF0000000007FFFFF83FF
FFFC00000001FFC01FCFFE00FE00000007FE0007FFF0001F0000001FFC000FFFE0003F80
00003FF0001FFF8000FFC000007FE0003FFF0001FFC000007FE0007FFF0001FFC00000FF
C0007FFE0001FFC00000FFC0007FFE0003FFE00001FF80007FFC0001FFC00001FF80007F
FC0001FFC00001FF80007FFC0001FFC00001FF80003FFC0000FF800001FF80001FFC0000
7F000001FF80000FFC00001C000001FF80000FFC000000000001FF80000FFC0000000000
01FF80000FFC000000000001FF80000FFC000000000001FF80000FFC000000000001FF80
000FFC000000000001FF80000FFC001FFFE000FFFFFFFFFFFFFFFFFFE000FFFFFFFFFFFF
FFFFFFE000FFFFFFFFFFFFFFFFFFE000FFFFFFFFFFFFFFFFFFE00001FF80000FFC00007F
E00001FF80000FFC00007FE00001FF80000FFC00007FE00001FF80000FFC00007FE00001
FF80000FFC00007FE00001FF80000FFC00007FE00001FF80000FFC00007FE00001FF8000
0FFC00007FE00001FF80000FFC00007FE00001FF80000FFC00007FE00001FF80000FFC00
007FE00001FF80000FFC00007FE00001FF80000FFC00007FE00001FF80000FFC00007FE0
0001FF80000FFC00007FE00001FF80000FFC00007FE00001FF80000FFC00007FE00001FF
80000FFC00007FE00001FF80000FFC00007FE00001FF80000FFC00007FE00001FF80000F
FC00007FE00001FF80000FFC00007FE00001FF80000FFC00007FE00001FF80000FFC0000
7FE00001FF80000FFC00007FE00001FF80000FFC00007FE00001FF80000FFC00007FE000
01FF80000FFC00007FE00001FF80000FFC00007FE00001FF80000FFC00007FE00001FF80
000FFC00007FE00001FF80000FFC00007FE0007FFFFE03FFFFF01FFFFF807FFFFE03FFFF
F01FFFFF807FFFFE03FFFFF01FFFFF807FFFFE03FFFFF01FFFFF8051407EBF57>30
D<E00000F000007C00003E00001F00000F80000FC00007E00003F00001F80001F80000FC
0000FE00007E00007F00003F80003F80001FC0001FC0001FE0000FE0000FF0000FF00007
F00007F80007F80003F80003FC0003FC0003FC0003FC0003FE0001FE0001FE0001FE0001
FE0001FE0001FF0001FF0001FF0001FF0001FF0001FF0001FF0001FF0001FF0001FF0001
FF0001FF0001FF0001FF0001FF0001FF0001FE0001FE0001FE0001FE0001FE0003FE0003
FC0003FC0003FC0003FC0003F80007F80007F80007F0000FF0000FF0000FE0001FE0001F
C0001FC0003F80003F80007F00007E0000FE0000FC0001F80001F80003F00007E0000FC0
000F80001F00003E00007C0000F00000E00000185A7AC328>41 D<00000F000000001F00
0000007F00000001FF0000000FFF000001FFFF0000FFFFFF0000FFFFFF0000FFF7FF0000
FE07FF00000007FF00000007FF00000007FF00000007FF00000007FF00000007FF000000
07FF00000007FF00000007FF00000007FF00000007FF00000007FF00000007FF00000007
FF00000007FF00000007FF00000007FF00000007FF00000007FF00000007FF00000007FF
00000007FF00000007FF00000007FF00000007FF00000007FF00000007FF00000007FF00
000007FF00000007FF00000007FF00000007FF00000007FF00000007FF00000007FF0000
0007FF00000007FF00000007FF00000007FF00000007FF00000007FF00000007FF000000
07FF00000007FF00000007FF00000007FF00003FFFFFFFF83FFFFFFFF83FFFFFFFF83FFF
FFFFF8253C79BB34>49 D<0003FF800000003FFFF8000000FFFFFE000003FFFFFF800007
F80FFFC0000FC001FFF0001F8000FFF8003F00007FFC007FC0003FFE007FE0003FFE00FF
F0001FFF00FFF8001FFF00FFF8001FFF00FFF8000FFF80FFF8000FFF80FFF8000FFF80FF
F8000FFF807FF0000FFF807FF0000FFF801FC0000FFF800700000FFF800000000FFF0000
00001FFF000000001FFF000000001FFE000000003FFE000000003FFC000000007FF80000
00007FF000000000FFE000000001FFC000000001FF8000000003FF0000000007FE000000
000FF8000000001FF0000000001FE0000000003F80000000007F0000000000FE00000000
01F80007800003F00007800007E0000780000FC0000F00001F80000F00003E00000F0000
7C00000F0000F800001F0001F000001F0001FFFFFFFF0003FFFFFFFE0007FFFFFFFE000F
FFFFFFFE001FFFFFFFFE003FFFFFFFFE007FFFFFFFFE00FFFFFFFFFE00FFFFFFFFFC00FF
FFFFFFFC00FFFFFFFFFC00293C7BBB34>I<0000FFE00000000FFFFC0000003FFFFF8000
00FF01FFE00001F8007FF00003E0003FF80007C0003FFC000FF0001FFE000FFC001FFE00
1FFE001FFF001FFE001FFF001FFE001FFF001FFE001FFF001FFF001FFF001FFE001FFF00
1FFE001FFF000FFE001FFF0007FC001FFE0003F0003FFE000000003FFC000000003FFC00
0000007FF8000000007FF000000000FFE000000001FFC000000003FF000000000FFC0000
0007FFF000000007FFE000000007FFFE0000000001FF80000000007FE0000000003FF800
0000001FFC000000001FFE000000000FFF000000000FFF8000000007FFC000000007FFC0
00000007FFC007800007FFE01FE00007FFE07FF80007FFE07FF80007FFE0FFFC0007FFE0
FFFC0007FFE0FFFC0007FFE0FFFC0007FFE0FFFC0007FFC0FFFC0007FFC0FFF8000FFFC0
7FF8000FFF807FF0000FFF003FC0001FFF001FC0003FFE000FF0007FFC0007FE01FFF000
03FFFFFFE00000FFFFFF8000001FFFFC00000001FFC000002B3D7CBB34>I<00000001F0
0000000001F00000000003F00000000007F0000000000FF0000000001FF0000000001FF0
000000003FF0000000007FF000000000FFF000000000FFF000000001FFF000000003FFF0
00000007FFF00000000FBFF00000000F3FF00000001E3FF00000003C3FF00000007C3FF0
000000783FF0000000F03FF0000001E03FF0000003E03FF0000003C03FF0000007803FF0
00000F003FF000001F003FF000003E003FF000003C003FF0000078003FF00000F0003FF0
0001F0003FF00001E0003FF00003C0003FF0000780003FF0000F80003FF0001F00003FF0
001E00003FF0003C00003FF0007800003FF000F800003FF000FFFFFFFFFFF8FFFFFFFFFF
F8FFFFFFFFFFF8FFFFFFFFFFF80000007FF0000000007FF0000000007FF0000000007FF0
000000007FF0000000007FF0000000007FF0000000007FF0000000007FF0000000007FF0
000000007FF0000001FFFFFFF80001FFFFFFF80001FFFFFFF80001FFFFFFF82D3C7DBB34
>I<00000000F80000000000000001FC0000000000000001FC0000000000000003FE0000
000000000003FE0000000000000003FE0000000000000007FF0000000000000007FF0000
00000000000FFF800000000000000FFF800000000000000FFF800000000000001FFFC000
00000000001FFFC00000000000003FFFE00000000000003FFFE00000000000003FFFE000
00000000007FFFF00000000000007DFFF0000000000000FDFFF8000000000000F8FFF800
0000000000F8FFF8000000000001F8FFFC000000000001F07FFC000000000003F07FFE00
0000000003E03FFE000000000003E03FFE000000000007C03FFF000000000007C01FFF00
000000000FC01FFF80000000000F800FFF80000000001F800FFFC0000000001F000FFFC0
000000001F0007FFC0000000003F0007FFE0000000003E0003FFE0000000007E0003FFF0
000000007C0003FFF0000000007C0001FFF000000000FC0001FFF800000000F80000FFF8
00000001F80000FFFC00000001F00000FFFC00000001FFFFFFFFFC00000003FFFFFFFFFE
00000003FFFFFFFFFE00000007FFFFFFFFFF00000007C000003FFF00000007C000001FFF
0000000FC000001FFF8000000F8000000FFF8000001F8000000FFFC000001F0000000FFF
C000001F00000007FFC000003F00000007FFE000003E00000003FFE000007E00000003FF
F000007C00000003FFF000007C00000001FFF00001FE00000001FFF800FFFFFC0001FFFF
FFF8FFFFFC0001FFFFFFF8FFFFFC0001FFFFFFF8FFFFFC0001FFFFFFF8453F7CBE4E>65
D<FFFFFFFF80FFFFFFFF80FFFFFFFF80FFFFFFFF80003FFE0000003FFE0000003FFE0000
003FFE0000003FFE0000003FFE0000003FFE0000003FFE0000003FFE0000003FFE000000
3FFE0000003FFE0000003FFE0000003FFE0000003FFE0000003FFE0000003FFE0000003F
FE0000003FFE0000003FFE0000003FFE0000003FFE0000003FFE0000003FFE0000003FFE
0000003FFE0000003FFE0000003FFE0000003FFE0000003FFE0000003FFE0000003FFE00
00003FFE0000003FFE0000003FFE0000003FFE0000003FFE0000003FFE0000003FFE0000
003FFE0000003FFE0000003FFE0000003FFE0000003FFE0000003FFE0000003FFE000000
3FFE0000003FFE0000003FFE0000003FFE0000003FFE0000003FFE0000003FFE0000003F
FE0000FFFFFFFF80FFFFFFFF80FFFFFFFF80FFFFFFFF80213E7DBD27>73
D<FFFFFE0000003FFFFFFFFFFF0000003FFFFFFFFFFF8000003FFFFFFFFFFF8000003FFF
FF007FFFC00000003F00007FFFE00000001E00007FFFF00000001E00007BFFF80000001E
000079FFFC0000001E000079FFFE0000001E000078FFFE0000001E0000787FFF0000001E
0000783FFF8000001E0000781FFFC000001E0000780FFFE000001E0000780FFFF000001E
00007807FFF000001E00007803FFF800001E00007801FFFC00001E00007800FFFE00001E
000078007FFF00001E000078003FFF80001E000078003FFFC0001E000078001FFFC0001E
000078000FFFE0001E0000780007FFF0001E0000780003FFF8001E0000780001FFFC001E
0000780001FFFE001E0000780000FFFE001E00007800007FFF001E00007800003FFF801E
00007800001FFFC01E00007800000FFFE01E000078000007FFF01E000078000007FFF81E
000078000003FFF81E000078000001FFFC1E000078000000FFFE1E0000780000007FFF1E
0000780000003FFF9E0000780000003FFFDE0000780000001FFFFE0000780000000FFFFE
00007800000007FFFE00007800000003FFFE00007800000001FFFE00007800000000FFFE
00007800000000FFFE000078000000007FFE000078000000003FFE000078000000001FFE
000078000000000FFE0000780000000007FE0000780000000007FE0000780000000003FE
0000780000000001FE0000FC0000000000FE00FFFFFC000000007E00FFFFFC000000003E
00FFFFFC000000001E00FFFFFC000000001E00483E7CBD51>78 D<7FFFFFFFFFFFFFF8FF
FFFFFFFFFFFFFCFFFFFFFFFFFFFFFCFFFFFFFFFFFFFFFCFFFFFFFFFFFFFFFC7FFFFFFFFF
FFFFF83E06776851>95 D<0007FF800000003FFFF0000001FFFFFC000003FC03FF000007
E000FFC0000FF8007FE0001FF8003FF0001FFC003FF0001FFC001FF8001FFC001FF8001F
FC000FFC001FFC000FFC000FF8000FFC0007F0000FFC0001C0000FFC000000000FFC0000
00000FFC000000000FFC00000003FFFC000001FFFFFC00000FFFFFFC00007FFF8FFC0001
FFF00FFC0007FF800FFC000FFF000FFC001FFC000FFC003FF8000FFC007FF8000FFC007F
F0000FFC00FFF0000FFC00FFE0000FFC00FFE0000FFC00FFE0000FFC00FFE0001FFC00FF
E0001FFC00FFF0003FFC007FF0003FFC007FF8007FFF003FFC01F7FFFC1FFE07E3FFFC07
FFFF81FFFC01FFFE007FFC001FF80000002E2B7DA932>97 D<00FF0000000000FFFF0000
000000FFFF0000000000FFFF0000000000FFFF000000000007FF000000000003FF000000
000003FF000000000003FF000000000003FF000000000003FF000000000003FF00000000
0003FF000000000003FF000000000003FF000000000003FF000000000003FF0000000000
03FF000000000003FF000000000003FF000000000003FF000000000003FF000000000003
FF007FE0000003FF07FFFC000003FF1FFFFF000003FF7F00FFC00003FFF8003FF00003FF
F0001FF80003FFE0000FFC0003FF800007FE0003FF800007FF0003FF000003FF0003FF00
0003FF8003FF000003FF8003FF000003FFC003FF000001FFC003FF000001FFC003FF0000
01FFC003FF000001FFE003FF000001FFE003FF000001FFE003FF000001FFE003FF000001
FFE003FF000001FFE003FF000001FFE003FF000001FFE003FF000001FFE003FF000001FF
E003FF000001FFC003FF000001FFC003FF000001FFC003FF000003FFC003FF000003FF80
03FF000003FF8003FF000007FF0003FF800007FE0003FFC0000FFE0003FFE0000FFC0003
FDF0001FF80003F8F8007FE00003F07F01FFC00003E01FFFFF000003C007FFF800000000
00FFC0000033407DBE3A>I<00007FF0000003FFFF00001FFFFFC0007FE01FE000FF8003
F001FF000FF803FE000FFC07FE001FFC0FFC001FFC1FFC001FFC1FF8001FFC3FF8001FFC
3FF8000FF87FF80007F07FF00001C07FF0000000FFF0000000FFF0000000FFF0000000FF
F0000000FFF0000000FFF0000000FFF0000000FFF0000000FFF0000000FFF0000000FFF0
0000007FF00000007FF00000007FF80000007FF80000003FF800001E3FFC00001E1FFC00
003E0FFC00003C0FFE00007C07FF0000F803FF8001F000FFC003E0007FF00FC0001FFFFF
000007FFFC0000007FE000272B7DA92E>I<0000000007F80000000007FFF80000000007
FFF80000000007FFF80000000007FFF800000000003FF800000000001FF800000000001F
F800000000001FF800000000001FF800000000001FF800000000001FF800000000001FF8
00000000001FF800000000001FF800000000001FF800000000001FF800000000001FF800
000000001FF800000000001FF800000000001FF800000000001FF80000007FE01FF80000
03FFFC1FF800001FFFFF1FF800007FF00FDFF80000FFC003FFF80003FF0000FFF80007FE
00007FF8000FFE00003FF8000FFC00001FF8001FFC00001FF8003FF800001FF8003FF800
001FF8007FF800001FF8007FF000001FF8007FF000001FF8007FF000001FF800FFF00000
1FF800FFF000001FF800FFF000001FF800FFF000001FF800FFF000001FF800FFF000001F
F800FFF000001FF800FFF000001FF800FFF000001FF800FFF000001FF8007FF000001FF8
007FF000001FF8007FF000001FF8007FF800001FF8003FF800001FF8003FF800001FF800
1FF800001FF8001FFC00003FF8000FFC00007FF80007FE0000FFF80003FF0001FFFC0001
FF8007FFFFE0007FE01F9FFFE0001FFFFE1FFFE00007FFF81FFFE000007FC01FE0003340
7DBE3A>I<0000FFE0000007FFFC00003FFFFF00007FE0FF8001FF803FC003FF001FE007
FE000FF00FFC000FF80FFC0007FC1FF80007FC3FF80003FE3FF80003FE3FF80003FE7FF0
0003FE7FF00003FF7FF00003FFFFF00001FFFFF00001FFFFF00001FFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFF0000000FFF0000000FFF0000000FFF0000000FFF00000007FF00000
007FF00000007FF00000003FF80000003FF800000F1FF800000F1FFC00001F0FFC00001E
07FE00003E03FE00007C01FF0000F800FFC003F0007FF01FE0001FFFFFC00007FFFE0000
007FF000282B7DA92F>I<000007FC0000007FFF000001FFFFC00007FE1FE0001FF83FE0
003FF07FF0007FE07FF0007FE07FF000FFC07FF000FFC07FF001FF807FF001FF803FE001
FF800F8001FF80000001FF80000001FF80000001FF80000001FF80000001FF80000001FF
80000001FF80000001FF80000001FF80000001FF800000FFFFFFE000FFFFFFE000FFFFFF
E000FFFFFFE00001FF80000001FF80000001FF80000001FF80000001FF80000001FF8000
0001FF80000001FF80000001FF80000001FF80000001FF80000001FF80000001FF800000
01FF80000001FF80000001FF80000001FF80000001FF80000001FF80000001FF80000001
FF80000001FF80000001FF80000001FF80000001FF80000001FF80000001FF80000001FF
80000001FF80000001FF80000001FF80000001FF8000007FFFFF80007FFFFF80007FFFFF
80007FFFFF800024407DBF20>I<00FF0000000000FFFF0000000000FFFF0000000000FF
FF0000000000FFFF000000000007FF000000000003FF000000000003FF000000000003FF
000000000003FF000000000003FF000000000003FF000000000003FF000000000003FF00
0000000003FF000000000003FF000000000003FF000000000003FF000000000003FF0000
00000003FF000000000003FF000000000003FF000000000003FF003FF0000003FF00FFFE
000003FF03FFFF800003FF0FC0FFC00003FF1E007FE00003FF3C003FF00003FF78003FF0
0003FFF0003FF00003FFE0001FF80003FFC0001FF80003FFC0001FF80003FF80001FF800
03FF80001FF80003FF80001FF80003FF00001FF80003FF00001FF80003FF00001FF80003
FF00001FF80003FF00001FF80003FF00001FF80003FF00001FF80003FF00001FF80003FF
00001FF80003FF00001FF80003FF00001FF80003FF00001FF80003FF00001FF80003FF00
001FF80003FF00001FF80003FF00001FF80003FF00001FF80003FF00001FF80003FF0000
1FF80003FF00001FF80003FF00001FF80003FF00001FF80003FF00001FF800FFFFFC07FF
FFE0FFFFFC07FFFFE0FFFFFC07FFFFE0FFFFFC07FFFFE0333F7CBE3A>104
D<01F80003FC0007FE000FFF001FFF801FFF801FFF801FFF801FFF801FFF800FFF0007FE
0003FC0001F80000000000000000000000000000000000000000000000000000000000FF
00FFFF00FFFF00FFFF00FFFF0007FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF
0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF
0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF0003FF
00FFFFF8FFFFF8FFFFF8FFFFF815407CBF1D>I<01FE003FF00000FFFE00FFFE0000FFFE
03FFFF8000FFFE0FC0FFC000FFFE1E007FE00007FE3C003FF00003FE78003FF00003FEF0
003FF00003FFE0001FF80003FFC0001FF80003FFC0001FF80003FF80001FF80003FF8000
1FF80003FF80001FF80003FF00001FF80003FF00001FF80003FF00001FF80003FF00001F
F80003FF00001FF80003FF00001FF80003FF00001FF80003FF00001FF80003FF00001FF8
0003FF00001FF80003FF00001FF80003FF00001FF80003FF00001FF80003FF00001FF800
03FF00001FF80003FF00001FF80003FF00001FF80003FF00001FF80003FF00001FF80003
FF00001FF80003FF00001FF80003FF00001FF80003FF00001FF800FFFFFC07FFFFE0FFFF
FC07FFFFE0FFFFFC07FFFFE0FFFFFC07FFFFE033297CA83A>110
D<00007FF000000003FFFE0000001FFFFFC000007FE03FF00000FF800FF80001FF0007FC
0003FE0003FE0007FC0001FF000FF80000FF801FF80000FFC01FF80000FFC03FF80000FF
E03FF000007FE07FF000007FF07FF000007FF07FF000007FF07FF000007FF0FFF000007F
F8FFF000007FF8FFF000007FF8FFF000007FF8FFF000007FF8FFF000007FF8FFF000007F
F8FFF000007FF8FFF000007FF8FFF000007FF87FF000007FF07FF000007FF07FF000007F
F07FF000007FF03FF80000FFE03FF80000FFE01FF80000FFC00FF80000FF800FFC0001FF
8007FE0003FF0003FF0007FE0001FF800FFC00007FE03FF000001FFFFFC0000007FFFF00
0000007FF000002D2B7DA934>I<01FE01FC00FFFE07FF80FFFE0FFFE0FFFE3F1FF0FFFE
3C1FF007FE783FF803FEF03FF803FEE03FF803FFE03FF803FFC03FF803FFC01FF003FF80
0FE003FF80038003FF80000003FF80000003FF00000003FF00000003FF00000003FF0000
0003FF00000003FF00000003FF00000003FF00000003FF00000003FF00000003FF000000
03FF00000003FF00000003FF00000003FF00000003FF00000003FF00000003FF00000003
FF00000003FF00000003FF00000003FF000000FFFFFF0000FFFFFF0000FFFFFF0000FFFF
FF000025297DA82B>114 D<001FF80E0001FFFF3E0007FFFFFE000FE007FE001F8001FE
003F0000FE007E00007E007C00003E00FC00003E00FC00001E00FC00001E00FE00001E00
FF00001E00FF80000000FFE0000000FFFF0000007FFFFC00007FFFFF80003FFFFFE0001F
FFFFF8000FFFFFFC0003FFFFFE0000FFFFFF00003FFFFF000003FFFF8000000FFF800000
01FFC0F000007FC0F000003FC0F800001FC0F800001FC0F800000FC0FC00000FC0FC0000
0FC0FE00000F80FE00001F80FF00001F00FF80003F00FFE0007E00FFF803FC00FCFFFFF0
00F03FFFC000E007FE0000222B7DA929>I<000780000007800000078000000780000007
8000000F8000000F8000000F8000000F8000001F8000001F8000001F8000003F8000007F
8000007F800000FF800001FF800007FF80001FFFFFFCFFFFFFFCFFFFFFFCFFFFFFFC01FF
800001FF800001FF800001FF800001FF800001FF800001FF800001FF800001FF800001FF
800001FF800001FF800001FF800001FF800001FF800001FF800001FF800001FF800001FF
800001FF800001FF801E01FF801E01FF801E01FF801E01FF801E01FF801E01FF801E01FF
801E01FF801E00FF803C00FFC03C00FFC03C007FE078003FF0F0001FFFE00007FFC00000
FF001F3B7EB928>I<00FF000007F800FFFF0007FFF800FFFF0007FFF800FFFF0007FFF8
00FFFF0007FFF80007FF00003FF80003FF00001FF80003FF00001FF80003FF00001FF800
03FF00001FF80003FF00001FF80003FF00001FF80003FF00001FF80003FF00001FF80003
FF00001FF80003FF00001FF80003FF00001FF80003FF00001FF80003FF00001FF80003FF
00001FF80003FF00001FF80003FF00001FF80003FF00001FF80003FF00001FF80003FF00
001FF80003FF00001FF80003FF00001FF80003FF00001FF80003FF00001FF80003FF0000
1FF80003FF00003FF80003FF00003FF80003FF00003FF80003FF00007FF80001FF0000FF
F80001FF0000FFF80001FF8001FFFC0000FF8007DFFFE0007FE01F9FFFE0001FFFFE1FFF
E00007FFF81FFFE00000FFE01FE000332A7CA83A>I<FFFFF8001FFFC0FFFFF8001FFFC0
FFFFF8001FFFC0FFFFF8001FFFC003FF800003F80001FF800001E00001FFC00003E00000
FFC00003C00000FFE00003C000007FE000078000007FF000078000007FF0000F8000003F
F0000F0000003FF8001F0000001FF8001E0000001FFC003E0000000FFC003C0000000FFE
007C00000007FE007800000007FF00F800000003FF00F000000003FF81F000000001FF81
E000000001FFC1E000000000FFC3C000000000FFE3C000000000FFE7C0000000007FE780
000000007FFF80000000003FFF00000000003FFF00000000001FFE00000000001FFE0000
0000000FFC00000000000FFC000000000007F8000000000007F8000000000003F0000000
000003F0000000000001E000000032287EA737>I E
/Fc load 0 Fc currentfont 91.25 scalefont put/FMat X/FBB
X/IEn X
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fd ecbx1440 14.4 9
/EN0 load IEn S/IEn X FBB FMat/FMat[0.00833334 0 0 -0.00833334
0 0]N/FBB[-8 -37 139 110]N
/Fd 9 121 df<00001FFE0000000001FFFFF00000000FFFFFFC0000003FFFFFFF800000
7FFFFFFFE00001FF803FFFF00003FC0007FFFC0007F00001FFFE000FE00000FFFF001F80
00007FFF803F0000003FFF803F0000001FFFC07FE000001FFFE07FF800000FFFE07FFC00
000FFFF0FFFC000007FFF0FFFE000007FFF0FFFE000003FFF8FFFE000003FFF8FFFE0000
03FFF8FFFE000003FFF8FFFE000003FFF87FFC000003FFF87FFC000003FFF83FF8000003
FFF81FF0000003FFF80380000003FFF80000000003FFF00000000007FFF00000000007FF
F00000000007FFE0000000000FFFE0000000000FFFC0000000001FFFC0000000001FFF80
000000003FFF00000000003FFE00000000007FFC0000000000FFF80000000000FFF00000
000001FFE00000000003FFC00000000007FF800000000007FF00000000000FFC00000000
001FF800000000003FF000000000007FC00000000000FF800000000001FF000000000003
FC000000000007F800000000000FF00000F800001FE00000F800003FC00000F800007F00
0000F80000FE000001F00001FC000001F00003F8000001F00007F0000001F00007E00000
01F0000F80000003F0001F00000003F0003E00000007F0007FFFFFFFFFF000FFFFFFFFFF
E001FFFFFFFFFFE003FFFFFFFFFFE007FFFFFFFFFFE00FFFFFFFFFFFE01FFFFFFFFFFFE0
3FFFFFFFFFFFE07FFFFFFFFFFFE0FFFFFFFFFFFFE0FFFFFFFFFFFFC0FFFFFFFFFFFFC0FF
FFFFFFFFFFC0FFFFFFFFFFFFC0354E7ACD42>50 D<000007FFC0000000007FFFFC000000
03FFFFFF8000000FFFFFFFE000001FF803FFF800007FC000FFFC0000FE00003FFE0001FC
00003FFF0003F800001FFF8003FE00001FFF8007FF80000FFFC007FFC0000FFFC00FFFC0
000FFFE00FFFE0000FFFE00FFFE0000FFFE00FFFE0000FFFE00FFFE0000FFFE00FFFE000
0FFFE00FFFE0000FFFE007FFC0000FFFE007FFC0000FFFC003FF80000FFFC001FF00001F
FFC0003800001FFF80000000001FFF80000000003FFF00000000003FFF00000000007FFE
00000000007FFC0000000000FFF80000000001FFF00000000003FFC0000000000FFF8000
0000007FFE000000007FFFF8000000007FFFC0000000007FFFFC000000007FFFFF800000
000003FFE000000000007FF800000000003FFE00000000001FFF00000000000FFF800000
00000FFFC00000000007FFE00000000007FFF00000000003FFF80000000003FFF8000000
0003FFFC0000000001FFFC0000000001FFFC0000000001FFFE0000000001FFFE00000000
01FFFE03C0000001FFFE0FF0000001FFFE3FFC000001FFFE7FFE000001FFFE7FFE000001
FFFEFFFF000001FFFEFFFF000001FFFEFFFF000001FFFCFFFF000001FFFCFFFF000003FF
FCFFFF000003FFF8FFFF000003FFF87FFE000003FFF07FFC000007FFF07FF8000007FFE0
3FE000000FFFC01FC000001FFFC00FF000003FFF8007FE00007FFE0003FFE003FFFC0001
FFFFFFFFF800007FFFFFFFE000000FFFFFFF00000001FFFFFC000000001FFF800000374F
7BCD42>I<0000000000FC00000000000001FC00000000000001FC00000000000003FC00
000000000007FC0000000000000FFC0000000000000FFC0000000000001FFC0000000000
003FFC0000000000007FFC0000000000007FFC000000000000FFFC000000000001FFFC00
0000000003FFFC000000000003FFFC000000000007FFFC00000000000FFFFC0000000000
1FFFFC00000000001F7FFC00000000003E7FFC00000000007E7FFC0000000000FC7FFC00
00000000F87FFC0000000001F07FFC0000000003F07FFC0000000007E07FFC0000000007
C07FFC000000000F807FFC000000001F807FFC000000003F007FFC000000003E007FFC00
0000007C007FFC00000000FC007FFC00000001F8007FFC00000001F0007FFC00000003E0
007FFC00000007E0007FFC0000000FC0007FFC0000000F80007FFC0000001F00007FFC00
00003F00007FFC0000007E00007FFC0000007C00007FFC000000F800007FFC000001F800
007FFC000003F000007FFC000003E000007FFC000007C000007FFC00000FC000007FFC00
001F8000007FFC00001F0000007FFC00003E0000007FFC00007E0000007FFC0000FC0000
007FFC0000FFFFFFFFFFFFFF80FFFFFFFFFFFFFF80FFFFFFFFFFFFFF80FFFFFFFFFFFFFF
80FFFFFFFFFFFFFF8000000000FFFC000000000000FFFC000000000000FFFC0000000000
00FFFC000000000000FFFC000000000000FFFC000000000000FFFC000000000000FFFC00
0000000000FFFC000000000000FFFC000000000000FFFC000000000000FFFC0000000000
00FFFC000000000000FFFC000000000000FFFC000000001FFFFFFFFF8000001FFFFFFFFF
8000001FFFFFFFFF8000001FFFFFFFFF8000001FFFFFFFFF80394F7CCE42>I<FFFFFFFF
FFFFFFFFFE00FFFFFFFFFFFFFFFFFE00FFFFFFFFFFFFFFFFFE00FFFFFFFFFFFFFFFFFE00
FFFFFFFFFFFFFFFFFE00000FFFE0000007FFFF00000FFFE00000007FFF00000FFFE00000
001FFF00000FFFE000000007FF00000FFFE000000003FF00000FFFE000000001FF00000F
FFE000000000FF00000FFFE0000000007F00000FFFE0000000007F00000FFFE000000000
3F80000FFFE0000000003F80000FFFE0000000001F80000FFFE0000000001F80000FFFE0
000000001F80000FFFE0000000000F80000FFFE0000000000F80000FFFE0000000000F80
000FFFE0000000000F80000FFFE00001F0000FC0000FFFE00001F00007C0000FFFE00001
F00007C0000FFFE00001F00007C0000FFFE00001F00007C0000FFFE00001F0000000000F
FFE00001F0000000000FFFE00003F0000000000FFFE00003F0000000000FFFE00003F000
0000000FFFE00007F0000000000FFFE0000FF0000000000FFFE0001FF0000000000FFFE0
00FFF0000000000FFFFFFFFFF0000000000FFFFFFFFFF0000000000FFFFFFFFFF0000000
000FFFFFFFFFF0000000000FFFFFFFFFF0000000000FFFE000FFF0000000000FFFE0001F
F0000000000FFFE0000FF0000000000FFFE00007F0000000000FFFE00003F0000000000F
FFE00003F0000000000FFFE00003F0000000000FFFE00001F0000000000FFFE00001F000
00F8000FFFE00001F00000F8000FFFE00001F00000F8000FFFE00001F00001F0000FFFE0
0001F00001F0000FFFE00001F00001F0000FFFE00000000001F0000FFFE00000000001F0
000FFFE00000000003F0000FFFE00000000003F0000FFFE00000000003E0000FFFE00000
000003E0000FFFE00000000007E0000FFFE00000000007E0000FFFE00000000007E0000F
FFE0000000000FE0000FFFE0000000000FC0000FFFE0000000001FC0000FFFE000000000
3FC0000FFFE0000000003FC0000FFFE0000000007FC0000FFFE000000000FFC0000FFFE0
00000001FF80000FFFE000000007FF80000FFFE00000001FFF80000FFFE00000007FFF80
000FFFE000000FFFFF80FFFFFFFFFFFFFFFFFF80FFFFFFFFFFFFFFFFFF80FFFFFFFFFFFF
FFFFFF00FFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFF004D527CD156>69
D<000003FFE0000000003FFFFE00000000FFFFFF80000003FFFFFFE000000FFF003FF800
003FFC0007FC00007FF8000FFE0000FFF0001FFE0001FFE0003FFF0003FFC0003FFF0007
FF80003FFF0007FF80003FFF000FFF00003FFF001FFF00003FFF001FFE00003FFF003FFE
00001FFE003FFE00000FFC003FFE000007F8007FFE00000000007FFC00000000007FFC00
000000007FFC0000000000FFFC0000000000FFFC0000000000FFFC0000000000FFFC0000
000000FFFC0000000000FFFC0000000000FFFC0000000000FFFC0000000000FFFC000000
0000FFFC0000000000FFFC0000000000FFFC0000000000FFFC00000000007FFC00000000
007FFE00000000007FFE00000000007FFE00000000003FFE00000000003FFF0000000000
1FFF0000000F801FFF0000000F800FFF8000001F800FFF8000001F0007FFC000003F0003
FFE000003E0001FFF000007E0000FFF80000FC00007FFC0001F800003FFF0007F000000F
FFC01FE0000007FFFFFF80000001FFFFFE000000003FFFF80000000003FF80000031387C
B63A>99 D<000007FF80000000007FFFF800000001FFFFFE00000007FFFFFF8000001FFF
03FFE000003FFC007FF000007FF0003FF80000FFE0001FFC0001FFC0000FFC0003FF8000
07FE0007FF800007FF000FFF000003FF000FFF000003FF801FFE000003FF801FFE000001
FF803FFE000001FFC03FFE000001FFC03FFE000001FFC07FFC000001FFC07FFC000001FF
E07FFC000000FFE07FFC000000FFE0FFFC000000FFE0FFFC000000FFE0FFFFFFFFFFFFE0
FFFFFFFFFFFFE0FFFFFFFFFFFFE0FFFFFFFFFFFFE0FFFC0000000000FFFC0000000000FF
FC0000000000FFFC0000000000FFFC0000000000FFFC00000000007FFC00000000007FFC
00000000007FFC00000000007FFE00000000003FFE00000000003FFE00000000003FFE00
000003E01FFF00000003E01FFF00000007E00FFF00000007C007FF8000000FC007FF8000
000F8003FFC000001F8001FFE000003F0000FFF000007E00007FFC0001FC00001FFF0007
F800000FFFE03FF0000003FFFFFFC0000000FFFFFF800000003FFFFC0000000001FFE000
0033387CB63C>101 D<003F000000FFC00001FFE00003FFF00003FFF00007FFF80007FF
F80007FFF80007FFF80007FFF80007FFF80003FFF00003FFF00001FFE00000FFC000003F
000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000001FF800FFFFF800FFFFF800FFFF
F800FFFFF800FFFFF80001FFF80000FFF80000FFF80000FFF80000FFF80000FFF80000FF
F80000FFF80000FFF80000FFF80000FFF80000FFF80000FFF80000FFF80000FFF80000FF
F80000FFF80000FFF80000FFF80000FFF80000FFF80000FFF80000FFF80000FFF80000FF
F80000FFF80000FFF80000FFF80000FFF80000FFF80000FFF80000FFF80000FFF80000FF
F80000FFF80000FFF80000FFF80000FFF80000FFF80000FFF80000FFF80000FFF80000FF
F800FFFFFFF0FFFFFFF0FFFFFFF0FFFFFFF0FFFFFFF01C547CD324>105
D<003FF001FC00FFFFF00FFF80FFFFF01FFFE0FFFFF07FFFF0FFFFF0FE1FF8FFFFF1F83F
F801FFF1F07FFC00FFF3E07FFC00FFF3C07FFC00FFF7807FFC00FFF7807FFC00FFFF007F
FC00FFFF003FF800FFFE001FF000FFFE000FE000FFFE00000000FFFC00000000FFFC0000
0000FFFC00000000FFFC00000000FFF800000000FFF800000000FFF800000000FFF80000
0000FFF800000000FFF800000000FFF800000000FFF800000000FFF800000000FFF80000
0000FFF800000000FFF800000000FFF800000000FFF800000000FFF800000000FFF80000
0000FFF800000000FFF800000000FFF800000000FFF800000000FFF800000000FFF80000
0000FFF800000000FFF800000000FFF800000000FFF800000000FFF800000000FFF80000
0000FFF8000000FFFFFFFE0000FFFFFFFE0000FFFFFFFE0000FFFFFFFE0000FFFFFFFE00
002E367DB535>114 D<FFFFFFF001FFFFFCFFFFFFF001FFFFFCFFFFFFF001FFFFFCFFFF
FFF001FFFFFCFFFFFFF001FFFFFC007FFE00001FF800003FFF00000FE000001FFF80001F
C000001FFF80001F8000000FFFC0003F00000007FFE0007E00000003FFF000FE00000001
FFF801FC00000001FFF803F800000000FFFC03F0000000007FFE07E0000000003FFF0FC0
000000003FFF1FC0000000001FFFBF80000000000FFFFF000000000007FFFE0000000000
07FFFC000000000003FFF8000000000001FFF8000000000000FFFC0000000000007FFE00
00000000007FFE0000000000003FFF0000000000003FFF8000000000007FFFC000000000
00FFFFC00000000000FFFFE00000000001FBFFF00000000003F1FFF80000000007F0FFFC
000000000FE0FFFC000000001FC07FFE000000001F803FFF000000003F001FFF80000000
7E001FFF80000000FE000FFFC0000001FC0007FFE0000003F80003FFF0000003F00003FF
F8000007E00001FFF800000FC00000FFFC00001FC000007FFE00007FE000003FFF00FFFF
FE0007FFFFFFFFFFFE0007FFFFFFFFFFFE0007FFFFFFFFFFFE0007FFFFFFFFFFFE0007FF
FFFF40357EB445>120 D E
/Fd load 0 Fd currentfont 120 scalefont put/FMat X/FBB
X/IEn X
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fe ecrm2074 20.74 8
/EN0 load IEn S/IEn X FBB FMat/FMat[0.00578592 0 0 -0.00578592
0 0]N/FBB[-6 -45 168 164]N
/Fe 8 116 df<0000000000000F000000000000000000000000000F0000000000000000
00000000000F000000000000000000000000001F800000000000000000000000001F8000
00000000000000000000003FC00000000000000000000000003FC0000000000000000000
0000003FC00000000000000000000000007FE00000000000000000000000007FE0000000
0000000000000000007FE0000000000000000000000000FFF00000000000000000000000
00FFF0000000000000000000000000FFF0000000000000000000000001FFF80000000000
00000000000001FFF8000000000000000000000001FFF8000000000000000000000003BF
FC0000000000000000000000039FFC0000000000000000000000039FFC00000000000000
00000000071FFE0000000000000000000000070FFE00000000000000000000000F0FFF00
000000000000000000000E0FFF00000000000000000000000E07FF000000000000000000
00001E07FF80000000000000000000001C03FF80000000000000000000001C03FF800000
00000000000000003C03FFC0000000000000000000003801FFC000000000000000000000
3801FFC0000000000000000000007001FFE0000000000000000000007000FFE000000000
0000000000007000FFE000000000000000000000E000FFF000000000000000000000E000
7FF000000000000000000000E0007FF000000000000000000001C0007FF8000000000000
00000001C0003FF800000000000000000003C0003FFC0000000000000000000380003FFC
0000000000000000000380001FFC0000000000000000000780001FFE0000000000000000
000700000FFE0000000000000000000700000FFE0000000000000000000F00000FFF0000
000000000000000E000007FF0000000000000000000E000007FF0000000000000000001C
000007FF8000000000000000001C000003FF8000000000000000001C000003FF80000000
000000000038000003FFC0000000000000000038000001FFC00000000000000000780000
01FFE0000000000000000070000001FFE0000000000000000070000000FFE00000000000
000000F0000000FFF00000000000000000E00000007FF00000000000000000E00000007F
F00000000000000001E00000007FF80000000000000001C00000003FF800000000000000
01C00000003FF80000000000000003800000003FFC0000000000000003800000001FFC00
00000000000003800000001FFC0000000000000007000000001FFE000000000000000700
0000000FFE0000000000000007000000000FFE000000000000000E000000000FFF000000
000000000E0000000007FF000000000000001E0000000007FF800000000000001C000000
0007FF800000000000001C0000000003FF800000000000003C0000000003FFC000000000
0000380000000001FFC00000000000003FFFFFFFFFFFFFC00000000000007FFFFFFFFFFF
FFE00000000000007FFFFFFFFFFFFFE00000000000007FFFFFFFFFFFFFE0000000000000
E00000000000FFF0000000000000E000000000007FF0000000000000E000000000007FF0
000000000001C000000000007FF8000000000001C000000000003FF8000000000001C000
000000003FF80000000000038000000000003FFC0000000000038000000000001FFC0000
000000078000000000001FFE0000000000070000000000001FFE00000000000700000000
00000FFE00000000000F0000000000000FFF00000000000E00000000000007FF00000000
000E00000000000007FF00000000001E00000000000007FF80000000001C000000000000
03FF80000000001C00000000000003FF80000000003800000000000003FFC00000000038
00000000000001FFC0000000003800000000000001FFC0000000007000000000000001FF
E0000000007000000000000000FFE0000000007000000000000000FFE000000000E00000
0000000000FFF000000000E0000000000000007FF000000001E0000000000000007FF800
000001C0000000000000007FF800000001C0000000000000003FF800000003C000000000
0000003FFC00000003C0000000000000001FFC00000007C0000000000000001FFC000000
07C0000000000000001FFE0000000FC0000000000000001FFE0000001FC0000000000000
001FFF0000003FE0000000000000001FFF0000007FF0000000000000001FFF800001FFF8
000000000000003FFFC0000FFFFE00000000000000FFFFF000FFFFFFC000000000003FFF
FFFFF0FFFFFFC000000000003FFFFFFFF0FFFFFFC000000000003FFFFFFFF0FFFFFFC000
000000003FFFFFFFF06C797BF877>65 D<000003FF800000000000001FFFF00000000000
00FFFFFE000000000003FC01FF800000000007E0003FE0000000001F80000FF000000000
3E000007FC000000007C000003FE00000000F0000001FF00000001F0000000FF80000001
E00000007FC0000003C00000007FC0000003800000003FE0000007800000001FF0000007
000000001FF0000007F80000001FF000000FFE0000000FF800000FFE0000000FF800000F
FF0000000FF800000FFF00000007FC00000FFF00000007FC00000FFF00000007FC00000F
FF00000007FC000007FE00000007FC000007FE00000007FC000001F800000007FC000000
0000000007FC0000000000000007FC0000000000000007FC0000000000000007FC000000
0000000007FC0000000000000007FC00000000000007FFFC000000000003FFFFFC000000
00007FFFFFFC0000000003FFFF07FC000000001FFF8007FC000000007FFC0007FC000000
01FFE00007FC00000007FF800007FC0000001FFE000007FC0000003FF8000007FC000000
FFF0000007FC000001FFE0000007FC000003FFC0000007FC000007FF80000007FC000007
FF00000007FC00000FFE00000007FC00001FFC00000007FC00001FFC00000007FC00003F
F800000007FC00003FF800000007FC001C7FF000000007FC001C7FF000000007FC001C7F
F000000007FC001CFFF000000007FC001CFFE000000007FC001CFFE00000000FFC001CFF
E00000000FFC001CFFE00000000FFC001CFFE00000000FFC001CFFE00000001FFC001CFF
E00000001FFC001CFFF00000003FFC001C7FF00000003BFC001C7FF00000007BFC001C7F
F8000000F1FC00183FF8000001E1FE00381FFC000003C1FE00380FFE000007C0FF007007
FF00000F80FF007003FF80001E007F80E001FFC0007C007FE3E0007FF807F0003FFFC000
1FFFFFC0001FFF800003FFFF000007FE0000003FF8000001F800464D78CB50>97
D<0001F00000000000000007FFF000000000000000FFFFF000000000000000FFFFF00000
0000000000FFFFF000000000000000FFFFF00000000000000001FFF00000000000000000
7FF000000000000000003FF000000000000000003FF000000000000000001FF000000000
000000001FF000000000000000001FF000000000000000001FF000000000000000001FF0
00000000000000001FF000000000000000001FF000000000000000001FF0000000000000
00001FF000000000000000001FF000000000000000001FF000000000000000001FF00000
0000000000001FF000000000000000001FF000000000000000001FF00000000000000000
1FF000000000000000001FF000000000000000001FF000000000000000001FF000000000
000000001FF000000000000000001FF000000000000000001FF000000000000000001FF0
00000000000000001FF000000000000000001FF000000000000000001FF0000000000000
00001FF000000000000000001FF000000000000000001FF000000000000000001FF00000
0000000000001FF000000000000000001FF000000000000000001FF00000000000000000
1FF000000000000000001FF000000000000000001FF00003FF00000000001FF0003FFFF0
000000001FF000FFFFFE000000001FF003F801FF800000001FF00FC0003FE00000001FF0
1F00000FF00000001FF07C000007FC0000001FF0F8000003FE0000001FF1E0000000FF00
00001FF3C00000007F8000001FF7800000007FC000001FFF000000003FE000001FFF0000
00001FF000001FFE000000000FF000001FFC000000000FF800001FFC0000000007FC0000
1FF80000000007FC00001FF00000000003FE00001FF00000000003FF00001FF000000000
03FF00001FF00000000001FF00001FF00000000001FF80001FF00000000001FF80001FF0
0000000000FFC0001FF00000000000FFC0001FF00000000000FFC0001FF00000000000FF
E0001FF00000000000FFE0001FF00000000000FFE0001FF000000000007FE0001FF00000
0000007FE0001FF000000000007FF0001FF000000000007FF0001FF000000000007FF000
1FF000000000007FF0001FF000000000007FF0001FF000000000007FF0001FF000000000
007FF0001FF000000000007FF0001FF000000000007FF0001FF000000000007FF0001FF0
00000000007FF0001FF000000000007FF0001FF000000000007FF0001FF000000000007F
F0001FF000000000007FE0001FF000000000007FE0001FF00000000000FFE0001FF00000
000000FFE0001FF00000000000FFC0001FF00000000000FFC0001FF00000000000FFC000
1FF00000000001FFC0001FF00000000001FF80001FF00000000001FF80001FF000000000
01FF00001FF00000000003FF00001FF00000000003FE00001FF80000000007FE00001FF8
0000000007FC00001FFC000000000FF800001FFC000000000FF800001FFE000000001FF0
00001FEE000000003FE000001FCF000000003FC000001FC7800000007F8000001F83C000
0000FF0000001F81E0000001FE0000001F80F0000003FC0000001F007800000FF8000000
1F003E00001FE00000001E001F80007FC00000001E0007F007FF000000001E0001FFFFFC
000000001C00007FFFE00000000000000007FE000000004C797AF759>I<0000001FFC00
0000000001FFFFC00000000007FFFFF0000000001FF00FFC000000007F8001FF00000000
FF00007FC0000003FC00003FE0000007F800001FF000000FF000000FF800001FE0000007
FC00003FC0000003FE00007F80000003FE0000FF80000001FF0000FF00000001FF0001FF
00000000FF8003FE00000000FF8003FE000000007FC007FC000000007FC007FC00000000
7FE00FF8000000003FE00FF8000000003FE01FF8000000003FF01FF8000000003FF03FF0
000000001FF03FF0000000001FF03FF0000000001FF07FF0000000001FF87FF000000000
1FF87FF0000000001FF87FE0000000001FF87FE0000000001FF8FFE0000000001FF8FFE0
000000001FF8FFFFFFFFFFFFFFF8FFFFFFFFFFFFFFF8FFFFFFFFFFFFFFF8FFE000000000
0000FFE0000000000000FFE0000000000000FFE0000000000000FFE0000000000000FFE0
000000000000FFE0000000000000FFE0000000000000FFE0000000000000FFE000000000
00007FE00000000000007FF00000000000007FF00000000000007FF00000000000003FF0
0000000000003FF00000000000003FF00000000000001FF80000000000001FF800000000
00001FF80000000000380FFC0000000000380FFC00000000007807FC00000000007007FE
00000000007003FE0000000000F001FF0000000000E001FF0000000001E000FF80000000
03C0007FC00000000380003FE00000000780001FE00000000F00000FF00000001E000007
F80000003C000003FE00000078000001FF000000F00000007FC00003E00000003FF0000F
800000000FFE00FF0000000003FFFFFC00000000007FFFE0000000000007FE0000003D4D
7BCB47>101 D<001F0000007FC00000FFE00000FFE00001FFF00001FFF00001FFF00001
FFF00001FFF00000FFE00000FFE000007FC000001F000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000001F00003FFF0007FFFF0007FFFF0007FFFF0007F
FFF00001FFF000007FF000003FF000003FF000001FF000001FF000001FF000001FF00000
1FF000001FF000001FF000001FF000001FF000001FF000001FF000001FF000001FF00000
1FF000001FF000001FF000001FF000001FF000001FF000001FF000001FF000001FF00000
1FF000001FF000001FF000001FF000001FF000001FF000001FF000001FF000001FF00000
1FF000001FF000001FF000001FF000001FF000001FF000001FF000001FF000001FF00000
1FF000001FF000001FF000001FF000001FF000001FF000001FF000001FF000001FF00000
1FF000001FF000001FF000001FF000001FF000001FF000001FF000001FF000001FF00000
3FF000003FF80000FFFE00FFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFC1E717AF02C>105
D<0001F00003FF8000000007FFF0003FFFF8000000FFFFF000FFFFFE000000FFFFF003F8
03FF800000FFFFF007C0007FC00000FFFFF00F00003FF0000001FFF03E00001FF0000000
7FF07800000FF80000003FF0F0000007FC0000003FF0E0000003FE0000001FF1E0000003
FE0000001FF3C0000003FE0000001FF780000001FF0000001FF700000001FF0000001FFF
00000001FF0000001FFE00000001FF0000001FFE00000000FF8000001FFC00000000FF80
00001FFC00000000FF8000001FFC00000000FF8000001FF800000000FF8000001FF80000
0000FF8000001FF800000000FF8000001FF800000000FF8000001FF000000000FF800000
1FF000000000FF8000001FF000000000FF8000001FF000000000FF8000001FF000000000
FF8000001FF000000000FF8000001FF000000000FF8000001FF000000000FF8000001FF0
00000000FF8000001FF000000000FF8000001FF000000000FF8000001FF000000000FF80
00001FF000000000FF8000001FF000000000FF8000001FF000000000FF8000001FF00000
0000FF8000001FF000000000FF8000001FF000000000FF8000001FF000000000FF800000
1FF000000000FF8000001FF000000000FF8000001FF000000000FF8000001FF000000000
FF8000001FF000000000FF8000001FF000000000FF8000001FF000000000FF8000001FF0
00000000FF8000001FF000000000FF8000001FF000000000FF8000001FF000000000FF80
00001FF000000000FF8000001FF000000000FF8000001FF000000000FF8000001FF00000
0000FF8000001FF000000000FF8000001FF000000000FF8000001FF000000000FF800000
1FF000000000FF8000001FF000000000FF8000001FF000000000FF8000001FF000000000
FF8000001FF000000000FF8000001FF000000000FF8000001FF000000000FF8000003FF8
00000001FFC000003FF800000001FFC00000FFFE00000007FFF000FFFFFFFE0007FFFFFF
F0FFFFFFFE0007FFFFFFF0FFFFFFFE0007FFFFFFF0FFFFFFFE0007FFFFFFF04C4B7ACA59
>110 D<0003E0000FE00007FFE0007FFC00FFFFE001FFFF00FFFFE007F01F80FFFFE00F
803FC0FFFFE01E007FC001FFE03C00FFE0007FE07800FFE0003FE0F000FFE0003FE1E000
FFE0001FE1C000FFE0001FE3C0007FC0001FE380007FC0001FE780001F00001FE7000000
00001FEF00000000001FEE00000000001FFE00000000001FFE00000000001FFC00000000
001FFC00000000001FFC00000000001FF800000000001FF800000000001FF80000000000
1FF800000000001FF800000000001FF000000000001FF000000000001FF000000000001F
F000000000001FF000000000001FF000000000001FF000000000001FF000000000001FF0
00000000001FF000000000001FF000000000001FF000000000001FF000000000001FF000
000000001FF000000000001FF000000000001FF000000000001FF000000000001FF00000
0000001FF000000000001FF000000000001FF000000000001FF000000000001FF0000000
00001FF000000000001FF000000000001FF000000000001FF000000000001FF000000000
001FF000000000001FF000000000001FF000000000001FF000000000001FF00000000000
1FF000000000001FF000000000001FF000000000001FF000000000001FF000000000001F
F000000000001FF000000000003FF800000000003FFC0000000000FFFF00000000FFFFFF
FFC00000FFFFFFFFC00000FFFFFFFFC00000FFFFFFFFC00000334B7ACA3E>114
D<00001FFE0003000003FFFFC00700000FFFFFF80F00003FE001FC0F0000FE00003F1F00
01F800000FBF0007E0000007FF000FC0000003FF000F80000001FF001F00000000FF003F
000000007F003E000000003F007E000000003F007E000000001F007C000000001F00FC00
0000001F00FC000000000F00FC000000000F00FC000000000F00FC000000000F00FE0000
00000700FE000000000700FF000000000700FF8000000007007FC000000007007FE00000
0007007FF000000000003FF800000000003FFE00000000001FFFE0000000000FFFFE0000
000007FFFFF000000003FFFFFF00000001FFFFFFF0000000FFFFFFFC0000003FFFFFFF00
00001FFFFFFFC0000007FFFFFFE0000000FFFFFFF80000000FFFFFFC000000007FFFFE00
00000007FFFE00000000003FFF00000000000FFF800000000003FFC0E000000001FFC0E0
000000007FE0E0000000003FE0F0000000003FE0F0000000001FE0F0000000000FF0F000
0000000FF0F00000000007F0F80000000007F0F80000000003F0F80000000003F0FC0000
000003F0FC0000000003F0FC0000000003F0FE0000000003F0FE0000000003E0FF000000
0003E0FF0000000007E0FF8000000007C0FF8000000007C0FFC00000000FC0FFE0000000
1F80FFE00000001F00FEF00000003F00FC780000007E00FC3C000000FC00F81F000003F8
00F80FC0000FE000F003F800FF8000E001FFFFFE0000E0003FFFF80000C00007FF800000
344D7BCB3F>I E
/Fe load 0 Fe currentfont 172.833 scalefont put/FMat
X/FBB X/IEn X
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Ff ecbx2488 24.88 7
/EN0 load IEn S/IEn X FBB FMat/FMat[0.00482315 0 0 -0.00482315
0 0]N/FBB[-12 -55 229 190]N
/Ff 7 121 df<007E0003FFC007FFE01FFFF81FFFF83FFFFC7FFFFE7FFFFEFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFE7FFFFE3FFFFC1FFFF81FFFF807FF
E003FFC0007E000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000007E0003FF
C007FFE01FFFF81FFFF83FFFFC7FFFFE7FFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFF7FFFFE7FFFFE3FFFFC1FFFF81FFFF807FFE003FFC0007E00185C6EDB3C
>58 D[<FFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFC
0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000FFFF
FFFFFFFFFFFFFFFFFFFFFFFFFE0000000007FFFFF00000000003FFFFFFFE0000000007FF
FFF000000000000FFFFFFE0000000007FFFFF0000000000000FFFFFE0000000007FFFFF0
0000000000001FFFFE0000000007FFFFF000000000000007FFFE0000000007FFFFF00000
0000000003FFFE0000000007FFFFF000000000000000FFFE0000000007FFFFF000000000
0000007FFF0000000007FFFFF0000000000000003FFF0000000007FFFFF0000000000000
001FFF0000000007FFFFF0000000000000000FFF0000000007FFFFF00000000000000007
FF0000000007FFFFF00000000000000003FF0000000007FFFFF00000000000000003FF00
00000007FFFFF00000000000000001FF0000000007FFFFF00000000000000001FF000000
0007FFFFF00000000000000000FF0000000007FFFFF00000000000000000FF8000000007
FFFFF000000000000000007F8000000007FFFFF000000000000000007F8000000007FFFF
F000000000000000007F8000000007FFFFF000000000000000003F8000000007FFFFF000
000000000000003F8000000007FFFFF000000000000000003F8000000007FFFFF0000000
00000000001F8000000007FFFFF000000000000000001F8000000007FFFFF00000000000
0000001FC000000007FFFFF000000000000000001FC000000007FFFFF000000000000000
001FC000000007FFFFF000000000000000000FC000000007FFFFF000000000000000000F
C000000007FFFFF000000000000000000FC000000007FFFFF000000000000000000FC000
000007FFFFF000000001F80000000FC000000007FFFFF000000001F80000000FC0000000
07FFFFF000000001F80000000FE000000007FFFFF000000001F800000007E000000007FF
FFF000000001F800000007E000000007FFFFF000000001F800000007E000000007FFFFF0
00000001F800000007E000000007FFFFF000000001F8000000000000000007FFFFF00000
0001F8000000000000000007FFFFF000000001F8000000000000000007FFFFF000000003
F8000000000000000007FFFFF000000003F8000000000000000007FFFFF000000003F800
0000000000000007FFFFF000000003F8000000000000000007FFFFF000000007F8000000
000000000007FFFFF000000007F8000000000000000007FFFFF00000000FF80000000000
00000007FFFFF00000000FF8000000000000000007FFFFF00000001FF800000000000000
0007FFFFF00000003FF8000000000000000007FFFFF00000007FF8000000000000000007
FFFFF0000001FFF8000000000000000007FFFFF0000007FFF8000000000000000007FFFF
F000007FFFF8000000000000000007FFFFFFFFFFFFFFF8000000000000000007FFFFFFFF
FFFFFFF8000000000000000007FFFFFFFFFFFFFFF8000000000000000007FFFFFFFFFFFF
FFF8000000000000000007FFFFFFFFFFFFFFF8000000000000000007FFFFFFFFFFFFFFF8
000000000000000007FFFFFFFFFFFFFFF8000000000000000007FFFFF000007FFFF80000
00000000000007FFFFF0000007FFF8000000000000000007FFFFF0000001FFF800000000
0000000007FFFFF00000007FF8000000000000000007FFFFF00000003FF8000000000000
000007FFFFF00000001FF8000000000000000007FFFFF00000000FF80000000000000000
07FFFFF00000000FF8000000000000000007FFFFF000000007F8000000000000000007FF
FFF000000007F8000000000000000007FFFFF000000003F8000000000000000007FFFFF0
00000003F8000000000000000007FFFFF000000003F8000000000000000007FFFFF00000
0003F8000000000000000007FFFFF000000001F8000000000000000007FFFFF000000001
F8000000000000000007FFFFF000000001F8000000001F80000007FFFFF000000001F800
0000001F80000007FFFFF000000001F8000000001F80000007FFFFF000000001F8000000
001F80000007FFFFF000000001F8000000003F00000007FFFFF000000001F8000000003F
00000007FFFFF000000001F8000000003F00000007FFFFF000000001F8000000003F0000
0007FFFFF00000000000000000003F00000007FFFFF00000000000000000003F00000007
FFFFF00000000000000000003F00000007FFFFF00000000000000000007F00000007FFFF
F00000000000000000007E00000007FFFFF00000000000000000007E00000007FFFFF000
00000000000000007E00000007FFFFF00000000000000000007E00000007FFFFF0000000
000000000000FE00000007FFFFF0000000000000000000FE00000007FFFFF00000000000
00000000FE00000007FFFFF0000000000000000000FC00000007FFFFF000000000000000
0001FC00000007FFFFF0000000000000000001FC00000007FFFFF0000000000000000001
FC00000007FFFFF0000000000000000003FC00000007FFFFF0000000000000000003FC00
000007FFFFF0000000000000000003FC00000007FFFFF0000000000000000007FC000000
07FFFFF0000000000000000007F800000007FFFFF000000000000000000FF800000007FF
FFF000000000000000000FF800000007FFFFF000000000000000001FF800000007FFFFF0
00000000000000001FF800000007FFFFF000000000000000003FF800000007FFFFF00000
0000000000007FF800000007FFFFF000000000000000007FF800000007FFFFF000000000
00000000FFF000000007FFFFF00000000000000001FFF000000007FFFFF0000000000000
0003FFF000000007FFFFF00000000000000007FFF000000007FFFFF0000000000000001F
FFF000000007FFFFF0000000000000003FFFF000000007FFFFF000000000000000FFFFF0
00000007FFFFF000000000000003FFFFE000000007FFFFF00000000000000FFFFFE00000
0007FFFFF00000000000007FFFFFE000000007FFFFF0000000000007FFFFFFE000000007
FFFFF00000000001FFFFFFFFE000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE000FFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFE000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE000FFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFC000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC000FFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFC000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC000>129
141 122 268 142 69 D<0000000001FFFC00000000000000003FFFFFE0000000000000
03FFFFFFFE0000000000001FFFFFFFFF8000000000007FFFFFFFFFE00000000001FFFFC0
03FFF80000000007FFFC00003FFE000000000FFFF0000003FF000000003FFFC0000000FF
C00000007FFF800000003FE0000001FFFF000000001FF0000003FFFE0000000007F00000
07FFFC000000003FF800000FFFF800000000FFFC00001FFFF000000003FFFC00003FFFF0
00000007FFFE00003FFFE000000007FFFE00007FFFC00000000FFFFE0000FFFFC0000000
0FFFFF0000FFFF800000001FFFFF0001FFFF800000001FFFFF0003FFFF000000001FFFFF
0003FFFF000000001FFFFF0007FFFF000000001FFFFF0007FFFE000000001FFFFF000FFF
FE000000001FFFFF000FFFFE000000000FFFFE001FFFFE000000000FFFFE001FFFFC0000
000007FFFC001FFFFC0000000007FFFC003FFFFC0000000003FFF8003FFFFC0000000000
FFE0003FFFFC00000000003F80003FFFFC00000000000000007FFFFC0000000000000000
7FFFF800000000000000007FFFF800000000000000007FFFF800000000000000007FFFF8
00000000000000007FFFF80000000000000000FFFFF80000000000000000FFFFF8000000
0000000000FFFFF80000000000000000FFFFF80000000000000000FFFFF8000000000000
0000FFFFF80000000000000000FFFFF80000000000000000FFFFF80000000000000000FF
FFF80000000000000000FFFFF80000000000000000FFFFF80000000000000000FFFFF800
00000000000000FFFFF80000000000000000FFFFF80000000000000000FFFFF800000000
00000000FFFFF800000000000000007FFFF800000000000000007FFFF800000000000000
007FFFF800000000000000007FFFFC00000000000000007FFFFC00000000000000007FFF
FC00000000000000003FFFFC00000000000000003FFFFC00000000000000003FFFFC0000
0000000000001FFFFE00000000000000001FFFFE00000000000000001FFFFE0000000000
0000000FFFFE00000000000000000FFFFF0000000000000FC007FFFF0000000000000FC0
07FFFF0000000000001FC003FFFF8000000000001F8003FFFF8000000000001F8001FFFF
C000000000003F8001FFFFC000000000003F0000FFFFE000000000007F00007FFFE00000
0000007E00007FFFF00000000000FE00003FFFF80000000001FC00001FFFFC0000000003
F800000FFFFC0000000003F8000007FFFE0000000007F0000003FFFF000000000FE00000
01FFFFC00000001FC0000000FFFFE00000007F800000003FFFF8000000FF000000001FFF
FC000003FC0000000007FFFF80000FF80000000001FFFFF800FFE000000000007FFFFFFF
FFC000000000001FFFFFFFFF00000000000003FFFFFFF8000000000000003FFFFFC00000
000000000001FFF800000000525F79DD60>99 D<0000000003FFF800000000000000007F
FFFFC000000000000007FFFFFFFC0000000000003FFFFFFFFF000000000000FFFFFFFFFF
C00000000003FFFF807FFFF00000000007FFFC000FFFFC000000001FFFE00003FFFE0000
00003FFFC00000FFFF00000000FFFF0000007FFF80000001FFFE0000003FFFC0000003FF
FC0000001FFFE0000007FFF80000000FFFF000000FFFF000000007FFF800001FFFE00000
0007FFFC00003FFFE000000003FFFC00007FFFC000000003FFFE00007FFFC000000001FF
FE0000FFFF8000000001FFFF0001FFFF8000000000FFFF0001FFFF0000000000FFFF8003
FFFF0000000000FFFF8003FFFF00000000007FFFC007FFFE00000000007FFFC007FFFE00
000000007FFFC00FFFFE00000000007FFFE00FFFFC00000000003FFFE01FFFFC00000000
003FFFE01FFFFC00000000003FFFE01FFFFC00000000003FFFF03FFFFC00000000003FFF
F03FFFFC00000000003FFFF03FFFFC00000000001FFFF03FFFF800000000001FFFF07FFF
F800000000001FFFF07FFFF800000000001FFFF87FFFF800000000001FFFF87FFFF80000
0000001FFFF87FFFF800000000001FFFF8FFFFF800000000001FFFF8FFFFF80000000000
1FFFF8FFFFF800000000001FFFF8FFFFFFFFFFFFFFFFFFFFF8FFFFFFFFFFFFFFFFFFFFF8
FFFFFFFFFFFFFFFFFFFFF8FFFFFFFFFFFFFFFFFFFFF8FFFFF80000000000000000FFFFF8
0000000000000000FFFFF80000000000000000FFFFF80000000000000000FFFFF8000000
0000000000FFFFF80000000000000000FFFFF80000000000000000FFFFF8000000000000
0000FFFFF80000000000000000FFFFF800000000000000007FFFF800000000000000007F
FFF800000000000000007FFFF800000000000000007FFFF800000000000000007FFFFC00
000000000000003FFFFC00000000000000003FFFFC00000000000000003FFFFC00000000
000000001FFFFC00000000000000001FFFFC00000000000000001FFFFE00000000000000
000FFFFE00000000000000000FFFFE00000000000000000FFFFE00000000000001F807FF
FF00000000000001F807FFFF00000000000003F803FFFF00000000000003F001FFFF8000
0000000003F001FFFF80000000000007F000FFFFC0000000000007E0007FFFC000000000
000FE0007FFFE000000000001FC0003FFFE000000000001F80001FFFF000000000003F80
000FFFF800000000007F000007FFFC0000000000FE000003FFFE0000000001FC000001FF
FF0000000003F8000000FFFF8000000007F00000007FFFE00000001FE00000001FFFF800
00007FC00000000FFFFE000001FF8000000003FFFFC00007FE0000000000FFFFFC00FFFC
00000000003FFFFFFFFFF000000000000FFFFFFFFFC0000000000001FFFFFFFE00000000
0000001FFFFFF00000000000000000FFFF00000000555F7ADD62>101
D[<00007F8000000001FFE000000003FFF000000007FFF80000000FFFFC0000001FFFFE
0000003FFFFF0000003FFFFF0000007FFFFF8000007FFFFF8000007FFFFF8000007FFFFF
8000007FFFFF8000007FFFFF8000007FFFFF8000007FFFFF8000003FFFFF0000003FFFFF
0000001FFFFE0000000FFFFC00000007FFF800000003FFF000000001FFE0000000007F80
000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000007F8000007FFFFF8000FFFFFFFF
8000FFFFFFFF8000FFFFFFFF8000FFFFFFFF8000FFFFFFFF8000FFFFFFFF8000FFFFFFFF
8000003FFFFF80000007FFFF80000007FFFF80000003FFFF80000003FFFF80000003FFFF
80000003FFFF80000003FFFF80000003FFFF80000003FFFF80000003FFFF80000003FFFF
80000003FFFF80000003FFFF80000003FFFF80000003FFFF80000003FFFF80000003FFFF
80000003FFFF80000003FFFF80000003FFFF80000003FFFF80000003FFFF80000003FFFF
80000003FFFF80000003FFFF80000003FFFF80000003FFFF80000003FFFF80000003FFFF
80000003FFFF80000003FFFF80000003FFFF80000003FFFF80000003FFFF80000003FFFF
80000003FFFF80000003FFFF80000003FFFF80000003FFFF80000003FFFF80000003FFFF
80000003FFFF80000003FFFF80000003FFFF80000003FFFF80000003FFFF80000003FFFF
80000003FFFF80000003FFFF80000003FFFF80000003FFFF80000003FFFF80000003FFFF
80000003FFFF80000003FFFF80000003FFFF80000003FFFF80000003FFFF80000003FFFF
80000003FFFF80000003FFFF80000003FFFF80000003FFFF80000003FFFF80000003FFFF
80000003FFFF80000003FFFF80000003FFFF80000003FFFF80000003FFFF80000003FFFF
80000003FFFF80000003FFFF80000003FFFF80000003FFFF80000003FFFF8000FFFFFFFF
FFFCFFFFFFFFFFFCFFFFFFFFFFFCFFFFFFFFFFFCFFFFFFFFFFFCFFFFFFFFFFFCFFFFFFFF
FFFC>46 144 121 271 60 105 D<000000FF00001FF8000000FFFFFF0000FFFF0000FF
FFFFFF0003FFFFE000FFFFFFFF000FFFFFF000FFFFFFFF001FFFFFFC00FFFFFFFF003FF0
0FFE00FFFFFFFF007F003FFF00FFFFFFFF00FE007FFF80FFFFFFFF01F800FFFF80003FFF
FF03F001FFFFC0000FFFFF03E001FFFFC00007FFFF07C003FFFFE00003FFFF078003FFFF
E00003FFFF0F8003FFFFE00003FFFF0F0003FFFFE00003FFFF1F0003FFFFE00003FFFF1E
0003FFFFE00003FFFF3C0003FFFFE00003FFFF3C0003FFFFE00003FFFF3C0001FFFFC000
03FFFF780001FFFFC00003FFFF780000FFFF800003FFFF7000007FFF000003FFFFF00000
3FFE000003FFFFF000000FF8000003FFFFE000000000000003FFFFE000000000000003FF
FFE000000000000003FFFFE000000000000003FFFFE000000000000003FFFFC000000000
000003FFFFC000000000000003FFFFC000000000000003FFFFC000000000000003FFFFC0
00000000000003FFFFC000000000000003FFFF8000000000000003FFFF80000000000000
03FFFF8000000000000003FFFF8000000000000003FFFF8000000000000003FFFF800000
0000000003FFFF8000000000000003FFFF8000000000000003FFFF8000000000000003FF
FF8000000000000003FFFF8000000000000003FFFF8000000000000003FFFF8000000000
000003FFFF8000000000000003FFFF8000000000000003FFFF8000000000000003FFFF80
00000000000003FFFF8000000000000003FFFF8000000000000003FFFF80000000000000
03FFFF8000000000000003FFFF8000000000000003FFFF8000000000000003FFFF800000
0000000003FFFF8000000000000003FFFF8000000000000003FFFF8000000000000003FF
FF8000000000000003FFFF8000000000000003FFFF8000000000000003FFFF8000000000
000003FFFF8000000000000003FFFF8000000000000003FFFF8000000000000003FFFF80
00000000000003FFFF8000000000000003FFFF8000000000000003FFFF80000000000000
03FFFF8000000000000003FFFF8000000000000003FFFF8000000000000003FFFF800000
0000000003FFFF8000000000000003FFFF8000000000000003FFFF8000000000000003FF
FF8000000000000003FFFF8000000000000003FFFF8000000000000003FFFF8000000000
000003FFFF800000000000FFFFFFFFFFFFE0000000FFFFFFFFFFFFE0000000FFFFFFFFFF
FFE0000000FFFFFFFFFFFFE0000000FFFFFFFFFFFFE0000000FFFFFFFFFFFFE0000000FF
FFFFFFFFFFE00000004B5D7ADC57>114 D<7FFFFFFFFFFF00000FFFFFFFFFC07FFFFFFF
FFFF00000FFFFFFFFFC07FFFFFFFFFFF00000FFFFFFFFFC07FFFFFFFFFFF00000FFFFFFF
FFC07FFFFFFFFFFF00000FFFFFFFFFC07FFFFFFFFFFF00000FFFFFFFFFC07FFFFFFFFFFF
00000FFFFFFFFFC00000FFFFFC000000007FFFFC00000000FFFFFE0000000007FF000000
00007FFFFE0000000003FC00000000003FFFFF0000000007F800000000001FFFFF800000
0007F000000000001FFFFFC00000000FF000000000000FFFFFC00000001FE00000000000
07FFFFE00000003FC0000000000007FFFFF00000007F80000000000003FFFFF00000007F
00000000000001FFFFF8000000FF00000000000000FFFFFC000001FE00000000000000FF
FFFE000003FC000000000000007FFFFE000007F8000000000000003FFFFF000007F00000
00000000001FFFFF80000FE0000000000000001FFFFFC0001FE0000000000000000FFFFF
C0003FC00000000000000007FFFFE0007F800000000000000003FFFFF0007F0000000000
00000003FFFFF800FE000000000000000001FFFFF801FE000000000000000000FFFFFC03
FC0000000000000000007FFFFE07F80000000000000000007FFFFF07F000000000000000
00003FFFFF0FE00000000000000000001FFFFF9FE00000000000000000001FFFFFFFC000
00000000000000000FFFFFFF8000000000000000000007FFFFFF00000000000000000000
03FFFFFE0000000000000000000003FFFFFE0000000000000000000001FFFFFC00000000
00000000000000FFFFFC00000000000000000000007FFFFE00000000000000000000007F
FFFF00000000000000000000003FFFFF00000000000000000000001FFFFF800000000000
00000000000FFFFFC0000000000000000000000FFFFFE00000000000000000000007FFFF
E00000000000000000000003FFFFF00000000000000000000003FFFFF800000000000000
00000007FFFFFC000000000000000000000FFFFFFC000000000000000000000FFFFFFE00
0000000000000000001FFFFFFF000000000000000000003FFFFFFF800000000000000000
007F9FFFFF80000000000000000000FF0FFFFFC0000000000000000000FE0FFFFFE00000
00000000000001FE07FFFFE0000000000000000003FC03FFFFF0000000000000000007F8
01FFFFF800000000000000000FF001FFFFFC00000000000000000FE000FFFFFC00000000
000000001FC0007FFFFE00000000000000003FC0003FFFFF00000000000000007F80003F
FFFF8000000000000000FF00001FFFFF8000000000000000FE00000FFFFFC00000000000
0001FC000007FFFFE000000000000003FC000007FFFFF000000000000007F8000003FFFF
F00000000000000FF0000001FFFFF80000000000000FE0000001FFFFFC0000000000001F
C0000000FFFFFE0000000000003FC00000007FFFFE0000000000007F800000003FFFFF00
0000000000FF000000003FFFFF800000000001FE000000001FFFFF800000000001FC0000
00000FFFFFC00000000003FC0000000007FFFFE00000000007F80000000007FFFFF00000
00000FF00000000003FFFFF0000000001FE00000000001FFFFF8000000007FF800000000
00FFFFFC0000000FFFFF0000000000FFFFFE0000FFFFFFFFFC000001FFFFFFFFFFFCFFFF
FFFFFC000001FFFFFFFFFFFCFFFFFFFFFC000001FFFFFFFFFFFCFFFFFFFFFC000001FFFF
FFFFFFFCFFFFFFFFFC000001FFFFFFFFFFFCFFFFFFFFFC000001FFFFFFFFFFFCFFFFFFFF
FC000001FFFFFFFFFFFC6E5C7EDB72>120 D E
/Ff load 0 Ff currentfont 207.333 scalefont put/FMat
X/FBB X/IEn X
%EndDVIPSBitmapFont
end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
 currentpoint /pgf@refy exch def /pgf@refx exch def
 0 0 a 833 0 a
 /pgf@top pgf@refy currentpoint pop pgf@refx sub VResolution Resolution
div mul sub def
 833 0 a 833
0 a
 /pgf@right currentpoint pop def
 833 0 a 34 0 a
 /pgf@bot pgf@refy currentpoint pop pgf@refx sub VResolution Resolution
div mul add def
 34 0 a 0 0 a
 gsave clippath pathbbox newpath pop pop translate systemdict /pdfmark
known {pgf@refx neg pgf@top neg translate} {pgf@right neg pgf@bot neg
translate} ifelse gsave pgf@refx pgf@refy translate mark /_objdef {pgfsmaskxform@9}
/BBox [clippath pathbbox newpath] /BP pdfmark grestore
 0 0 a
 save
 1 TeXcolorgray
0 0 a

 0 0 a 0 0 a


 pgfo
 0 0 a
  100.00128 100.00128 0 0 pgfe << /PatternType 2 /Shading << /ShadingType
2 /ColorSpace /DeviceRGB /Domain [0.0 100.00128] /Coords [0.0 0 100.00128
0] /Function << /FunctionType 3 /Domain [0.0 100.00128] /Functions
[ << /FunctionType 2 /Domain [0.0 100.00128] /C0 [1 1 1] /C1 [1 1 1]
/N 1 >>  << /FunctionType 2 /Domain [0.0 100.00128] /C0 [1 1 1] /C1
[0 0 0] /N 1 >>  << /FunctionType 2 /Domain [0.0 100.00128] /C0 [0
0 0] /C1 [0 0 0] /N 1 >>  ] /Bounds [ 25.00032 75.00096] /Encode [0
1  0 1 0 1] >> >> >> matrix makepattern setpattern fill
 0 0 a
 pgfc



 restore
 Black 0 0 a
 mark /EP pdfmark grestore
 0 0 a 0 0 a
 currentpoint /pgf@refy exch def /pgf@refx exch def

0 0 a 833 0 a
 /pgf@top pgf@refy currentpoint pop pgf@refx sub VResolution Resolution
div mul sub def
 833 0 a 833 0 a
 /pgf@right currentpoint pop def
 833 0 a 34 0 a
 /pgf@bot pgf@refy currentpoint pop pgf@refx sub VResolution Resolution
div mul add def
 34 0 a 0
0 a
 gsave clippath pathbbox newpath pop pop translate systemdict /pdfmark
known {pgf@refx neg pgf@top neg translate} {pgf@right neg pgf@bot neg
translate} ifelse gsave pgf@refx pgf@refy translate mark /_objdef {pgfsmaskxform@10}
/BBox [clippath pathbbox newpath] /BP pdfmark grestore
 0 0 a
 save
 1 TeXcolorgray 0 0 a

 0 0 a 0 0 a


 pgfo
 0 0 a
  100.00128 100.00128 0 0 pgfe << /PatternType 2 /Shading << /ShadingType
2 /ColorSpace /DeviceRGB /Domain [0.0 100.00128] /Coords [0.0 0 100.00128
0] /Function << /FunctionType 3 /Domain [0.0 100.00128] /Functions
[ << /FunctionType 2 /Domain [0.0 100.00128] /C0 [0 0 0] /C1 [0 0 0]
/N 1 >>  << /FunctionType 2 /Domain [0.0 100.00128] /C0 [0 0 0] /C1
[1 1 1] /N 1 >>  << /FunctionType 2 /Domain [0.0 100.00128] /C0 [1
1 1] /C1 [1 1 1] /N 1 >>  ] /Bounds [ 25.00032 75.00096] /Encode [0
1  0 1 0 1] >> >> >> matrix makepattern setpattern fill
 0 0
a
 pgfc



 restore
 Black 0 0 a
 mark /EP pdfmark grestore
 0 0 a 0 0 a
 currentpoint /pgf@refy exch def /pgf@refx exch def
 0 0 a 833 0 a
 /pgf@top pgf@refy currentpoint pop pgf@refx sub VResolution Resolution
div mul sub def
 833 0 a 833 0
a
 /pgf@right currentpoint pop def
 833 0 a 34 0 a
 /pgf@bot pgf@refy currentpoint pop pgf@refx sub VResolution Resolution
div mul add def
 34 0 a 0 0 a
 gsave clippath pathbbox newpath pop pop translate systemdict /pdfmark
known {pgf@refx neg pgf@top neg translate} {pgf@right neg pgf@bot neg
translate} ifelse gsave pgf@refx pgf@refy translate mark /_objdef {pgfsmaskxform@11}
/BBox [clippath pathbbox newpath] /BP pdfmark grestore
 0 0 a
 save
 1 TeXcolorgray 0
0 a

 0 0 a 0 0 a


 pgfo
 0 0 a
  100.00128 100.00128 0 0 pgfe << /PatternType 2 /Shading << /ShadingType
2 /ColorSpace /DeviceRGB /Domain [0.0 100.00128] /Coords [0 0.0 0 100.00128]
/Function << /FunctionType 3 /Domain [0.0 100.00128] /Functions [ <<
/FunctionType 2 /Domain [0.0 100.00128] /C0 [1 1 1] /C1 [1 1 1] /N
1 >>  << /FunctionType 2 /Domain [0.0 100.00128] /C0 [1 1 1] /C1 [0
0 0] /N 1 >>  << /FunctionType 2 /Domain [0.0 100.00128] /C0 [0 0 0]
/C1 [0 0 0] /N 1 >>  ] /Bounds [ 25.00032 75.00096] /Encode [0 1  0
1 0 1] >> >> >> matrix makepattern setpattern fill
 0 0 a
 pgfc



 restore
 Black 0 0 a
 mark /EP pdfmark grestore
 0 0 a 0 0 a
 currentpoint /pgf@refy exch def /pgf@refx exch def
 0
0 a 833 0 a
 /pgf@top pgf@refy currentpoint pop pgf@refx sub VResolution Resolution
div mul sub def
 833 0 a 833 0 a
 /pgf@right currentpoint pop def
 833 0 a 34 0 a
 /pgf@bot pgf@refy currentpoint pop pgf@refx sub VResolution Resolution
div mul add def
 34 0 a 0 0
a
 gsave clippath pathbbox newpath pop pop translate systemdict /pdfmark
known {pgf@refx neg pgf@top neg translate} {pgf@right neg pgf@bot neg
translate} ifelse gsave pgf@refx pgf@refy translate mark /_objdef {pgfsmaskxform@12}
/BBox [clippath pathbbox newpath] /BP pdfmark grestore
 0 0 a
 save
 1 TeXcolorgray 0 0 a

 0 0 a 0 0 a


 pgfo
 0 0 a
  100.00128 100.00128 0 0 pgfe << /PatternType 2 /Shading << /ShadingType
2 /ColorSpace /DeviceRGB /Domain [0.0 100.00128] /Coords [0 0.0 0 100.00128]
/Function << /FunctionType 3 /Domain [0.0 100.00128] /Functions [ <<
/FunctionType 2 /Domain [0.0 100.00128] /C0 [0 0 0] /C1 [0 0 0] /N
1 >>  << /FunctionType 2 /Domain [0.0 100.00128] /C0 [0 0 0] /C1 [1
1 1] /N 1 >>  << /FunctionType 2 /Domain [0.0 100.00128] /C0 [1 1 1]
/C1 [1 1 1] /N 1 >>  ] /Bounds [ 25.00032 75.00096] /Encode [0 1  0
1 0 1] >> >> >> matrix makepattern setpattern fill
 0 0 a
 pgfc



 restore

Black 0 0 a
 mark /EP pdfmark grestore
 0 0 a 0 0 a
 currentpoint /pgf@refy exch def /pgf@refx exch def
 0 0 a 833 0 a
 /pgf@top pgf@refy currentpoint pop pgf@refx sub VResolution Resolution
div mul sub def
 833 0 a 833 0 a
 /pgf@right currentpoint pop def

833 0 a 34 0 a
 /pgf@bot pgf@refy currentpoint pop pgf@refx sub VResolution Resolution
div mul add def
 34 0 a 0 0 a
 gsave clippath pathbbox newpath pop pop translate systemdict /pdfmark
known {pgf@refx neg pgf@top neg translate} {pgf@right neg pgf@bot neg
translate} ifelse gsave pgf@refx pgf@refy translate mark /_objdef {pgfsmaskxform@13}
/BBox [clippath pathbbox newpath] /BP pdfmark grestore
 0 0 a
 save
 1 TeXcolorgray 0 0
a

 0 0 a 0 0 a


 pgfo
 0 0 a
  << /ShadingType 3 /ColorSpace /DeviceRGB /Domain [0.0 50.00064] /Coords
[50.00064 50.00064 0.0 50.00064 50.00064 50.00064] /Function << /FunctionType
3 /Domain [0.0 50.00064] /Functions [ << /FunctionType 2 /Domain [0.0
50.00064] /C0 [1 1 1] /C1 [1 1 1] /N 1 >>  << /FunctionType 2 /Domain
[0.0 50.00064] /C0 [1 1 1] /C1 [0 0 0] /N 1 >>  << /FunctionType 2
/Domain [0.0 50.00064] /C0 [0 0 0] /C1 [0 0 0] /N 1 >>  ] /Bounds [
22.50027 25.00032] /Encode [0 1  0 1 0 1] >> /Extend [true false] >>
shfill
 0 0 a
 pgfc



 restore
 Black 0 0 a
 mark /EP pdfmark grestore
 0 0 a 0 0 a
 currentpoint /pgf@refy exch def /pgf@refx exch def
 0 0
a 833 0 a
 /pgf@top pgf@refy currentpoint pop pgf@refx sub VResolution Resolution
div mul sub def
 833 0 a 833 0 a
 /pgf@right currentpoint pop def
 833 0 a 34 0 a
 /pgf@bot pgf@refy currentpoint pop pgf@refx sub VResolution Resolution
div mul add def
 34 0 a 0 0 a
 gsave clippath pathbbox newpath pop pop translate systemdict /pdfmark
known {pgf@refx neg pgf@top neg translate} {pgf@right neg pgf@bot neg
translate} ifelse gsave pgf@refx pgf@refy translate mark /_objdef {pgfsmaskxform@14}
/BBox [clippath pathbbox newpath] /BP pdfmark grestore

0 0 a
 save
 1 TeXcolorgray 0 0 a

 0 0 a 0 0 a


 pgfo
 0 0 a
  << /ShadingType 3 /ColorSpace /DeviceRGB /Domain [0.0 50.00064] /Coords
[50.00064 50.00064 0.0 50.00064 50.00064 50.00064] /Function << /FunctionType
3 /Domain [0.0 50.00064] /Functions [ << /FunctionType 2 /Domain [0.0
50.00064] /C0 [1 1 1] /C1 [1 1 1] /N 1 >>  << /FunctionType 2 /Domain
[0.0 50.00064] /C0 [1 1 1] /C1 [0 0 0] /N 1 >>  << /FunctionType 2
/Domain [0.0 50.00064] /C0 [0 0 0] /C1 [0 0 0] /N 1 >>  ] /Bounds [
21.25026 25.00032] /Encode [0 1  0 1 0 1] >> /Extend [true false] >>
shfill
 0 0 a
 pgfc



 restore
 Black
0 0 a
 mark /EP pdfmark grestore
 0 0 a 0 0 a
 currentpoint /pgf@refy exch def /pgf@refx exch def
 0 0 a 833 0 a
 /pgf@top pgf@refy currentpoint pop pgf@refx sub VResolution Resolution
div mul sub def
 833 0 a 833 0 a
 /pgf@right currentpoint pop def
 833 0
a 34 0 a
 /pgf@bot pgf@refy currentpoint pop pgf@refx sub VResolution Resolution
div mul add def
 34 0 a 0 0 a
 gsave clippath pathbbox newpath pop pop translate systemdict /pdfmark
known {pgf@refx neg pgf@top neg translate} {pgf@right neg pgf@bot neg
translate} ifelse gsave pgf@refx pgf@refy translate mark /_objdef {pgfsmaskxform@15}
/BBox [clippath pathbbox newpath] /BP pdfmark grestore
 0 0 a
 save
 1 TeXcolorgray 0 0 a

 0 0
a 0 0 a


 pgfo
 0 0 a
  << /ShadingType 3 /ColorSpace /DeviceRGB /Domain [0.0 50.00064] /Coords
[50.00064 50.00064 0.0 50.00064 50.00064 50.00064] /Function << /FunctionType
3 /Domain [0.0 50.00064] /Functions [ << /FunctionType 2 /Domain [0.0
50.00064] /C0 [1 1 1] /C1 [1 1 1] /N 1 >>  << /FunctionType 2 /Domain
[0.0 50.00064] /C0 [1 1 1] /C1 [0 0 0] /N 1 >>  << /FunctionType 2
/Domain [0.0 50.00064] /C0 [0 0 0] /C1 [0 0 0] /N 1 >>  ] /Bounds [
20.00024 25.00032] /Encode [0 1  0 1 0 1] >> /Extend [true false] >>
shfill
 0 0 a
 pgfc



 restore
 Black 0 0 a
 mark /EP pdfmark grestore
 0 0 a 0 0 a
 currentpoint /pgf@refy exch def /pgf@refx exch def
 0 0 a 833
0 a
 /pgf@top pgf@refy currentpoint pop pgf@refx sub VResolution Resolution
div mul sub def
 833 0 a 833 0 a
 /pgf@right currentpoint pop def
 833 0 a 34 0 a
 /pgf@bot pgf@refy currentpoint pop pgf@refx sub VResolution Resolution
div mul add def
 34 0 a 0 0 a
 gsave clippath pathbbox newpath pop pop translate systemdict /pdfmark
known {pgf@refx neg pgf@top neg translate} {pgf@right neg pgf@bot neg
translate} ifelse gsave pgf@refx pgf@refy translate mark /_objdef {pgfsmaskxform@16}
/BBox [clippath pathbbox newpath] /BP pdfmark grestore
 0 0 a
 save

1 TeXcolorgray 0 0 a

 0 0 a 0 0 a


 pgfo
 0 0 a
  << /ShadingType 3 /ColorSpace /DeviceRGB /Domain [0.0 50.00064] /Coords
[50.00064 50.00064 0.0 50.00064 50.00064 50.00064] /Function << /FunctionType
3 /Domain [0.0 50.00064] /Functions [ << /FunctionType 2 /Domain [0.0
50.00064] /C0 [0 0 0] /C1 [0 0 0] /N 1 >>  << /FunctionType 2 /Domain
[0.0 50.00064] /C0 [0 0 0] /C1 [1 1 1] /N 1 >>  << /FunctionType 2
/Domain [0.0 50.00064] /C0 [1 1 1] /C1 [0 0 0] /N 1 >>  << /FunctionType
2 /Domain [0.0 50.00064] /C0 [0 0 0] /C1 [0 0 0] /N 1 >>  ] /Bounds
[ 21.25026 23.12529 25.00032] /Encode [0 1  0 1 0 1 0 1] >> /Extend
[true false] >> shfill
 0 0 a
 pgfc



 restore
 Black 0
0 a
 mark /EP pdfmark grestore
 0 0 a 0 TeXcolorgray Black 0 TeXcolorgray -364 -246
a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -364 -246 a -364 -246 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -364 -246 a -364 -246 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -364
-246 a -364 -246 a
0.8 setlinewidth 0 setgray
 -364 -246 a -364 -246 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -364 -246
a -364 -246 a
0.8 setlinewidth 0 setgray
 -364 -246 a -303 -103 a Ff(Exercice)71
b(:)181 b Fe(Arbres)52 b(binaires)p -364 10 4489 5 v
-364 399 a Fd(Exercice)46 b(2)p 0 TeXcolorgray 0 TeXcolorgray
698 571 a Fc(Arbre)35 b(1)1653 b(Arbre)34 b(2)-154 2167
y
tx@Dict begin { 121.63467 169.29314 } PutCoor PutBegin  end
 -154 2167 a -199 2196 a
tx@Dict begin  tx@NodeDict begin { 10.88788  2 div 7.08139  0.0  add
2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@A 11
{InitCnode } /NodeScale {} def NewNode end  end
 -199 2196 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray    10.88788  2 div 7.08139
 0.0  add 2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add  CLW 2 div add
0 360 arc closepath gsave 0.8 SLW 0  setgray  1. revision 952 gt {
.setstrokeconstantalpha }{ .setopacityalpha } ifelse   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial Fb(10)-154 2167 y
tx@Dict begin  PutEnd  end
 -154 2167 a -154 2167
a
tx@Dict begin { 57.61642 129.45946 } PutCoor PutBegin  end
 -154 2167 a -177 2196 a
tx@Dict begin  tx@NodeDict begin { 5.44394  2 div 7.08139  0.0  add
2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@B1 11
{InitCnode } /NodeScale {} def NewNode end  end
 -177 2196 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray    5.44394  2 div 7.08139
 0.0  add 2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add  CLW 2 div add
0 360 arc closepath gsave 0.8 SLW 0  setgray  1. revision 952 gt {
.setstrokeconstantalpha }{ .setopacityalpha } ifelse   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial Fb(7)-154 2167 y
tx@Dict begin  PutEnd  end
 -154 2167 a -154 2167 a
tx@Dict begin { 185.65292 129.45946 } PutCoor PutBegin  end

-154 2167 a -177 2196 a
tx@Dict begin  tx@NodeDict begin { 5.44394  2 div 7.08139  0.0  add
2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@B2 11
{InitCnode } /NodeScale {} def NewNode end  end
 -177 2196 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray    5.44394  2 div 7.08139
 0.0  add 2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add  CLW 2 div add
0 360 arc closepath gsave 0.8 SLW 0  setgray  1. revision 952 gt {
.setstrokeconstantalpha }{ .setopacityalpha } ifelse   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial Fb(6)-154 2167 y
tx@Dict begin  PutEnd  end
 -154 2167 a -154 2167 a
tx@Dict begin { 32.00912 89.62578 } PutCoor PutBegin  end

-154 2167 a -177 2196 a
tx@Dict begin  tx@NodeDict begin { 5.44394  2 div 7.08139  0.0  add
2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@C1 11
{InitCnode } /NodeScale {} def NewNode end  end
 -177 2196 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray    5.44394  2 div 7.08139
 0.0  add 2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add  CLW 2 div add
0 360 arc closepath gsave 0.8 SLW 0  setgray  1. revision 952 gt {
.setstrokeconstantalpha }{ .setopacityalpha } ifelse   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial Fb(9)-154 2167 y
tx@Dict begin  PutEnd  end
 -154 2167 a -154 2167 a
tx@Dict begin { 83.22372 89.62578 } PutCoor PutBegin  end

-154 2167 a -177 2196 a
tx@Dict begin  tx@NodeDict begin { 5.44394  2 div 7.08139  0.0  add
2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@C2 11
{InitCnode } /NodeScale {} def NewNode end  end
 -177 2196 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray    5.44394  2 div 7.08139
 0.0  add 2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add  CLW 2 div add
0 360 arc closepath gsave 0.8 SLW 0  setgray  1. revision 952 gt {
.setstrokeconstantalpha }{ .setopacityalpha } ifelse   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial Fb(4)-154 2167 y
tx@Dict begin  PutEnd  end
 -154 2167 a -154 2167 a
tx@Dict begin { 160.04562 89.62578 } PutCoor PutBegin  end

-154 2167 a -177 2196 a
tx@Dict begin  tx@NodeDict begin { 5.44394  2 div 7.08139  0.0  add
2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@D1 11
{InitCnode } /NodeScale {} def NewNode end  end
 -177 2196 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray    5.44394  2 div 7.08139
 0.0  add 2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add  CLW 2 div add
0 360 arc closepath gsave 0.8 SLW 0  setgray  1. revision 952 gt {
.setstrokeconstantalpha }{ .setopacityalpha } ifelse   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial Fb(1)-154 2167 y
tx@Dict begin  PutEnd  end
 -154 2167 a -154 2167 a
tx@Dict begin { 211.26022 89.62578 } PutCoor PutBegin  end

-154 2167 a -177 2196 a
tx@Dict begin  tx@NodeDict begin { 5.44394  2 div 7.08139  0.0  add
2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@D2 11
{InitCnode } /NodeScale {} def NewNode end  end
 -177 2196 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray    5.44394  2 div 7.08139
 0.0  add 2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add  CLW 2 div add
0 360 arc closepath gsave 0.8 SLW 0  setgray  1. revision 952 gt {
.setstrokeconstantalpha }{ .setopacityalpha } ifelse   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial Fb(8)-154 2167 y
tx@Dict begin  PutEnd  end
 -154 2167 a -154 2167 a
tx@Dict begin { 19.20547 49.7921 } PutCoor PutBegin  end

-154 2167 a -177 2196 a
tx@Dict begin  tx@NodeDict begin { 5.44394  2 div 7.08139  0.0  add
2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@E1 11
{InitCnode } /NodeScale {} def NewNode end  end
 -177 2196 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray    5.44394  2 div 7.08139
 0.0  add 2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add  CLW 2 div add
0 360 arc closepath gsave 0.8 SLW 0  setgray  1. revision 952 gt {
.setstrokeconstantalpha }{ .setopacityalpha } ifelse   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial Fb(5)-154 2167 y
tx@Dict begin  PutEnd  end
 -154 2167 a -154 2167 a
tx@Dict begin { 70.42007 49.7921 } PutCoor PutBegin  end

-154 2167 a -177 2196 a
tx@Dict begin  tx@NodeDict begin { 5.44394  2 div 7.08139  0.0  add
2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@F1 11
{InitCnode } /NodeScale {} def NewNode end  end
 -177 2196 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray    5.44394  2 div 7.08139
 0.0  add 2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add  CLW 2 div add
0 360 arc closepath gsave 0.8 SLW 0  setgray  1. revision 952 gt {
.setstrokeconstantalpha }{ .setopacityalpha } ifelse   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial Fb(3)-154 2167 y
tx@Dict begin  PutEnd  end
 -154 2167 a -154 2167 a
tx@Dict begin { 96.02737 49.7921 } PutCoor PutBegin  end

-154 2167 a -177 2196 a
tx@Dict begin  tx@NodeDict begin { 5.44394  2 div 7.08139  0.0  add
2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@F2 11
{InitCnode } /NodeScale {} def NewNode end  end
 -177 2196 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray    5.44394  2 div 7.08139
 0.0  add 2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add  CLW 2 div add
0 360 arc closepath gsave 0.8 SLW 0  setgray  1. revision 952 gt {
.setstrokeconstantalpha }{ .setopacityalpha } ifelse   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial Fb(2)-154 2167 y
tx@Dict begin  PutEnd  end
 -154 2167 a -154 2167 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@A /N@B1 InitNC { NCCoor tx@Dict begin ArrowA
CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED x1 y1 0.5  1
gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{/ArrowPos
0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul
x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat }
ifelse pop pop lineto pop pop end  } if end  gsave 0.8 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   0  setlinejoin 0  setlinecap stroke  grestore  grestore end

-154 2167 a -154 2167 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@A /N@B2 InitNC { NCCoor tx@Dict begin ArrowA
CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED x1 y1 0.5  1
gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{/ArrowPos
0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul
x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat }
ifelse pop pop lineto pop pop end  } if end  gsave 0.8 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 -154 2167 a -154 2167 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@B1 /N@C1 InitNC { NCCoor tx@Dict begin ArrowA
CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED x1 y1 0.5  1
gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{/ArrowPos
0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul
x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat }
ifelse pop pop lineto pop pop end  } if end  gsave 0.8 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 -154
2167 a -154 2167 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@B1 /N@C2 InitNC { NCCoor tx@Dict begin ArrowA
CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED x1 y1 0.5  1
gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{/ArrowPos
0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul
x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat }
ifelse pop pop lineto pop pop end  } if end  gsave 0.8 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 -154 2167 a -154 2167 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@B2 /N@D1 InitNC { NCCoor tx@Dict begin ArrowA
CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED x1 y1 0.5  1
gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{/ArrowPos
0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul
x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat }
ifelse pop pop lineto pop pop end  } if end  gsave 0.8 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 -154 2167
a -154 2167 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@B2 /N@D2 InitNC { NCCoor tx@Dict begin ArrowA
CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED x1 y1 0.5  1
gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{/ArrowPos
0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul
x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat }
ifelse pop pop lineto pop pop end  } if end  gsave 0.8 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 -154 2167 a -154 2167 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@C1 /N@E1 InitNC { NCCoor tx@Dict begin ArrowA
CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED x1 y1 0.5  1
gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{/ArrowPos
0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul
x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat }
ifelse pop pop lineto pop pop end  } if end  gsave 0.8 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 -154 2167 a -154
2167 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@C2 /N@F1 InitNC { NCCoor tx@Dict begin ArrowA
CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED x1 y1 0.5  1
gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{/ArrowPos
0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul
x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat }
ifelse pop pop lineto pop pop end  } if end  gsave 0.8 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 -154 2167 a -154 2167 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@C2 /N@F2 InitNC { NCCoor tx@Dict begin ArrowA
CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED x1 y1 0.5  1
gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{/ArrowPos
0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul
x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat }
ifelse pop pop lineto pop pop end  } if end  gsave 0.8 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 -154 2167 a 1895 2167
a
tx@Dict begin { 121.63467 169.29314 } PutCoor PutBegin  end
 1895 2167 a 1872 2196 a
tx@Dict begin  tx@NodeDict begin { 5.44394  2 div 7.08139  0.0  add
2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@A 11
{InitCnode } /NodeScale {} def NewNode end  end
 1872 2196 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray    5.44394  2 div 7.08139
 0.0  add 2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add  CLW 2 div add
0 360 arc closepath gsave 0.8 SLW 0  setgray  1. revision 952 gt {
.setstrokeconstantalpha }{ .setopacityalpha } ifelse   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial Fb(5)1895 2167 y
tx@Dict begin  PutEnd  end
 1895 2167 a 1895 2167 a
tx@Dict begin { 57.61642 129.45946 } PutCoor PutBegin  end

1895 2167 a 1872 2196 a
tx@Dict begin  tx@NodeDict begin { 5.44394  2 div 7.08139  0.0  add
2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@B1 11
{InitCnode } /NodeScale {} def NewNode end  end
 1872 2196 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray    5.44394  2 div 7.08139
 0.0  add 2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add  CLW 2 div add
0 360 arc closepath gsave 0.8 SLW 0  setgray  1. revision 952 gt {
.setstrokeconstantalpha }{ .setopacityalpha } ifelse   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial Fb(6)1895 2167 y
tx@Dict begin  PutEnd  end
 1895 2167 a 1895 2167 a
tx@Dict begin { 185.65292 129.45946 } PutCoor PutBegin  end

1895 2167 a 1872 2196 a
tx@Dict begin  tx@NodeDict begin { 5.44394  2 div 7.08139  0.0  add
2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@B2 11
{InitCnode } /NodeScale {} def NewNode end  end
 1872 2196 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray    5.44394  2 div 7.08139
 0.0  add 2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add  CLW 2 div add
0 360 arc closepath gsave 0.8 SLW 0  setgray  1. revision 952 gt {
.setstrokeconstantalpha }{ .setopacityalpha } ifelse   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial Fb(7)1895 2167 y
tx@Dict begin  PutEnd  end
 1895 2167 a 1895 2167 a
tx@Dict begin { 83.22372 89.62578 } PutCoor PutBegin  end

1895 2167 a 1872 2196 a
tx@Dict begin  tx@NodeDict begin { 5.44394  2 div 7.08139  0.0  add
2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@C2 11
{InitCnode } /NodeScale {} def NewNode end  end
 1872 2196 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray    5.44394  2 div 7.08139
 0.0  add 2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add  CLW 2 div add
0 360 arc closepath gsave 0.8 SLW 0  setgray  1. revision 952 gt {
.setstrokeconstantalpha }{ .setopacityalpha } ifelse   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial Fb(9)1895 2167 y
tx@Dict begin  PutEnd  end
 1895 2167 a 1895 2167 a
tx@Dict begin { 160.04562 89.62578 } PutCoor PutBegin  end

1895 2167 a 1872 2196 a
tx@Dict begin  tx@NodeDict begin { 5.44394  2 div 7.08139  0.0  add
2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@D1 11
{InitCnode } /NodeScale {} def NewNode end  end
 1872 2196 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray    5.44394  2 div 7.08139
 0.0  add 2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add  CLW 2 div add
0 360 arc closepath gsave 0.8 SLW 0  setgray  1. revision 952 gt {
.setstrokeconstantalpha }{ .setopacityalpha } ifelse   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial Fb(8)1895 2167 y
tx@Dict begin  PutEnd  end
 1895 2167 a 1895 2167 a
tx@Dict begin { 70.42007 49.7921 } PutCoor PutBegin  end

1895 2167 a 1872 2196 a
tx@Dict begin  tx@NodeDict begin { 5.44394  2 div 7.08139  0.0  add
2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@F1 11
{InitCnode } /NodeScale {} def NewNode end  end
 1872 2196 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray    5.44394  2 div 7.08139
 0.0  add 2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add  CLW 2 div add
0 360 arc closepath gsave 0.8 SLW 0  setgray  1. revision 952 gt {
.setstrokeconstantalpha }{ .setopacityalpha } ifelse   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial Fb(4)1895 2167 y
tx@Dict begin  PutEnd  end
 1895 2167 a 1895 2167 a
tx@Dict begin { 147.24197 49.7921 } PutCoor PutBegin  end

1895 2167 a 1872 2196 a
tx@Dict begin  tx@NodeDict begin { 5.44394  2 div 7.08139  0.0  add
2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@G1 11
{InitCnode } /NodeScale {} def NewNode end  end
 1872 2196 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray    5.44394  2 div 7.08139
 0.0  add 2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add  CLW 2 div add
0 360 arc closepath gsave 0.8 SLW 0  setgray  1. revision 952 gt {
.setstrokeconstantalpha }{ .setopacityalpha } ifelse   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial Fb(2)1895 2167 y
tx@Dict begin  PutEnd  end
 1895 2167 a 1895 2167 a
tx@Dict begin { 172.84927 49.7921 } PutCoor PutBegin  end

1895 2167 a 1872 2196 a
tx@Dict begin  tx@NodeDict begin { 5.44394  2 div 7.08139  0.0  add
2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@G2 11
{InitCnode } /NodeScale {} def NewNode end  end
 1872 2196 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray    5.44394  2 div 7.08139
 0.0  add 2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add  CLW 2 div add
0 360 arc closepath gsave 0.8 SLW 0  setgray  1. revision 952 gt {
.setstrokeconstantalpha }{ .setopacityalpha } ifelse   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial Fb(3)1895 2167 y
tx@Dict begin  PutEnd  end
 1895 2167 a 1895 2167 a
tx@Dict begin { 76.8219 9.95842 } PutCoor PutBegin  end

1895 2167 a 1872 2196 a
tx@Dict begin  tx@NodeDict begin { 5.44394  2 div 7.08139  0.0  add
2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add 0.8 add} false /N@K2 11
{InitCnode } /NodeScale {} def NewNode end  end
 1872 2196 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray    5.44394  2 div 7.08139
 0.0  add 2 div 2 copy 0.0  sub 4 2 roll Pyth 3.0 add  CLW 2 div add
0 360 arc closepath gsave 0.8 SLW 0  setgray  1. revision 952 gt {
.setstrokeconstantalpha }{ .setopacityalpha } ifelse   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial Fb(1)1895 2167 y
tx@Dict begin  PutEnd  end
 1895 2167 a 1895 2167 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@A /N@B1 InitNC { NCCoor tx@Dict begin ArrowA
CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED x1 y1 0.5  1
gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{/ArrowPos
0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul
x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat }
ifelse pop pop lineto pop pop end  } if end  gsave 0.8 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   0  setlinejoin 0  setlinecap stroke  grestore  grestore end

1895 2167 a 1895 2167 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@A /N@B2 InitNC { NCCoor tx@Dict begin ArrowA
CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED x1 y1 0.5  1
gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{/ArrowPos
0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul
x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat }
ifelse pop pop lineto pop pop end  } if end  gsave 0.8 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 1895 2167 a 1895 2167 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@B1 /N@C2 InitNC { NCCoor tx@Dict begin ArrowA
CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED x1 y1 0.5  1
gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{/ArrowPos
0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul
x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat }
ifelse pop pop lineto pop pop end  } if end  gsave 0.8 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 1895
2167 a 1895 2167 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@B2 /N@D1 InitNC { NCCoor tx@Dict begin ArrowA
CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED x1 y1 0.5  1
gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{/ArrowPos
0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul
x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat }
ifelse pop pop lineto pop pop end  } if end  gsave 0.8 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 1895 2167 a 1895 2167 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@C2 /N@F1 InitNC { NCCoor tx@Dict begin ArrowA
CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED x1 y1 0.5  1
gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{/ArrowPos
0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul
x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat }
ifelse pop pop lineto pop pop end  } if end  gsave 0.8 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 1895 2167
a 1895 2167 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@D1 /N@G1 InitNC { NCCoor tx@Dict begin ArrowA
CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED x1 y1 0.5  1
gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{/ArrowPos
0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul
x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat }
ifelse pop pop lineto pop pop end  } if end  gsave 0.8 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 1895 2167 a 1895 2167 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@D1 /N@G2 InitNC { NCCoor tx@Dict begin ArrowA
CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED x1 y1 0.5  1
gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{/ArrowPos
0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul
x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat }
ifelse pop pop lineto pop pop end  } if end  gsave 0.8 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 1895 2167 a 1895
2167 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { }
def /ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  /NCLW CLW def tx@NodeDict begin
0.0 0.0 neg 0.0 0.0 0 0 /N@F1 /N@K2 InitNC { NCCoor tx@Dict begin ArrowA
CP 4 2 roll ArrowB 4 copy /y2 ED /x2 ED /y1 ED /x1 ED x1 y1 0.5  1
gt { /Alpha y2 y1 sub x2 x1 sub atan def /ArrowPos 0.  def /Length
x2 x1 sub y2 y1 sub Pyth def /dArrowPos 0.5  abs def {/ArrowPos ArrowPos
dArrowPos add def ArrowPos Length gt { exit } if x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } loop }{/ArrowPos
0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def
1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul
x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat }
ifelse pop pop lineto pop pop end  } if end  gsave 0.8 SLW 0  setgray
 1. revision 952 gt { .setstrokeconstantalpha }{ .setopacityalpha }
ifelse   0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 1895 2167 a -364 2380 a Fb(Les)d(arbres)f(1)h(et)f(2)h
(ci-dessus)f(son)m(t)h(des)f(arbres)g(binaires.)i(On)e(supp)s(ose)g
(que)h(la)f(racine)h(est)f(de)h(profondeur)g(0.)p 0 TeXcolorgray
-274 2524 a Fc(1\))p 0 TeXcolorgray 45 w Fb(Donner)h(la)e(taille)h(et)g
(la)f(hauteur)i(des)e(arbres)g(binaires)h(1)g(et)f(2.)p
0 TeXcolorgray -274 2668 a Fc(2\))p 0 TeXcolorgray 45
w Fb(Donner)i(la)e(v)-5 b(aleur)31 b(des)f(feuilles)g(de)h(c)m(haque)g
(arbre.)p 0 TeXcolorgray -274 2812 a Fc(3\))p 0 TeXcolorgray
45 w Fb(On)f(\351tiquette)h(les)e(arbres.)h(En)g(binaire,)h(le)e(no)s
(eud)h(racine)g(est)g Fa(1)p Fb(,)g(son)f(\034ls)g(gauc)m(he)i
Fa(10)p Fb(,)g(son)e(\034ls)h(droit)g Fa(11)p Fb(,)g(etc.)g(Quelle)g
(est)-137 2925 y(l'\351tiquette)i(du)f(no)s(eud)f(de)h(v)-5
b(aleur)30 b Fa(2)h Fb(dans)f(c)m(haque)i(arbre)15 b(?)p
0 TeXcolorgray -274 3069 a Fc(4\))p 0 TeXcolorgray 45
w Fb(Donner)32 b(une)e(construction)i(r\351cursiv)m(e)f(de)g(c)m(haque)
g(arbre.)-364 3346 y Fd(Exercice)46 b(3)-364 3518 y Fb(Nous)32
b(allons)h(utiliser)g(un)g(mo)s(dule)g(con)m(tenan)m(t)i(les)e(classes)
f(No)s(eud)g(et)h(Arbre)f(p)s(our)h(nos)g(arbres)f(binaires.)i(V)-8
b(ous)32 b(trouv)m(erez)i(les)-364 3630 y(\034c)m(hiers)e(sur)e(l'ENT.)
p 0 TeXcolorgray -272 3775 a(\026)p 0 TeXcolorgray 45
w(P)m(our)i(Jup)m(yter)g(Noteb)s(o)s(ok)e(:)g(arbre_binaire_jup)m
(yter.p)m(y)p 0 TeXcolorgray -272 3919 a(\026)p 0 TeXcolorgray
45 w(P)m(our)i(les)e(IDLE)h(p)m(ython)g(:)g(arbre_binaire.p)m(y)-364
4063 y(Apr\350s)f(a)m(v)m(oir)i(r\351cup)s(\351r\351)f(ces)f(\034c)m
(hiers,)i(v)m(ous)e(p)s(ourrez)h(directemen)m(t)i(tra)m(v)-5
b(ailler)31 b(dedans)g(ou)g(faire)f(une)h(copie)g(de)g(tra)m(v)-5
b(ail.)-364 4303 y Fc(In)m(terface)-364 4475 y Fb(L'in)m(terface)32
b(de)f(notre)g(arbre)g(binaire)g(est)g(en)f(programmation)j(orien)m
(t\351e)f(ob)5 b(jet.)p 0 TeXcolorgray -272 4619 a(\026)p
0 TeXcolorgray 45 w(Un)31 b(ob)5 b(jet)30 b(Arbre)h(a)f(p)s(our)h
(attribut)g Fc(racine)f Fb(qui)h(con)m(tien)m(t)h(un)f(ob)5
b(jet)30 b Fc(No)s(eud)p Fb(.)p 0 TeXcolorgray -272 4763
a(\026)p 0 TeXcolorgray 45 w(Un)f(ob)5 b(jet)30 b(No)s(eud)f(p)s
(oss\350de)f(3)h(attributs)h(:)f(v)-5 b(aleur,)30 b(gauc)m(he)g(et)g
(droit.)g(A)e(la)h(cr\351ation)i(d'un)e(No)s(eud,)g(l'attribut)i(v)-5
b(aleur)29 b(est)-137 4876 y(requis.)i(Les)f(attributs)h(gauc)m(he)h
(et)f(droit,)g(s'ils)f(ne)g(son)m(t)h(pas)f(pr\351cis\351s,)h(v)-5
b(alen)m(t)31 b(None.)p 0 TeXcolorgray -272 5020 a(\026)p
0 TeXcolorgray 45 w(La)36 b(m\351tho)s(de)h Fc(est_vide)f
Fb(de)f(la)h(classe)f(Arbre)h(teste)g(si)f(un)h(arbre)g(est)f(vide.)h
(Cette)g(m\351tho)s(de)g(ne)g(s'applique)g(pas)g(\340)f(la)-137
5133 y(classe)c(No)s(eud.)p 0 TeXcolorgray -272 5277
a(\026)p 0 TeXcolorgray 45 w(Une)g(m\351tho)s(de)g Fc(a\036c)m(he)g
Fb(de)f(la)h(classe)f(arbre)h(p)s(ermet)g(d'a\036c)m(her)h(l'arbre)f
(binaire.)p 0 TeXcolorgray -274 5437 a Fc(1\))p 0 TeXcolorgray
45 w Fb(Cr\351er)h(un)e(arbre)h(binaire)h(comp)s(os\351)e(d'une)h
(seule)g(racine.)p 0 TeXcolorgray -274 5582 a Fc(2\))p
0 TeXcolorgray 45 w Fb(Cr\351er)h(un)e(arbre)h(binaire)h(complet)f(de)g
(hauteur)g(2.)p 0 TeXcolorgray -274 5726 a Fc(3\))p 0
TeXcolorgray 45 w Fb(Cr\351er)h(un)e(arbre)h(binaire)h(de)e(hauteur)i
(3,)e(bien)h(tass\351,)f(de)h(taille)g(5.)p 0 TeXcolorgray
-274 5870 a Fc(4\))p 0 TeXcolorgray 45 w Fb(Cr\351er)h(les)e(arbres)g
(binaires)h(de)g(l'exercice)g(1.)p 0 TeXcolorgray 1858
6310 a(1)p 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -364 -154 a Fd(Exercice)46 b(4)-364 17 y
Fb(P)m(our)32 b(cet)f(exercice,)g(v)m(ous)f(p)s(ouv)m(ez)h(utiliser)g
(l'in)m(terface)h(en)e(POO)h(de)g(l'exercice)g(pr\351c\351den)m(t)i(ou)
d(v)m(otre)h(propre)g(in)m(terface.)p 0 TeXcolorgray
-274 177 a Fc(1\))p 0 TeXcolorgray 45 w Fb(On)g(donne)g(l'algorithme)i
(d'une)e(fonction)g(p)s(our)f(d\351terminer)i(la)f(taille)g(d'un)g
(arbre)g(binaire)g(a)f(:)p 0 TeXcolorgray 0 TeXcolorgray
592 430 a(Si)g(a)h(est)f(vide)g(:)740 568 y(ren)m(v)m(o)m(y)m(er)j(0)d
(\(la)h(taille)g(est)f(\351gale)h(\340)f(0,)h(pas)f(de)g(no)s(euds\))
592 706 y(Sinon)h(:)740 843 y(ren)m(v)m(o)m(y)m(er)i(1)d(+)g(taille)h
(de)g(l'arbre)g(gauc)m(he)h(+)e(taille)h(de)g(l'arbre)g(droit)p
533 317 2922 4 v 533 913 4 597 v 3451 913 V 533 915 2922
4 v 0 TeXcolorgray -73 1081 a Fc(a\))p 0 TeXcolorgray
46 w Fb(Quel)g(pro)s(c\351d\351)g(est)g(utilis\351)f(par)h(cette)g
(fonction)g(p)s(our)f(calculer)i(la)e(taille)h(d'un)g(arbre)g(binaire)
15 b(?)p 0 TeXcolorgray -80 1225 a Fc(b\))p 0 TeXcolorgray
45 w Fb(Programmer)33 b(cette)e(fonction)g(en)g(p)m(ython)g(et)f
(d\351terminer)i(la)f(taille)g(des)f(arbres)h(saisis)e(\340)i
(l'exercice)g(pr\351c\351den)m(t.)p 0 TeXcolorgray -274
1401 a Fc(2\))p 0 TeXcolorgray 45 w Fb(\311crire)39 b(un)f(algorithme)h
(qui)e(p)s(ermet)h(de)f(calculer)i(la)e(hauteur)i(d'un)f(arbre)g
(binaire)g(puis)g(l'ex\351cuter)g(dans)g(v)m(otre)g(pro-)-137
1514 y(gramme)32 b(p)m(ython.)p 0 TeXcolorgray -274 1658
a Fc(3\))p 0 TeXcolorgray 45 w Fb(Cr\351er)g(une)g(fonction)f
Fc(niv)m(eau)g Fb(en)h(Python)g(qui)e(prend)i(un)f(arbre)h(et)f(une)h
(profondeur)g(p)f(en)g(param\350tres)i(et)e(qui)g(ren)m(v)m(oie)-137
1771 y(la)g(liste)f(des)h(no)s(euds)f(\(v)-5 b(aleurs\))31
b(situ\351s)f(au)g(niv)m(eau)i(de)e(profondeur)i(p.)p
0 TeXcolorgray 1858 6310 a(2)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
